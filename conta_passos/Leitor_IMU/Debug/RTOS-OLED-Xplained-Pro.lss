
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b714  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b714  0040b714  0001b714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  0040b71c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000048c  204009d8  0040c0f4  000209d8  2**2
                  ALLOC
  4 .stack        00002004  20400e64  0040c580  000209d8  2**0
                  ALLOC
  5 .heap         00000200  20402e68  0040e584  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   00029de8  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005a4a  00000000  00000000  0004a847  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000eb79  00000000  00000000  00050291  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000011c0  00000000  00000000  0005ee0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015b0  00000000  00000000  0005ffca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027b35  00000000  00000000  0006157a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000189e1  00000000  00000000  000890af  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009ab13  00000000  00000000  000a1a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004310  00000000  00000000  0013c5a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	68 2e 40 20 71 14 40 00 6f 14 40 00 6f 14 40 00     h.@ q.@.o.@.o.@.
  400010:	6f 14 40 00 6f 14 40 00 6f 14 40 00 00 00 00 00     o.@.o.@.o.@.....
	...
  40002c:	49 18 40 00 6f 14 40 00 00 00 00 00 e9 18 40 00     I.@.o.@.......@.
  40003c:	51 19 40 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     Q.@.o.@.o.@.o.@.
  40004c:	6f 14 40 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     o.@.o.@.o.@.o.@.
  40005c:	6f 14 40 00 6f 14 40 00 00 00 00 00 61 11 40 00     o.@.o.@.....a.@.
  40006c:	75 11 40 00 89 11 40 00 6f 14 40 00 6f 14 40 00     u.@...@.o.@.o.@.
  40007c:	6f 14 40 00 9d 11 40 00 b1 11 40 00 6f 14 40 00     o.@...@...@.o.@.
  40008c:	6f 14 40 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     o.@.o.@.o.@.o.@.
  40009c:	6f 14 40 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     o.@.o.@.o.@.o.@.
  4000ac:	6f 14 40 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     o.@.o.@.o.@.o.@.
  4000bc:	6f 14 40 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     o.@.o.@.o.@.o.@.
  4000cc:	6f 14 40 00 00 00 00 00 6f 14 40 00 00 00 00 00     o.@.....o.@.....
  4000dc:	6f 14 40 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     o.@.o.@.o.@.o.@.
  4000ec:	6f 14 40 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     o.@.o.@.o.@.o.@.
  4000fc:	6f 14 40 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     o.@.o.@.o.@.o.@.
  40010c:	6f 14 40 00 6f 14 40 00 00 00 00 00 00 00 00 00     o.@.o.@.........
  40011c:	00 00 00 00 6f 14 40 00 6f 14 40 00 6f 14 40 00     ....o.@.o.@.o.@.
  40012c:	6f 14 40 00 6f 14 40 00 00 00 00 00 6f 14 40 00     o.@.o.@.....o.@.
  40013c:	6f 14 40 00                                         o.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	0040b71c 	.word	0x0040b71c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040b71c 	.word	0x0040b71c
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	0040b71c 	.word	0x0040b71c
  4001a8:	00000000 	.word	0x00000000

004001ac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001ac:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <spi_enable_clock+0x20>)
  4001b0:	4298      	cmp	r0, r3
  4001b2:	d003      	beq.n	4001bc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4001b4:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <spi_enable_clock+0x24>)
  4001b6:	4298      	cmp	r0, r3
  4001b8:	d004      	beq.n	4001c4 <spi_enable_clock+0x18>
  4001ba:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001bc:	2015      	movs	r0, #21
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <spi_enable_clock+0x28>)
  4001c0:	4798      	blx	r3
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	202a      	movs	r0, #42	; 0x2a
  4001c6:	4b03      	ldr	r3, [pc, #12]	; (4001d4 <spi_enable_clock+0x28>)
  4001c8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4001ca:	e7f6      	b.n	4001ba <spi_enable_clock+0xe>
  4001cc:	40008000 	.word	0x40008000
  4001d0:	40058000 	.word	0x40058000
  4001d4:	004012e5 	.word	0x004012e5

004001d8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4001d8:	6843      	ldr	r3, [r0, #4]
  4001da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4001de:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4001e0:	6843      	ldr	r3, [r0, #4]
  4001e2:	0409      	lsls	r1, r1, #16
  4001e4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4001e8:	4319      	orrs	r1, r3
  4001ea:	6041      	str	r1, [r0, #4]
  4001ec:	4770      	bx	lr

004001ee <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4001ee:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4001f0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4001f4:	6905      	ldr	r5, [r0, #16]
  4001f6:	f015 0f02 	tst.w	r5, #2
  4001fa:	d103      	bne.n	400204 <spi_write+0x16>
		if (!timeout--) {
  4001fc:	3c01      	subs	r4, #1
  4001fe:	d1f9      	bne.n	4001f4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400200:	2001      	movs	r0, #1
  400202:	e00c      	b.n	40021e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400204:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400206:	f014 0f02 	tst.w	r4, #2
  40020a:	d006      	beq.n	40021a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40020c:	0412      	lsls	r2, r2, #16
  40020e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400212:	4311      	orrs	r1, r2
		if (uc_last) {
  400214:	b10b      	cbz	r3, 40021a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400216:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40021a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40021c:	2000      	movs	r0, #0
}
  40021e:	bc30      	pop	{r4, r5}
  400220:	4770      	bx	lr

00400222 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400222:	b932      	cbnz	r2, 400232 <spi_set_clock_polarity+0x10>
  400224:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400228:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40022a:	f023 0301 	bic.w	r3, r3, #1
  40022e:	6303      	str	r3, [r0, #48]	; 0x30
  400230:	4770      	bx	lr
  400232:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400236:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400238:	f043 0301 	orr.w	r3, r3, #1
  40023c:	6303      	str	r3, [r0, #48]	; 0x30
  40023e:	4770      	bx	lr

00400240 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400240:	b932      	cbnz	r2, 400250 <spi_set_clock_phase+0x10>
  400242:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400246:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400248:	f023 0302 	bic.w	r3, r3, #2
  40024c:	6303      	str	r3, [r0, #48]	; 0x30
  40024e:	4770      	bx	lr
  400250:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400254:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400256:	f043 0302 	orr.w	r3, r3, #2
  40025a:	6303      	str	r3, [r0, #48]	; 0x30
  40025c:	4770      	bx	lr

0040025e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40025e:	2a04      	cmp	r2, #4
  400260:	d003      	beq.n	40026a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400262:	b16a      	cbz	r2, 400280 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400264:	2a08      	cmp	r2, #8
  400266:	d016      	beq.n	400296 <spi_configure_cs_behavior+0x38>
  400268:	4770      	bx	lr
  40026a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40026e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400270:	f023 0308 	bic.w	r3, r3, #8
  400274:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400276:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400278:	f043 0304 	orr.w	r3, r3, #4
  40027c:	6303      	str	r3, [r0, #48]	; 0x30
  40027e:	4770      	bx	lr
  400280:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400284:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400286:	f023 0308 	bic.w	r3, r3, #8
  40028a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40028c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40028e:	f023 0304 	bic.w	r3, r3, #4
  400292:	6303      	str	r3, [r0, #48]	; 0x30
  400294:	4770      	bx	lr
  400296:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40029a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40029c:	f043 0308 	orr.w	r3, r3, #8
  4002a0:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4002a2:	e7e1      	b.n	400268 <spi_configure_cs_behavior+0xa>

004002a4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4002a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4002a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4002ae:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4002b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002b2:	431a      	orrs	r2, r3
  4002b4:	630a      	str	r2, [r1, #48]	; 0x30
  4002b6:	4770      	bx	lr

004002b8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4002b8:	1e43      	subs	r3, r0, #1
  4002ba:	4419      	add	r1, r3
  4002bc:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4002c0:	1e43      	subs	r3, r0, #1
  4002c2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4002c4:	bf94      	ite	ls
  4002c6:	b200      	sxthls	r0, r0
		return -1;
  4002c8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4002cc:	4770      	bx	lr

004002ce <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4002ce:	b17a      	cbz	r2, 4002f0 <spi_set_baudrate_div+0x22>
{
  4002d0:	b410      	push	{r4}
  4002d2:	4614      	mov	r4, r2
  4002d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4002d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4002de:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4002e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4002e2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4002e6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4002e8:	2000      	movs	r0, #0
}
  4002ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002ee:	4770      	bx	lr
        return -1;
  4002f0:	f04f 30ff 	mov.w	r0, #4294967295
  4002f4:	4770      	bx	lr
	...

004002f8 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4002f8:	4b28      	ldr	r3, [pc, #160]	; (40039c <twihs_set_speed+0xa4>)
  4002fa:	4299      	cmp	r1, r3
  4002fc:	d84b      	bhi.n	400396 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4002fe:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400302:	4299      	cmp	r1, r3
  400304:	d92d      	bls.n	400362 <twihs_set_speed+0x6a>
{
  400306:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400308:	4c25      	ldr	r4, [pc, #148]	; (4003a0 <twihs_set_speed+0xa8>)
  40030a:	fba4 3402 	umull	r3, r4, r4, r2
  40030e:	0ba4      	lsrs	r4, r4, #14
  400310:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400312:	4b24      	ldr	r3, [pc, #144]	; (4003a4 <twihs_set_speed+0xac>)
  400314:	440b      	add	r3, r1
  400316:	009b      	lsls	r3, r3, #2
  400318:	fbb2 f2f3 	udiv	r2, r2, r3
  40031c:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40031e:	2cff      	cmp	r4, #255	; 0xff
  400320:	d91d      	bls.n	40035e <twihs_set_speed+0x66>
  400322:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  400324:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  400326:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400328:	2cff      	cmp	r4, #255	; 0xff
  40032a:	d901      	bls.n	400330 <twihs_set_speed+0x38>
  40032c:	2906      	cmp	r1, #6
  40032e:	d9f9      	bls.n	400324 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400330:	2aff      	cmp	r2, #255	; 0xff
  400332:	d907      	bls.n	400344 <twihs_set_speed+0x4c>
  400334:	2906      	cmp	r1, #6
  400336:	d805      	bhi.n	400344 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400338:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  40033a:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40033c:	2aff      	cmp	r2, #255	; 0xff
  40033e:	d901      	bls.n	400344 <twihs_set_speed+0x4c>
  400340:	2906      	cmp	r1, #6
  400342:	d9f9      	bls.n	400338 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400344:	0213      	lsls	r3, r2, #8
  400346:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400348:	0409      	lsls	r1, r1, #16
  40034a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40034e:	430b      	orrs	r3, r1
  400350:	b2e4      	uxtb	r4, r4
  400352:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  400354:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400356:	2000      	movs	r0, #0
}
  400358:	f85d 4b04 	ldr.w	r4, [sp], #4
  40035c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40035e:	2100      	movs	r1, #0
  400360:	e7e6      	b.n	400330 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400362:	0049      	lsls	r1, r1, #1
  400364:	fbb2 f2f1 	udiv	r2, r2, r1
  400368:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40036a:	2aff      	cmp	r2, #255	; 0xff
  40036c:	d911      	bls.n	400392 <twihs_set_speed+0x9a>
  40036e:	2300      	movs	r3, #0
			ckdiv++;
  400370:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  400372:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400374:	2aff      	cmp	r2, #255	; 0xff
  400376:	d901      	bls.n	40037c <twihs_set_speed+0x84>
  400378:	2b06      	cmp	r3, #6
  40037a:	d9f9      	bls.n	400370 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40037c:	0211      	lsls	r1, r2, #8
  40037e:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  400380:	041b      	lsls	r3, r3, #16
  400382:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  400386:	430b      	orrs	r3, r1
  400388:	b2d2      	uxtb	r2, r2
  40038a:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  40038c:	6102      	str	r2, [r0, #16]
	return PASS;
  40038e:	2000      	movs	r0, #0
  400390:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400392:	2300      	movs	r3, #0
  400394:	e7f2      	b.n	40037c <twihs_set_speed+0x84>
		return FAIL;
  400396:	2001      	movs	r0, #1
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	00061a80 	.word	0x00061a80
  4003a0:	057619f1 	.word	0x057619f1
  4003a4:	3ffd1200 	.word	0x3ffd1200

004003a8 <twihs_master_init>:
{
  4003a8:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  4003aa:	f04f 32ff 	mov.w	r2, #4294967295
  4003ae:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  4003b0:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4003b2:	2280      	movs	r2, #128	; 0x80
  4003b4:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4003b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4003b8:	2208      	movs	r2, #8
  4003ba:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4003bc:	2220      	movs	r2, #32
  4003be:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4003c0:	2204      	movs	r2, #4
  4003c2:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4003c4:	680a      	ldr	r2, [r1, #0]
  4003c6:	6849      	ldr	r1, [r1, #4]
  4003c8:	4b03      	ldr	r3, [pc, #12]	; (4003d8 <twihs_master_init+0x30>)
  4003ca:	4798      	blx	r3
}
  4003cc:	2801      	cmp	r0, #1
  4003ce:	bf14      	ite	ne
  4003d0:	2000      	movne	r0, #0
  4003d2:	2001      	moveq	r0, #1
  4003d4:	bd08      	pop	{r3, pc}
  4003d6:	bf00      	nop
  4003d8:	004002f9 	.word	0x004002f9

004003dc <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  4003dc:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  4003de:	2a00      	cmp	r2, #0
  4003e0:	d04c      	beq.n	40047c <twihs_master_read+0xa0>
{
  4003e2:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4003e4:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4003e6:	2600      	movs	r6, #0
  4003e8:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4003ea:	684b      	ldr	r3, [r1, #4]
  4003ec:	021b      	lsls	r3, r3, #8
  4003ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4003f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4003f6:	7c0d      	ldrb	r5, [r1, #16]
  4003f8:	042d      	lsls	r5, r5, #16
  4003fa:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4003fe:	432b      	orrs	r3, r5
  400400:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  400402:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400404:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  400406:	b15d      	cbz	r5, 400420 <twihs_master_read+0x44>
	val = addr[0];
  400408:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  40040a:	2d01      	cmp	r5, #1
  40040c:	dd02      	ble.n	400414 <twihs_master_read+0x38>
		val |= addr[1];
  40040e:	784e      	ldrb	r6, [r1, #1]
  400410:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  400414:	2d02      	cmp	r5, #2
  400416:	dd04      	ble.n	400422 <twihs_master_read+0x46>
		val |= addr[2];
  400418:	7889      	ldrb	r1, [r1, #2]
  40041a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  40041e:	e000      	b.n	400422 <twihs_master_read+0x46>
		return 0;
  400420:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400422:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  400424:	2301      	movs	r3, #1
  400426:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400428:	2502      	movs	r5, #2
  40042a:	e012      	b.n	400452 <twihs_master_read+0x76>
  40042c:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  40042e:	f013 0f02 	tst.w	r3, #2
  400432:	d01b      	beq.n	40046c <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  400434:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400436:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400438:	6a03      	ldr	r3, [r0, #32]
  40043a:	f013 0f01 	tst.w	r3, #1
  40043e:	d0fb      	beq.n	400438 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  400440:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  400442:	2000      	movs	r0, #0
}
  400444:	bc70      	pop	{r4, r5, r6}
  400446:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  400448:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40044a:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  40044e:	3a01      	subs	r2, #1
  400450:	d0f2      	beq.n	400438 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  400452:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400454:	f413 7f80 	tst.w	r3, #256	; 0x100
  400458:	d114      	bne.n	400484 <twihs_master_read+0xa8>
  40045a:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  40045e:	2a01      	cmp	r2, #1
  400460:	d0e4      	beq.n	40042c <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  400462:	f013 0f02 	tst.w	r3, #2
  400466:	d1ef      	bne.n	400448 <twihs_master_read+0x6c>
	while (cnt > 0) {
  400468:	2a00      	cmp	r2, #0
  40046a:	d0e5      	beq.n	400438 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  40046c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40046e:	f413 7f80 	tst.w	r3, #256	; 0x100
  400472:	d105      	bne.n	400480 <twihs_master_read+0xa4>
		if (!timeout--) {
  400474:	3901      	subs	r1, #1
  400476:	d1f2      	bne.n	40045e <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  400478:	2009      	movs	r0, #9
  40047a:	e7e3      	b.n	400444 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  40047c:	2001      	movs	r0, #1
  40047e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400480:	2005      	movs	r0, #5
  400482:	e7df      	b.n	400444 <twihs_master_read+0x68>
  400484:	2005      	movs	r0, #5
  400486:	e7dd      	b.n	400444 <twihs_master_read+0x68>

00400488 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  400488:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  40048a:	2b00      	cmp	r3, #0
  40048c:	d043      	beq.n	400516 <twihs_master_write+0x8e>
{
  40048e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  400490:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  400492:	2600      	movs	r6, #0
  400494:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  400496:	7c0a      	ldrb	r2, [r1, #16]
  400498:	0412      	lsls	r2, r2, #16
  40049a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40049e:	684d      	ldr	r5, [r1, #4]
  4004a0:	022d      	lsls	r5, r5, #8
  4004a2:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4004a6:	432a      	orrs	r2, r5
  4004a8:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4004aa:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4004ac:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4004ae:	b15d      	cbz	r5, 4004c8 <twihs_master_write+0x40>
	val = addr[0];
  4004b0:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4004b2:	2d01      	cmp	r5, #1
  4004b4:	dd02      	ble.n	4004bc <twihs_master_write+0x34>
		val |= addr[1];
  4004b6:	784e      	ldrb	r6, [r1, #1]
  4004b8:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  4004bc:	2d02      	cmp	r5, #2
  4004be:	dd04      	ble.n	4004ca <twihs_master_write+0x42>
		val |= addr[2];
  4004c0:	7889      	ldrb	r1, [r1, #2]
  4004c2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  4004c6:	e000      	b.n	4004ca <twihs_master_write+0x42>
		return 0;
  4004c8:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4004ca:	60c2      	str	r2, [r0, #12]
  4004cc:	e004      	b.n	4004d8 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  4004ce:	f814 2b01 	ldrb.w	r2, [r4], #1
  4004d2:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  4004d4:	3b01      	subs	r3, #1
  4004d6:	d00f      	beq.n	4004f8 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  4004d8:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4004da:	f412 7f80 	tst.w	r2, #256	; 0x100
  4004de:	d11e      	bne.n	40051e <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  4004e0:	f012 0f04 	tst.w	r2, #4
  4004e4:	d1f3      	bne.n	4004ce <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  4004e6:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4004e8:	f412 7f80 	tst.w	r2, #256	; 0x100
  4004ec:	d115      	bne.n	40051a <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  4004ee:	f012 0f04 	tst.w	r2, #4
  4004f2:	d1ec      	bne.n	4004ce <twihs_master_write+0x46>
	while (cnt > 0) {
  4004f4:	2b00      	cmp	r3, #0
  4004f6:	d1f6      	bne.n	4004e6 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4004f8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4004fa:	f413 7f80 	tst.w	r3, #256	; 0x100
  4004fe:	d111      	bne.n	400524 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  400500:	f013 0f04 	tst.w	r3, #4
  400504:	d0f8      	beq.n	4004f8 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400506:	2302      	movs	r3, #2
  400508:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40050a:	6a03      	ldr	r3, [r0, #32]
  40050c:	f013 0f01 	tst.w	r3, #1
  400510:	d0fb      	beq.n	40050a <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  400512:	2000      	movs	r0, #0
  400514:	e004      	b.n	400520 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  400516:	2001      	movs	r0, #1
  400518:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40051a:	2005      	movs	r0, #5
  40051c:	e000      	b.n	400520 <twihs_master_write+0x98>
  40051e:	2005      	movs	r0, #5
}
  400520:	bc70      	pop	{r4, r5, r6}
  400522:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400524:	2005      	movs	r0, #5
  400526:	e7fb      	b.n	400520 <twihs_master_write+0x98>

00400528 <twihs_probe>:
{
  400528:	b500      	push	{lr}
  40052a:	b087      	sub	sp, #28
	uint8_t data = 0;
  40052c:	2300      	movs	r3, #0
  40052e:	aa06      	add	r2, sp, #24
  400530:	f802 3d15 	strb.w	r3, [r2, #-21]!
	packet.buffer = &data;
  400534:	9203      	str	r2, [sp, #12]
	packet.length = 1;
  400536:	2201      	movs	r2, #1
  400538:	9204      	str	r2, [sp, #16]
	packet.chip = (uint32_t) uc_slave_addr;
  40053a:	f88d 1014 	strb.w	r1, [sp, #20]
	packet.addr[0] = 0;
  40053e:	f88d 3004 	strb.w	r3, [sp, #4]
	packet.addr_length = 0;
  400542:	9302      	str	r3, [sp, #8]
	return (twihs_master_write(p_twihs, &packet));
  400544:	a901      	add	r1, sp, #4
  400546:	4b02      	ldr	r3, [pc, #8]	; (400550 <twihs_probe+0x28>)
  400548:	4798      	blx	r3
}
  40054a:	b007      	add	sp, #28
  40054c:	f85d fb04 	ldr.w	pc, [sp], #4
  400550:	00400489 	.word	0x00400489

00400554 <FusionAhrsReset>:
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  400554:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  400558:	6143      	str	r3, [r0, #20]
  40055a:	2300      	movs	r3, #0
  40055c:	6183      	str	r3, [r0, #24]
  40055e:	61c3      	str	r3, [r0, #28]
  400560:	6203      	str	r3, [r0, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
  400562:	6243      	str	r3, [r0, #36]	; 0x24
  400564:	6283      	str	r3, [r0, #40]	; 0x28
  400566:	62c3      	str	r3, [r0, #44]	; 0x2c
    ahrs->initialising = true;
  400568:	2201      	movs	r2, #1
  40056a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
  40056e:	4a0a      	ldr	r2, [pc, #40]	; (400598 <FusionAhrsReset+0x44>)
  400570:	6342      	str	r2, [r0, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  400572:	63c3      	str	r3, [r0, #60]	; 0x3c
  400574:	6403      	str	r3, [r0, #64]	; 0x40
  400576:	6443      	str	r3, [r0, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  400578:	6483      	str	r3, [r0, #72]	; 0x48
  40057a:	64c3      	str	r3, [r0, #76]	; 0x4c
  40057c:	6503      	str	r3, [r0, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
  40057e:	2300      	movs	r3, #0
  400580:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
  400584:	6583      	str	r3, [r0, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
  400586:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
  40058a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
  40058e:	6603      	str	r3, [r0, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
  400590:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  400594:	4770      	bx	lr
  400596:	bf00      	nop
  400598:	41200000 	.word	0x41200000

0040059c <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
  40059c:	b538      	push	{r3, r4, r5, lr}
  40059e:	ed2d 8b02 	vpush	{d8}
  4005a2:	4604      	mov	r4, r0
  4005a4:	460d      	mov	r5, r1
    ahrs->settings.convention = settings->convention;
  4005a6:	780b      	ldrb	r3, [r1, #0]
  4005a8:	7003      	strb	r3, [r0, #0]
    ahrs->settings.gain = settings->gain;
  4005aa:	ed91 8a01 	vldr	s16, [r1, #4]
  4005ae:	ed80 8a01 	vstr	s16, [r0, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  4005b2:	edd1 7a02 	vldr	s15, [r1, #8]
  4005b6:	eef5 7a40 	vcmp.f32	s15, #0.0
  4005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4005be:	d001      	beq.n	4005c4 <FusionAhrsSetSettings+0x28>
  4005c0:	690b      	ldr	r3, [r1, #16]
  4005c2:	bb03      	cbnz	r3, 400606 <FusionAhrsSetSettings+0x6a>
        ahrs->settings.accelerationRejection = FLT_MAX;
  4005c4:	4b23      	ldr	r3, [pc, #140]	; (400654 <FusionAhrsSetSettings+0xb8>)
  4005c6:	60a3      	str	r3, [r4, #8]
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  4005c8:	edd5 7a03 	vldr	s15, [r5, #12]
  4005cc:	eef5 7a40 	vcmp.f32	s15, #0.0
  4005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4005d4:	d001      	beq.n	4005da <FusionAhrsSetSettings+0x3e>
  4005d6:	692b      	ldr	r3, [r5, #16]
  4005d8:	bb43      	cbnz	r3, 40062c <FusionAhrsSetSettings+0x90>
        ahrs->settings.magneticRejection = FLT_MAX;
  4005da:	4b1e      	ldr	r3, [pc, #120]	; (400654 <FusionAhrsSetSettings+0xb8>)
  4005dc:	60e3      	str	r3, [r4, #12]
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
  4005de:	692b      	ldr	r3, [r5, #16]
  4005e0:	6123      	str	r3, [r4, #16]
    if (ahrs->initialising == false) {
  4005e2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  4005e6:	b90b      	cbnz	r3, 4005ec <FusionAhrsSetSettings+0x50>
        ahrs->rampedGain = ahrs->settings.gain;
  4005e8:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
  4005ec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  4005f0:	ee77 7ac8 	vsub.f32	s15, s15, s16
  4005f4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  4005f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  4005fc:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
}
  400600:	ecbd 8b02 	vpop	{d8}
  400604:	bd38      	pop	{r3, r4, r5, pc}
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
  400606:	ed9f 7a14 	vldr	s14, [pc, #80]	; 400658 <FusionAhrsSetSettings+0xbc>
  40060a:	ee67 7a87 	vmul.f32	s15, s15, s14
  40060e:	ee17 0a90 	vmov	r0, s15
  400612:	4b12      	ldr	r3, [pc, #72]	; (40065c <FusionAhrsSetSettings+0xc0>)
  400614:	4798      	blx	r3
  400616:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  40061a:	ee07 0a10 	vmov	s14, r0
  40061e:	ee67 7a27 	vmul.f32	s15, s14, s15
  400622:	ee67 7aa7 	vmul.f32	s15, s15, s15
  400626:	edc4 7a02 	vstr	s15, [r4, #8]
  40062a:	e7cd      	b.n	4005c8 <FusionAhrsSetSettings+0x2c>
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
  40062c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 400658 <FusionAhrsSetSettings+0xbc>
  400630:	ee67 7a87 	vmul.f32	s15, s15, s14
  400634:	ee17 0a90 	vmov	r0, s15
  400638:	4b08      	ldr	r3, [pc, #32]	; (40065c <FusionAhrsSetSettings+0xc0>)
  40063a:	4798      	blx	r3
  40063c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  400640:	ee07 0a10 	vmov	s14, r0
  400644:	ee67 7a27 	vmul.f32	s15, s14, s15
  400648:	ee67 7aa7 	vmul.f32	s15, s15, s15
  40064c:	edc4 7a03 	vstr	s15, [r4, #12]
  400650:	e7c5      	b.n	4005de <FusionAhrsSetSettings+0x42>
  400652:	bf00      	nop
  400654:	7f7fffff 	.word	0x7f7fffff
  400658:	3c8efa35 	.word	0x3c8efa35
  40065c:	00403d01 	.word	0x00403d01

00400660 <FusionAhrsInitialise>:
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  400660:	b570      	push	{r4, r5, r6, lr}
  400662:	b086      	sub	sp, #24
  400664:	4606      	mov	r6, r0
    const FusionAhrsSettings settings = {
  400666:	ac01      	add	r4, sp, #4
  400668:	4d06      	ldr	r5, [pc, #24]	; (400684 <FusionAhrsInitialise+0x24>)
  40066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40066e:	682b      	ldr	r3, [r5, #0]
  400670:	6023      	str	r3, [r4, #0]
    FusionAhrsSetSettings(ahrs, &settings);
  400672:	a901      	add	r1, sp, #4
  400674:	4630      	mov	r0, r6
  400676:	4b04      	ldr	r3, [pc, #16]	; (400688 <FusionAhrsInitialise+0x28>)
  400678:	4798      	blx	r3
    FusionAhrsReset(ahrs);
  40067a:	4630      	mov	r0, r6
  40067c:	4b03      	ldr	r3, [pc, #12]	; (40068c <FusionAhrsInitialise+0x2c>)
  40067e:	4798      	blx	r3
}
  400680:	b006      	add	sp, #24
  400682:	bd70      	pop	{r4, r5, r6, pc}
  400684:	0040ac30 	.word	0x0040ac30
  400688:	0040059d 	.word	0x0040059d
  40068c:	00400555 	.word	0x00400555

00400690 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400690:	4b01      	ldr	r3, [pc, #4]	; (400698 <gfx_mono_set_framebuffer+0x8>)
  400692:	6018      	str	r0, [r3, #0]
  400694:	4770      	bx	lr
  400696:	bf00      	nop
  400698:	204009f4 	.word	0x204009f4

0040069c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40069c:	4b02      	ldr	r3, [pc, #8]	; (4006a8 <gfx_mono_framebuffer_put_byte+0xc>)
  40069e:	681b      	ldr	r3, [r3, #0]
  4006a0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4006a4:	5442      	strb	r2, [r0, r1]
  4006a6:	4770      	bx	lr
  4006a8:	204009f4 	.word	0x204009f4

004006ac <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4006ac:	4b02      	ldr	r3, [pc, #8]	; (4006b8 <gfx_mono_framebuffer_get_byte+0xc>)
  4006ae:	681b      	ldr	r3, [r3, #0]
  4006b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4006b4:	5c40      	ldrb	r0, [r0, r1]
  4006b6:	4770      	bx	lr
  4006b8:	204009f4 	.word	0x204009f4

004006bc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4006bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4006c0:	1884      	adds	r4, r0, r2
  4006c2:	2c80      	cmp	r4, #128	; 0x80
  4006c4:	dd02      	ble.n	4006cc <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4006c6:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4006ca:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4006cc:	b322      	cbz	r2, 400718 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4006ce:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4006d0:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4006d4:	2601      	movs	r6, #1
  4006d6:	fa06 f101 	lsl.w	r1, r6, r1
  4006da:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4006dc:	2b01      	cmp	r3, #1
  4006de:	d01d      	beq.n	40071c <gfx_mono_generic_draw_horizontal_line+0x60>
  4006e0:	2b00      	cmp	r3, #0
  4006e2:	d035      	beq.n	400750 <gfx_mono_generic_draw_horizontal_line+0x94>
  4006e4:	2b02      	cmp	r3, #2
  4006e6:	d117      	bne.n	400718 <gfx_mono_generic_draw_horizontal_line+0x5c>
  4006e8:	3801      	subs	r0, #1
  4006ea:	b2c7      	uxtb	r7, r0
  4006ec:	19d4      	adds	r4, r2, r7
  4006ee:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4006f0:	f8df a090 	ldr.w	sl, [pc, #144]	; 400784 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4006f4:	f04f 0900 	mov.w	r9, #0
  4006f8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400788 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4006fc:	4621      	mov	r1, r4
  4006fe:	4628      	mov	r0, r5
  400700:	47d0      	blx	sl
			temp ^= pixelmask;
  400702:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400706:	464b      	mov	r3, r9
  400708:	b2d2      	uxtb	r2, r2
  40070a:	4621      	mov	r1, r4
  40070c:	4628      	mov	r0, r5
  40070e:	47c0      	blx	r8
  400710:	3c01      	subs	r4, #1
  400712:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400714:	42bc      	cmp	r4, r7
  400716:	d1f1      	bne.n	4006fc <gfx_mono_generic_draw_horizontal_line+0x40>
  400718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40071c:	3801      	subs	r0, #1
  40071e:	b2c7      	uxtb	r7, r0
  400720:	19d4      	adds	r4, r2, r7
  400722:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400724:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400784 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400728:	f04f 0900 	mov.w	r9, #0
  40072c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400788 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400730:	4621      	mov	r1, r4
  400732:	4628      	mov	r0, r5
  400734:	47d0      	blx	sl
			temp |= pixelmask;
  400736:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40073a:	464b      	mov	r3, r9
  40073c:	b2d2      	uxtb	r2, r2
  40073e:	4621      	mov	r1, r4
  400740:	4628      	mov	r0, r5
  400742:	47c0      	blx	r8
  400744:	3c01      	subs	r4, #1
  400746:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400748:	42bc      	cmp	r4, r7
  40074a:	d1f1      	bne.n	400730 <gfx_mono_generic_draw_horizontal_line+0x74>
  40074c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400750:	3801      	subs	r0, #1
  400752:	b2c7      	uxtb	r7, r0
  400754:	19d4      	adds	r4, r2, r7
  400756:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400758:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400784 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  40075c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40075e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400788 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400762:	4621      	mov	r1, r4
  400764:	4628      	mov	r0, r5
  400766:	47c0      	blx	r8
			temp &= ~pixelmask;
  400768:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40076c:	2300      	movs	r3, #0
  40076e:	b2d2      	uxtb	r2, r2
  400770:	4621      	mov	r1, r4
  400772:	4628      	mov	r0, r5
  400774:	47c8      	blx	r9
  400776:	3c01      	subs	r4, #1
  400778:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40077a:	42bc      	cmp	r4, r7
  40077c:	d1f1      	bne.n	400762 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400782:	bf00      	nop
  400784:	004009bd 	.word	0x004009bd
  400788:	004008b9 	.word	0x004008b9

0040078c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40078c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400790:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400794:	b18b      	cbz	r3, 4007ba <gfx_mono_generic_draw_filled_rect+0x2e>
  400796:	461c      	mov	r4, r3
  400798:	4690      	mov	r8, r2
  40079a:	4606      	mov	r6, r0
  40079c:	1e4d      	subs	r5, r1, #1
  40079e:	b2ed      	uxtb	r5, r5
  4007a0:	442c      	add	r4, r5
  4007a2:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4007a4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4007c0 <gfx_mono_generic_draw_filled_rect+0x34>
  4007a8:	463b      	mov	r3, r7
  4007aa:	4642      	mov	r2, r8
  4007ac:	4621      	mov	r1, r4
  4007ae:	4630      	mov	r0, r6
  4007b0:	47c8      	blx	r9
  4007b2:	3c01      	subs	r4, #1
  4007b4:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4007b6:	42ac      	cmp	r4, r5
  4007b8:	d1f6      	bne.n	4007a8 <gfx_mono_generic_draw_filled_rect+0x1c>
  4007ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007be:	bf00      	nop
  4007c0:	004006bd 	.word	0x004006bd

004007c4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4007c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4007c8:	b083      	sub	sp, #12
  4007ca:	4604      	mov	r4, r0
  4007cc:	4688      	mov	r8, r1
  4007ce:	4691      	mov	r9, r2
  4007d0:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4007d2:	7a5b      	ldrb	r3, [r3, #9]
  4007d4:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4007d8:	2100      	movs	r1, #0
  4007da:	9100      	str	r1, [sp, #0]
  4007dc:	4649      	mov	r1, r9
  4007de:	4640      	mov	r0, r8
  4007e0:	4d21      	ldr	r5, [pc, #132]	; (400868 <gfx_mono_draw_char+0xa4>)
  4007e2:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4007e4:	f89b 3000 	ldrb.w	r3, [fp]
  4007e8:	b113      	cbz	r3, 4007f0 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  4007ea:	b003      	add	sp, #12
  4007ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4007f0:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4007f4:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4007f6:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  4007fa:	bf18      	it	ne
  4007fc:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  4007fe:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400802:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400806:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400808:	fb17 f70a 	smulbb	r7, r7, sl
  40080c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400810:	f8db 3004 	ldr.w	r3, [fp, #4]
  400814:	fa13 f787 	uxtah	r7, r3, r7
  400818:	e01f      	b.n	40085a <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40081a:	0064      	lsls	r4, r4, #1
  40081c:	b2e4      	uxtb	r4, r4
  40081e:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400820:	b2eb      	uxtb	r3, r5
  400822:	429e      	cmp	r6, r3
  400824:	d910      	bls.n	400848 <gfx_mono_draw_char+0x84>
  400826:	b2eb      	uxtb	r3, r5
  400828:	eb08 0003 	add.w	r0, r8, r3
  40082c:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  40082e:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400832:	bf08      	it	eq
  400834:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400838:	f014 0f80 	tst.w	r4, #128	; 0x80
  40083c:	d0ed      	beq.n	40081a <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  40083e:	2201      	movs	r2, #1
  400840:	4649      	mov	r1, r9
  400842:	4b0a      	ldr	r3, [pc, #40]	; (40086c <gfx_mono_draw_char+0xa8>)
  400844:	4798      	blx	r3
  400846:	e7e8      	b.n	40081a <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400848:	f109 0901 	add.w	r9, r9, #1
  40084c:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400850:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400854:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400858:	d0c7      	beq.n	4007ea <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  40085a:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  40085e:	2e00      	cmp	r6, #0
  400860:	d0f2      	beq.n	400848 <gfx_mono_draw_char+0x84>
  400862:	2500      	movs	r5, #0
  400864:	462c      	mov	r4, r5
  400866:	e7de      	b.n	400826 <gfx_mono_draw_char+0x62>
  400868:	0040078d 	.word	0x0040078d
  40086c:	00400959 	.word	0x00400959

00400870 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400874:	4604      	mov	r4, r0
  400876:	4690      	mov	r8, r2
  400878:	461d      	mov	r5, r3
  40087a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  40087c:	4f0d      	ldr	r7, [pc, #52]	; (4008b4 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40087e:	460e      	mov	r6, r1
  400880:	e008      	b.n	400894 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400882:	7a6a      	ldrb	r2, [r5, #9]
  400884:	3201      	adds	r2, #1
  400886:	4442      	add	r2, r8
  400888:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  40088c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  40088e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400892:	b16b      	cbz	r3, 4008b0 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400894:	7820      	ldrb	r0, [r4, #0]
  400896:	280a      	cmp	r0, #10
  400898:	d0f3      	beq.n	400882 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  40089a:	280d      	cmp	r0, #13
  40089c:	d0f7      	beq.n	40088e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  40089e:	462b      	mov	r3, r5
  4008a0:	4642      	mov	r2, r8
  4008a2:	4649      	mov	r1, r9
  4008a4:	47b8      	blx	r7
			x += font->width;
  4008a6:	7a2b      	ldrb	r3, [r5, #8]
  4008a8:	4499      	add	r9, r3
  4008aa:	fa5f f989 	uxtb.w	r9, r9
  4008ae:	e7ee      	b.n	40088e <gfx_mono_draw_string+0x1e>
}
  4008b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008b4:	004007c5 	.word	0x004007c5

004008b8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4008b8:	b570      	push	{r4, r5, r6, lr}
  4008ba:	4604      	mov	r4, r0
  4008bc:	460d      	mov	r5, r1
  4008be:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4008c0:	b91b      	cbnz	r3, 4008ca <gfx_mono_ssd1306_put_byte+0x12>
  4008c2:	4b0d      	ldr	r3, [pc, #52]	; (4008f8 <gfx_mono_ssd1306_put_byte+0x40>)
  4008c4:	4798      	blx	r3
  4008c6:	42b0      	cmp	r0, r6
  4008c8:	d015      	beq.n	4008f6 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4008ca:	4632      	mov	r2, r6
  4008cc:	4629      	mov	r1, r5
  4008ce:	4620      	mov	r0, r4
  4008d0:	4b0a      	ldr	r3, [pc, #40]	; (4008fc <gfx_mono_ssd1306_put_byte+0x44>)
  4008d2:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4008d4:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4008d8:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4008dc:	4c08      	ldr	r4, [pc, #32]	; (400900 <gfx_mono_ssd1306_put_byte+0x48>)
  4008de:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4008e0:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4008e4:	f040 0010 	orr.w	r0, r0, #16
  4008e8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4008ea:	f005 000f 	and.w	r0, r5, #15
  4008ee:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4008f0:	4630      	mov	r0, r6
  4008f2:	4b04      	ldr	r3, [pc, #16]	; (400904 <gfx_mono_ssd1306_put_byte+0x4c>)
  4008f4:	4798      	blx	r3
  4008f6:	bd70      	pop	{r4, r5, r6, pc}
  4008f8:	004006ad 	.word	0x004006ad
  4008fc:	0040069d 	.word	0x0040069d
  400900:	004009c9 	.word	0x004009c9
  400904:	00400be9 	.word	0x00400be9

00400908 <gfx_mono_ssd1306_init>:
{
  400908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  40090c:	480d      	ldr	r0, [pc, #52]	; (400944 <gfx_mono_ssd1306_init+0x3c>)
  40090e:	4b0e      	ldr	r3, [pc, #56]	; (400948 <gfx_mono_ssd1306_init+0x40>)
  400910:	4798      	blx	r3
	ssd1306_init();
  400912:	4b0e      	ldr	r3, [pc, #56]	; (40094c <gfx_mono_ssd1306_init+0x44>)
  400914:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400916:	2040      	movs	r0, #64	; 0x40
  400918:	4b0d      	ldr	r3, [pc, #52]	; (400950 <gfx_mono_ssd1306_init+0x48>)
  40091a:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40091c:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40091e:	f04f 0801 	mov.w	r8, #1
  400922:	462f      	mov	r7, r5
  400924:	4e0b      	ldr	r6, [pc, #44]	; (400954 <gfx_mono_ssd1306_init+0x4c>)
{
  400926:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400928:	4643      	mov	r3, r8
  40092a:	463a      	mov	r2, r7
  40092c:	b2e1      	uxtb	r1, r4
  40092e:	4628      	mov	r0, r5
  400930:	47b0      	blx	r6
  400932:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400934:	2c80      	cmp	r4, #128	; 0x80
  400936:	d1f7      	bne.n	400928 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400938:	3501      	adds	r5, #1
  40093a:	b2ed      	uxtb	r5, r5
  40093c:	2d04      	cmp	r5, #4
  40093e:	d1f2      	bne.n	400926 <gfx_mono_ssd1306_init+0x1e>
  400940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400944:	204009f8 	.word	0x204009f8
  400948:	00400691 	.word	0x00400691
  40094c:	00400a09 	.word	0x00400a09
  400950:	004009c9 	.word	0x004009c9
  400954:	004008b9 	.word	0x004008b9

00400958 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400958:	09c3      	lsrs	r3, r0, #7
  40095a:	d12a      	bne.n	4009b2 <gfx_mono_ssd1306_draw_pixel+0x5a>
  40095c:	291f      	cmp	r1, #31
  40095e:	d828      	bhi.n	4009b2 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400964:	4614      	mov	r4, r2
  400966:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400968:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  40096a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  40096e:	2201      	movs	r2, #1
  400970:	fa02 f701 	lsl.w	r7, r2, r1
  400974:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400978:	4601      	mov	r1, r0
  40097a:	4630      	mov	r0, r6
  40097c:	4b0d      	ldr	r3, [pc, #52]	; (4009b4 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  40097e:	4798      	blx	r3
  400980:	4602      	mov	r2, r0
	switch (color) {
  400982:	2c01      	cmp	r4, #1
  400984:	d009      	beq.n	40099a <gfx_mono_ssd1306_draw_pixel+0x42>
  400986:	b164      	cbz	r4, 4009a2 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400988:	2c02      	cmp	r4, #2
  40098a:	d00e      	beq.n	4009aa <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  40098c:	2300      	movs	r3, #0
  40098e:	4629      	mov	r1, r5
  400990:	4630      	mov	r0, r6
  400992:	4c09      	ldr	r4, [pc, #36]	; (4009b8 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400994:	47a0      	blx	r4
  400996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  40099a:	ea48 0200 	orr.w	r2, r8, r0
  40099e:	b2d2      	uxtb	r2, r2
		break;
  4009a0:	e7f4      	b.n	40098c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4009a2:	ea20 0207 	bic.w	r2, r0, r7
  4009a6:	b2d2      	uxtb	r2, r2
		break;
  4009a8:	e7f0      	b.n	40098c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4009aa:	ea88 0200 	eor.w	r2, r8, r0
  4009ae:	b2d2      	uxtb	r2, r2
		break;
  4009b0:	e7ec      	b.n	40098c <gfx_mono_ssd1306_draw_pixel+0x34>
  4009b2:	4770      	bx	lr
  4009b4:	004006ad 	.word	0x004006ad
  4009b8:	004008b9 	.word	0x004008b9

004009bc <gfx_mono_ssd1306_get_byte>:
{
  4009bc:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  4009be:	4b01      	ldr	r3, [pc, #4]	; (4009c4 <gfx_mono_ssd1306_get_byte+0x8>)
  4009c0:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  4009c2:	bd08      	pop	{r3, pc}
  4009c4:	004006ad 	.word	0x004006ad

004009c8 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4009c8:	b538      	push	{r3, r4, r5, lr}
  4009ca:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4009cc:	2208      	movs	r2, #8
  4009ce:	4b09      	ldr	r3, [pc, #36]	; (4009f4 <ssd1306_write_command+0x2c>)
  4009d0:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4009d2:	4c09      	ldr	r4, [pc, #36]	; (4009f8 <ssd1306_write_command+0x30>)
  4009d4:	2101      	movs	r1, #1
  4009d6:	4620      	mov	r0, r4
  4009d8:	4b08      	ldr	r3, [pc, #32]	; (4009fc <ssd1306_write_command+0x34>)
  4009da:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4009dc:	2301      	movs	r3, #1
  4009de:	461a      	mov	r2, r3
  4009e0:	4629      	mov	r1, r5
  4009e2:	4620      	mov	r0, r4
  4009e4:	4c06      	ldr	r4, [pc, #24]	; (400a00 <ssd1306_write_command+0x38>)
  4009e6:	47a0      	blx	r4
	delay_us(10);
  4009e8:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4009ec:	4b05      	ldr	r3, [pc, #20]	; (400a04 <ssd1306_write_command+0x3c>)
  4009ee:	4798      	blx	r3
  4009f0:	bd38      	pop	{r3, r4, r5, pc}
  4009f2:	bf00      	nop
  4009f4:	400e1000 	.word	0x400e1000
  4009f8:	40008000 	.word	0x40008000
  4009fc:	004001d9 	.word	0x004001d9
  400a00:	004001ef 	.word	0x004001ef
  400a04:	20400001 	.word	0x20400001

00400a08 <ssd1306_init>:
{
  400a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a0c:	4d66      	ldr	r5, [pc, #408]	; (400ba8 <ssd1306_init+0x1a0>)
  400a0e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400a12:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a14:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a18:	4b64      	ldr	r3, [pc, #400]	; (400bac <ssd1306_init+0x1a4>)
  400a1a:	2708      	movs	r7, #8
  400a1c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a1e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400a22:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400a24:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a28:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a2a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a2c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a30:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400a32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400a36:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a38:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400a3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400a3e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400a40:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400a42:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a46:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a48:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a4a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a50:	f022 0208 	bic.w	r2, r2, #8
  400a54:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a58:	f022 0208 	bic.w	r2, r2, #8
  400a5c:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400a5e:	601f      	str	r7, [r3, #0]
  400a60:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a62:	631f      	str	r7, [r3, #48]	; 0x30
  400a64:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a66:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400be4 <ssd1306_init+0x1dc>
  400a6a:	2300      	movs	r3, #0
  400a6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a70:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a74:	4640      	mov	r0, r8
  400a76:	4c4e      	ldr	r4, [pc, #312]	; (400bb0 <ssd1306_init+0x1a8>)
  400a78:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400a7a:	2300      	movs	r3, #0
  400a7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400a80:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a84:	4640      	mov	r0, r8
  400a86:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400a88:	2300      	movs	r3, #0
  400a8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400a8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a92:	4640      	mov	r0, r8
  400a94:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400a96:	2300      	movs	r3, #0
  400a98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400aa0:	4640      	mov	r0, r8
  400aa2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400aa4:	2300      	movs	r3, #0
  400aa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400aaa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400aae:	4640      	mov	r0, r8
  400ab0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400ab2:	2300      	movs	r3, #0
  400ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400ab8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400abc:	4640      	mov	r0, r8
  400abe:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400ac0:	4c3c      	ldr	r4, [pc, #240]	; (400bb4 <ssd1306_init+0x1ac>)
  400ac2:	f04f 0902 	mov.w	r9, #2
  400ac6:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400aca:	f04f 0880 	mov.w	r8, #128	; 0x80
  400ace:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400ad2:	6863      	ldr	r3, [r4, #4]
  400ad4:	f043 0301 	orr.w	r3, r3, #1
  400ad8:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400ada:	463a      	mov	r2, r7
  400adc:	2101      	movs	r1, #1
  400ade:	4620      	mov	r0, r4
  400ae0:	4b35      	ldr	r3, [pc, #212]	; (400bb8 <ssd1306_init+0x1b0>)
  400ae2:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400ae4:	2200      	movs	r2, #0
  400ae6:	2101      	movs	r1, #1
  400ae8:	4620      	mov	r0, r4
  400aea:	4b34      	ldr	r3, [pc, #208]	; (400bbc <ssd1306_init+0x1b4>)
  400aec:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400aee:	2200      	movs	r2, #0
  400af0:	2101      	movs	r1, #1
  400af2:	4620      	mov	r0, r4
  400af4:	4b32      	ldr	r3, [pc, #200]	; (400bc0 <ssd1306_init+0x1b8>)
  400af6:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400af8:	6863      	ldr	r3, [r4, #4]
  400afa:	f023 0302 	bic.w	r3, r3, #2
  400afe:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400b00:	2200      	movs	r2, #0
  400b02:	2101      	movs	r1, #1
  400b04:	4620      	mov	r0, r4
  400b06:	4b2f      	ldr	r3, [pc, #188]	; (400bc4 <ssd1306_init+0x1bc>)
  400b08:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400b0a:	6863      	ldr	r3, [r4, #4]
  400b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400b10:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400b12:	6863      	ldr	r3, [r4, #4]
  400b14:	f043 0310 	orr.w	r3, r3, #16
  400b18:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400b1a:	492b      	ldr	r1, [pc, #172]	; (400bc8 <ssd1306_init+0x1c0>)
  400b1c:	482b      	ldr	r0, [pc, #172]	; (400bcc <ssd1306_init+0x1c4>)
  400b1e:	4b2c      	ldr	r3, [pc, #176]	; (400bd0 <ssd1306_init+0x1c8>)
  400b20:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400b22:	b2c2      	uxtb	r2, r0
  400b24:	2101      	movs	r1, #1
  400b26:	4620      	mov	r0, r4
  400b28:	4b2a      	ldr	r3, [pc, #168]	; (400bd4 <ssd1306_init+0x1cc>)
  400b2a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400b2c:	4620      	mov	r0, r4
  400b2e:	4b2a      	ldr	r3, [pc, #168]	; (400bd8 <ssd1306_init+0x1d0>)
  400b30:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400b32:	2301      	movs	r3, #1
  400b34:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400b36:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400b38:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400b3c:	4c27      	ldr	r4, [pc, #156]	; (400bdc <ssd1306_init+0x1d4>)
  400b3e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b40:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400b42:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400b46:	47a0      	blx	r4
  400b48:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400b4a:	20a8      	movs	r0, #168	; 0xa8
  400b4c:	4c24      	ldr	r4, [pc, #144]	; (400be0 <ssd1306_init+0x1d8>)
  400b4e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400b50:	201f      	movs	r0, #31
  400b52:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400b54:	20d3      	movs	r0, #211	; 0xd3
  400b56:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400b58:	2000      	movs	r0, #0
  400b5a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400b5c:	2040      	movs	r0, #64	; 0x40
  400b5e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400b60:	20a1      	movs	r0, #161	; 0xa1
  400b62:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400b64:	20c8      	movs	r0, #200	; 0xc8
  400b66:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400b68:	20da      	movs	r0, #218	; 0xda
  400b6a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400b6c:	4648      	mov	r0, r9
  400b6e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400b70:	2081      	movs	r0, #129	; 0x81
  400b72:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400b74:	208f      	movs	r0, #143	; 0x8f
  400b76:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400b78:	20a4      	movs	r0, #164	; 0xa4
  400b7a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400b7c:	20a6      	movs	r0, #166	; 0xa6
  400b7e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400b80:	20d5      	movs	r0, #213	; 0xd5
  400b82:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400b84:	4640      	mov	r0, r8
  400b86:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400b88:	208d      	movs	r0, #141	; 0x8d
  400b8a:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400b8c:	2014      	movs	r0, #20
  400b8e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400b90:	20db      	movs	r0, #219	; 0xdb
  400b92:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400b94:	2040      	movs	r0, #64	; 0x40
  400b96:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400b98:	20d9      	movs	r0, #217	; 0xd9
  400b9a:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400b9c:	20f1      	movs	r0, #241	; 0xf1
  400b9e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400ba0:	20af      	movs	r0, #175	; 0xaf
  400ba2:	47a0      	blx	r4
  400ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ba8:	400e1200 	.word	0x400e1200
  400bac:	400e1000 	.word	0x400e1000
  400bb0:	00400fd1 	.word	0x00400fd1
  400bb4:	40008000 	.word	0x40008000
  400bb8:	0040025f 	.word	0x0040025f
  400bbc:	00400223 	.word	0x00400223
  400bc0:	00400241 	.word	0x00400241
  400bc4:	004002a5 	.word	0x004002a5
  400bc8:	08f0d180 	.word	0x08f0d180
  400bcc:	001e8480 	.word	0x001e8480
  400bd0:	004002b9 	.word	0x004002b9
  400bd4:	004002cf 	.word	0x004002cf
  400bd8:	004001ad 	.word	0x004001ad
  400bdc:	20400001 	.word	0x20400001
  400be0:	004009c9 	.word	0x004009c9
  400be4:	400e1400 	.word	0x400e1400

00400be8 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400be8:	b538      	push	{r3, r4, r5, lr}
  400bea:	4605      	mov	r5, r0
  400bec:	2208      	movs	r2, #8
  400bee:	4b09      	ldr	r3, [pc, #36]	; (400c14 <ssd1306_write_data+0x2c>)
  400bf0:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400bf2:	4c09      	ldr	r4, [pc, #36]	; (400c18 <ssd1306_write_data+0x30>)
  400bf4:	2101      	movs	r1, #1
  400bf6:	4620      	mov	r0, r4
  400bf8:	4b08      	ldr	r3, [pc, #32]	; (400c1c <ssd1306_write_data+0x34>)
  400bfa:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400bfc:	2301      	movs	r3, #1
  400bfe:	461a      	mov	r2, r3
  400c00:	4629      	mov	r1, r5
  400c02:	4620      	mov	r0, r4
  400c04:	4c06      	ldr	r4, [pc, #24]	; (400c20 <ssd1306_write_data+0x38>)
  400c06:	47a0      	blx	r4
	delay_us(10);
  400c08:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400c0c:	4b05      	ldr	r3, [pc, #20]	; (400c24 <ssd1306_write_data+0x3c>)
  400c0e:	4798      	blx	r3
  400c10:	bd38      	pop	{r3, r4, r5, pc}
  400c12:	bf00      	nop
  400c14:	400e1000 	.word	0x400e1000
  400c18:	40008000 	.word	0x40008000
  400c1c:	004001d9 	.word	0x004001d9
  400c20:	004001ef 	.word	0x004001ef
  400c24:	20400001 	.word	0x20400001

00400c28 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400c28:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400c2a:	4810      	ldr	r0, [pc, #64]	; (400c6c <sysclk_init+0x44>)
  400c2c:	4b10      	ldr	r3, [pc, #64]	; (400c70 <sysclk_init+0x48>)
  400c2e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400c30:	213e      	movs	r1, #62	; 0x3e
  400c32:	2000      	movs	r0, #0
  400c34:	4b0f      	ldr	r3, [pc, #60]	; (400c74 <sysclk_init+0x4c>)
  400c36:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c38:	4c0f      	ldr	r4, [pc, #60]	; (400c78 <sysclk_init+0x50>)
  400c3a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400c3c:	2800      	cmp	r0, #0
  400c3e:	d0fc      	beq.n	400c3a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400c40:	4b0e      	ldr	r3, [pc, #56]	; (400c7c <sysclk_init+0x54>)
  400c42:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400c44:	4a0e      	ldr	r2, [pc, #56]	; (400c80 <sysclk_init+0x58>)
  400c46:	4b0f      	ldr	r3, [pc, #60]	; (400c84 <sysclk_init+0x5c>)
  400c48:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400c4a:	4c0f      	ldr	r4, [pc, #60]	; (400c88 <sysclk_init+0x60>)
  400c4c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400c4e:	2800      	cmp	r0, #0
  400c50:	d0fc      	beq.n	400c4c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400c52:	2002      	movs	r0, #2
  400c54:	4b0d      	ldr	r3, [pc, #52]	; (400c8c <sysclk_init+0x64>)
  400c56:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c58:	2000      	movs	r0, #0
  400c5a:	4b0d      	ldr	r3, [pc, #52]	; (400c90 <sysclk_init+0x68>)
  400c5c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400c5e:	4b0d      	ldr	r3, [pc, #52]	; (400c94 <sysclk_init+0x6c>)
  400c60:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400c62:	4802      	ldr	r0, [pc, #8]	; (400c6c <sysclk_init+0x44>)
  400c64:	4b02      	ldr	r3, [pc, #8]	; (400c70 <sysclk_init+0x48>)
  400c66:	4798      	blx	r3
  400c68:	bd10      	pop	{r4, pc}
  400c6a:	bf00      	nop
  400c6c:	11e1a300 	.word	0x11e1a300
  400c70:	00401645 	.word	0x00401645
  400c74:	00401261 	.word	0x00401261
  400c78:	004012b5 	.word	0x004012b5
  400c7c:	004012c5 	.word	0x004012c5
  400c80:	20183f01 	.word	0x20183f01
  400c84:	400e0600 	.word	0x400e0600
  400c88:	004012d5 	.word	0x004012d5
  400c8c:	004011c5 	.word	0x004011c5
  400c90:	004011fd 	.word	0x004011fd
  400c94:	00401539 	.word	0x00401539

00400c98 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400c9c:	b980      	cbnz	r0, 400cc0 <_read+0x28>
  400c9e:	460c      	mov	r4, r1
  400ca0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400ca2:	2a00      	cmp	r2, #0
  400ca4:	dd0f      	ble.n	400cc6 <_read+0x2e>
  400ca6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400ca8:	4e08      	ldr	r6, [pc, #32]	; (400ccc <_read+0x34>)
  400caa:	4d09      	ldr	r5, [pc, #36]	; (400cd0 <_read+0x38>)
  400cac:	6830      	ldr	r0, [r6, #0]
  400cae:	4621      	mov	r1, r4
  400cb0:	682b      	ldr	r3, [r5, #0]
  400cb2:	4798      	blx	r3
		ptr++;
  400cb4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400cb6:	42bc      	cmp	r4, r7
  400cb8:	d1f8      	bne.n	400cac <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400cba:	4640      	mov	r0, r8
  400cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400cc0:	f04f 38ff 	mov.w	r8, #4294967295
  400cc4:	e7f9      	b.n	400cba <_read+0x22>
	for (; len > 0; --len) {
  400cc6:	4680      	mov	r8, r0
  400cc8:	e7f7      	b.n	400cba <_read+0x22>
  400cca:	bf00      	nop
  400ccc:	20400df0 	.word	0x20400df0
  400cd0:	20400de8 	.word	0x20400de8

00400cd4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400cd4:	3801      	subs	r0, #1
  400cd6:	2802      	cmp	r0, #2
  400cd8:	d815      	bhi.n	400d06 <_write+0x32>
{
  400cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400cde:	460e      	mov	r6, r1
  400ce0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400ce2:	b19a      	cbz	r2, 400d0c <_write+0x38>
  400ce4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400ce6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400d20 <_write+0x4c>
  400cea:	4f0c      	ldr	r7, [pc, #48]	; (400d1c <_write+0x48>)
  400cec:	f8d8 0000 	ldr.w	r0, [r8]
  400cf0:	f815 1b01 	ldrb.w	r1, [r5], #1
  400cf4:	683b      	ldr	r3, [r7, #0]
  400cf6:	4798      	blx	r3
  400cf8:	2800      	cmp	r0, #0
  400cfa:	db0a      	blt.n	400d12 <_write+0x3e>
  400cfc:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400cfe:	3c01      	subs	r4, #1
  400d00:	d1f4      	bne.n	400cec <_write+0x18>
  400d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d06:	f04f 30ff 	mov.w	r0, #4294967295
  400d0a:	4770      	bx	lr
	for (; len != 0; --len) {
  400d0c:	4610      	mov	r0, r2
  400d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400d12:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d1a:	bf00      	nop
  400d1c:	20400dec 	.word	0x20400dec
  400d20:	20400df0 	.word	0x20400df0

00400d24 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d2a:	4b5c      	ldr	r3, [pc, #368]	; (400e9c <board_init+0x178>)
  400d2c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400d2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d32:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400d36:	4b5a      	ldr	r3, [pc, #360]	; (400ea0 <board_init+0x17c>)
  400d38:	2200      	movs	r2, #0
  400d3a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400d3e:	695a      	ldr	r2, [r3, #20]
  400d40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400d44:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400d46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d4a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400d4e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400d52:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400d56:	f007 0007 	and.w	r0, r7, #7
  400d5a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400d5c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400d60:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400d64:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400d68:	f3bf 8f4f 	dsb	sy
  400d6c:	f04f 34ff 	mov.w	r4, #4294967295
  400d70:	fa04 fc00 	lsl.w	ip, r4, r0
  400d74:	fa06 f000 	lsl.w	r0, r6, r0
  400d78:	fa04 f40e 	lsl.w	r4, r4, lr
  400d7c:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400d80:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400d82:	463a      	mov	r2, r7
  400d84:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400d86:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400d8a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400d8e:	3a01      	subs	r2, #1
  400d90:	4423      	add	r3, r4
  400d92:	f1b2 3fff 	cmp.w	r2, #4294967295
  400d96:	d1f6      	bne.n	400d86 <board_init+0x62>
        } while(sets--);
  400d98:	3e01      	subs	r6, #1
  400d9a:	4460      	add	r0, ip
  400d9c:	f1b6 3fff 	cmp.w	r6, #4294967295
  400da0:	d1ef      	bne.n	400d82 <board_init+0x5e>
  400da2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400da6:	4b3e      	ldr	r3, [pc, #248]	; (400ea0 <board_init+0x17c>)
  400da8:	695a      	ldr	r2, [r3, #20]
  400daa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400dae:	615a      	str	r2, [r3, #20]
  400db0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400db4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400db8:	4a3a      	ldr	r2, [pc, #232]	; (400ea4 <board_init+0x180>)
  400dba:	493b      	ldr	r1, [pc, #236]	; (400ea8 <board_init+0x184>)
  400dbc:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400dbe:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400dc2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400dc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dc8:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400dcc:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400dd0:	f022 0201 	bic.w	r2, r2, #1
  400dd4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400dd8:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400ddc:	f022 0201 	bic.w	r2, r2, #1
  400de0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400de4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400de8:	f3bf 8f6f 	isb	sy
  400dec:	200a      	movs	r0, #10
  400dee:	4c2f      	ldr	r4, [pc, #188]	; (400eac <board_init+0x188>)
  400df0:	47a0      	blx	r4
  400df2:	200b      	movs	r0, #11
  400df4:	47a0      	blx	r4
  400df6:	200c      	movs	r0, #12
  400df8:	47a0      	blx	r4
  400dfa:	2010      	movs	r0, #16
  400dfc:	47a0      	blx	r4
  400dfe:	2011      	movs	r0, #17
  400e00:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e02:	4b2b      	ldr	r3, [pc, #172]	; (400eb0 <board_init+0x18c>)
  400e04:	f44f 7280 	mov.w	r2, #256	; 0x100
  400e08:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e0e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400e10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400e18:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400e1e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400e20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e24:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400e26:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400e2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e2e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400e32:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e34:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e36:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400e3a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400e3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400e40:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400e44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400e48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400e4c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e52:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e54:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e5c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400e60:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e62:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e64:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400e68:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e6a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400e6c:	4a11      	ldr	r2, [pc, #68]	; (400eb4 <board_init+0x190>)
  400e6e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400e72:	f043 0310 	orr.w	r3, r3, #16
  400e76:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400e7a:	4b0f      	ldr	r3, [pc, #60]	; (400eb8 <board_init+0x194>)
  400e7c:	2210      	movs	r2, #16
  400e7e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e84:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e86:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400e8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e8e:	4311      	orrs	r1, r2
  400e90:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e92:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e94:	4311      	orrs	r1, r2
  400e96:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e98:	605a      	str	r2, [r3, #4]
  400e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e9c:	400e1850 	.word	0x400e1850
  400ea0:	e000ed00 	.word	0xe000ed00
  400ea4:	400e0c00 	.word	0x400e0c00
  400ea8:	5a00080c 	.word	0x5a00080c
  400eac:	004012e5 	.word	0x004012e5
  400eb0:	400e1200 	.word	0x400e1200
  400eb4:	40088000 	.word	0x40088000
  400eb8:	400e1000 	.word	0x400e1000

00400ebc <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400ebc:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400ec0:	0053      	lsls	r3, r2, #1
  400ec2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400ec6:	fbb2 f2f3 	udiv	r2, r2, r3
  400eca:	3a01      	subs	r2, #1
  400ecc:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400ed0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400ed4:	4770      	bx	lr

00400ed6 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400ed6:	6301      	str	r1, [r0, #48]	; 0x30
  400ed8:	4770      	bx	lr

00400eda <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400eda:	6341      	str	r1, [r0, #52]	; 0x34
  400edc:	4770      	bx	lr

00400ede <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400ede:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ee0:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400ee4:	d03a      	beq.n	400f5c <pio_set_peripheral+0x7e>
  400ee6:	d813      	bhi.n	400f10 <pio_set_peripheral+0x32>
  400ee8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400eec:	d025      	beq.n	400f3a <pio_set_peripheral+0x5c>
  400eee:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ef2:	d10a      	bne.n	400f0a <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ef4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ef6:	4313      	orrs	r3, r2
  400ef8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400efa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400efc:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400efe:	400b      	ands	r3, r1
  400f00:	ea23 0302 	bic.w	r3, r3, r2
  400f04:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400f06:	6042      	str	r2, [r0, #4]
  400f08:	4770      	bx	lr
	switch (ul_type) {
  400f0a:	2900      	cmp	r1, #0
  400f0c:	d1fb      	bne.n	400f06 <pio_set_peripheral+0x28>
  400f0e:	4770      	bx	lr
  400f10:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400f14:	d021      	beq.n	400f5a <pio_set_peripheral+0x7c>
  400f16:	d809      	bhi.n	400f2c <pio_set_peripheral+0x4e>
  400f18:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f1c:	d1f3      	bne.n	400f06 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f1e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f20:	4313      	orrs	r3, r2
  400f22:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f24:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f26:	4313      	orrs	r3, r2
  400f28:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f2a:	e7ec      	b.n	400f06 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400f2c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400f30:	d013      	beq.n	400f5a <pio_set_peripheral+0x7c>
  400f32:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400f36:	d010      	beq.n	400f5a <pio_set_peripheral+0x7c>
  400f38:	e7e5      	b.n	400f06 <pio_set_peripheral+0x28>
{
  400f3a:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f3c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f3e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400f40:	43d3      	mvns	r3, r2
  400f42:	4021      	ands	r1, r4
  400f44:	461c      	mov	r4, r3
  400f46:	4019      	ands	r1, r3
  400f48:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f4a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f4c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400f4e:	400b      	ands	r3, r1
  400f50:	4023      	ands	r3, r4
  400f52:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400f54:	6042      	str	r2, [r0, #4]
}
  400f56:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f5a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f5c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f5e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400f60:	400b      	ands	r3, r1
  400f62:	ea23 0302 	bic.w	r3, r3, r2
  400f66:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f68:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f6a:	4313      	orrs	r3, r2
  400f6c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f6e:	e7ca      	b.n	400f06 <pio_set_peripheral+0x28>

00400f70 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400f70:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400f72:	f012 0f01 	tst.w	r2, #1
  400f76:	d10d      	bne.n	400f94 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400f78:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400f7a:	f012 0f0a 	tst.w	r2, #10
  400f7e:	d00b      	beq.n	400f98 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400f80:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400f82:	f012 0f02 	tst.w	r2, #2
  400f86:	d109      	bne.n	400f9c <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400f88:	f012 0f08 	tst.w	r2, #8
  400f8c:	d008      	beq.n	400fa0 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400f8e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400f92:	e005      	b.n	400fa0 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400f94:	6641      	str	r1, [r0, #100]	; 0x64
  400f96:	e7f0      	b.n	400f7a <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400f98:	6241      	str	r1, [r0, #36]	; 0x24
  400f9a:	e7f2      	b.n	400f82 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400f9c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400fa0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400fa2:	6001      	str	r1, [r0, #0]
  400fa4:	4770      	bx	lr

00400fa6 <pio_set_output>:
{
  400fa6:	b410      	push	{r4}
  400fa8:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400faa:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400fac:	b94c      	cbnz	r4, 400fc2 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400fae:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400fb0:	b14b      	cbz	r3, 400fc6 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400fb2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400fb4:	b94a      	cbnz	r2, 400fca <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400fb6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400fb8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400fba:	6001      	str	r1, [r0, #0]
}
  400fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fc0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400fc2:	6641      	str	r1, [r0, #100]	; 0x64
  400fc4:	e7f4      	b.n	400fb0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400fc6:	6541      	str	r1, [r0, #84]	; 0x54
  400fc8:	e7f4      	b.n	400fb4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400fca:	6301      	str	r1, [r0, #48]	; 0x30
  400fcc:	e7f4      	b.n	400fb8 <pio_set_output+0x12>
	...

00400fd0 <pio_configure>:
{
  400fd0:	b570      	push	{r4, r5, r6, lr}
  400fd2:	b082      	sub	sp, #8
  400fd4:	4605      	mov	r5, r0
  400fd6:	4616      	mov	r6, r2
  400fd8:	461c      	mov	r4, r3
	switch (ul_type) {
  400fda:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400fde:	d014      	beq.n	40100a <pio_configure+0x3a>
  400fe0:	d90a      	bls.n	400ff8 <pio_configure+0x28>
  400fe2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400fe6:	d024      	beq.n	401032 <pio_configure+0x62>
  400fe8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400fec:	d021      	beq.n	401032 <pio_configure+0x62>
  400fee:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ff2:	d017      	beq.n	401024 <pio_configure+0x54>
		return 0;
  400ff4:	2000      	movs	r0, #0
  400ff6:	e01a      	b.n	40102e <pio_configure+0x5e>
	switch (ul_type) {
  400ff8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ffc:	d005      	beq.n	40100a <pio_configure+0x3a>
  400ffe:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401002:	d002      	beq.n	40100a <pio_configure+0x3a>
  401004:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401008:	d1f4      	bne.n	400ff4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40100a:	4632      	mov	r2, r6
  40100c:	4628      	mov	r0, r5
  40100e:	4b11      	ldr	r3, [pc, #68]	; (401054 <pio_configure+0x84>)
  401010:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401012:	f014 0f01 	tst.w	r4, #1
  401016:	d102      	bne.n	40101e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401018:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40101a:	2001      	movs	r0, #1
  40101c:	e007      	b.n	40102e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40101e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401020:	2001      	movs	r0, #1
  401022:	e004      	b.n	40102e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401024:	461a      	mov	r2, r3
  401026:	4631      	mov	r1, r6
  401028:	4b0b      	ldr	r3, [pc, #44]	; (401058 <pio_configure+0x88>)
  40102a:	4798      	blx	r3
	return 1;
  40102c:	2001      	movs	r0, #1
}
  40102e:	b002      	add	sp, #8
  401030:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401032:	f004 0301 	and.w	r3, r4, #1
  401036:	9300      	str	r3, [sp, #0]
  401038:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40103c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401040:	bf14      	ite	ne
  401042:	2200      	movne	r2, #0
  401044:	2201      	moveq	r2, #1
  401046:	4631      	mov	r1, r6
  401048:	4628      	mov	r0, r5
  40104a:	4c04      	ldr	r4, [pc, #16]	; (40105c <pio_configure+0x8c>)
  40104c:	47a0      	blx	r4
	return 1;
  40104e:	2001      	movs	r0, #1
		break;
  401050:	e7ed      	b.n	40102e <pio_configure+0x5e>
  401052:	bf00      	nop
  401054:	00400edf 	.word	0x00400edf
  401058:	00400f71 	.word	0x00400f71
  40105c:	00400fa7 	.word	0x00400fa7

00401060 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  401060:	f012 0f10 	tst.w	r2, #16
  401064:	d012      	beq.n	40108c <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  401066:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40106a:	f012 0f20 	tst.w	r2, #32
  40106e:	d007      	beq.n	401080 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  401070:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  401074:	f012 0f40 	tst.w	r2, #64	; 0x40
  401078:	d005      	beq.n	401086 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  40107a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40107e:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  401080:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  401084:	e7f6      	b.n	401074 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  401086:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40108a:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  40108c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  401090:	4770      	bx	lr

00401092 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  401092:	6401      	str	r1, [r0, #64]	; 0x40
  401094:	4770      	bx	lr

00401096 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401096:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401098:	4770      	bx	lr

0040109a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40109a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40109c:	4770      	bx	lr
	...

004010a0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4010a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010a4:	4604      	mov	r4, r0
  4010a6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4010a8:	4b0e      	ldr	r3, [pc, #56]	; (4010e4 <pio_handler_process+0x44>)
  4010aa:	4798      	blx	r3
  4010ac:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4010ae:	4620      	mov	r0, r4
  4010b0:	4b0d      	ldr	r3, [pc, #52]	; (4010e8 <pio_handler_process+0x48>)
  4010b2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4010b4:	4005      	ands	r5, r0
  4010b6:	d013      	beq.n	4010e0 <pio_handler_process+0x40>
  4010b8:	4c0c      	ldr	r4, [pc, #48]	; (4010ec <pio_handler_process+0x4c>)
  4010ba:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4010be:	e003      	b.n	4010c8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4010c0:	42b4      	cmp	r4, r6
  4010c2:	d00d      	beq.n	4010e0 <pio_handler_process+0x40>
  4010c4:	3410      	adds	r4, #16
		while (status != 0) {
  4010c6:	b15d      	cbz	r5, 4010e0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4010c8:	6820      	ldr	r0, [r4, #0]
  4010ca:	4540      	cmp	r0, r8
  4010cc:	d1f8      	bne.n	4010c0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4010ce:	6861      	ldr	r1, [r4, #4]
  4010d0:	4229      	tst	r1, r5
  4010d2:	d0f5      	beq.n	4010c0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4010d4:	68e3      	ldr	r3, [r4, #12]
  4010d6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4010d8:	6863      	ldr	r3, [r4, #4]
  4010da:	ea25 0503 	bic.w	r5, r5, r3
  4010de:	e7ef      	b.n	4010c0 <pio_handler_process+0x20>
  4010e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010e4:	00401097 	.word	0x00401097
  4010e8:	0040109b 	.word	0x0040109b
  4010ec:	20400bf8 	.word	0x20400bf8

004010f0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4010f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4010f2:	4c18      	ldr	r4, [pc, #96]	; (401154 <pio_handler_set+0x64>)
  4010f4:	6826      	ldr	r6, [r4, #0]
  4010f6:	2e06      	cmp	r6, #6
  4010f8:	d82a      	bhi.n	401150 <pio_handler_set+0x60>
  4010fa:	f04f 0c00 	mov.w	ip, #0
  4010fe:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401100:	4f15      	ldr	r7, [pc, #84]	; (401158 <pio_handler_set+0x68>)
  401102:	e004      	b.n	40110e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401104:	3401      	adds	r4, #1
  401106:	b2e4      	uxtb	r4, r4
  401108:	46a4      	mov	ip, r4
  40110a:	42a6      	cmp	r6, r4
  40110c:	d309      	bcc.n	401122 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40110e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401110:	0125      	lsls	r5, r4, #4
  401112:	597d      	ldr	r5, [r7, r5]
  401114:	428d      	cmp	r5, r1
  401116:	d1f5      	bne.n	401104 <pio_handler_set+0x14>
  401118:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40111c:	686d      	ldr	r5, [r5, #4]
  40111e:	4295      	cmp	r5, r2
  401120:	d1f0      	bne.n	401104 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401122:	4d0d      	ldr	r5, [pc, #52]	; (401158 <pio_handler_set+0x68>)
  401124:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401128:	eb05 040e 	add.w	r4, r5, lr
  40112c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401130:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401132:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401134:	9906      	ldr	r1, [sp, #24]
  401136:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401138:	3601      	adds	r6, #1
  40113a:	4566      	cmp	r6, ip
  40113c:	d005      	beq.n	40114a <pio_handler_set+0x5a>
  40113e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401140:	461a      	mov	r2, r3
  401142:	4b06      	ldr	r3, [pc, #24]	; (40115c <pio_handler_set+0x6c>)
  401144:	4798      	blx	r3

	return 0;
  401146:	2000      	movs	r0, #0
  401148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40114a:	4902      	ldr	r1, [pc, #8]	; (401154 <pio_handler_set+0x64>)
  40114c:	600e      	str	r6, [r1, #0]
  40114e:	e7f6      	b.n	40113e <pio_handler_set+0x4e>
		return 1;
  401150:	2001      	movs	r0, #1
}
  401152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401154:	20400c68 	.word	0x20400c68
  401158:	20400bf8 	.word	0x20400bf8
  40115c:	00401061 	.word	0x00401061

00401160 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401160:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401162:	210a      	movs	r1, #10
  401164:	4801      	ldr	r0, [pc, #4]	; (40116c <PIOA_Handler+0xc>)
  401166:	4b02      	ldr	r3, [pc, #8]	; (401170 <PIOA_Handler+0x10>)
  401168:	4798      	blx	r3
  40116a:	bd08      	pop	{r3, pc}
  40116c:	400e0e00 	.word	0x400e0e00
  401170:	004010a1 	.word	0x004010a1

00401174 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401174:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401176:	210b      	movs	r1, #11
  401178:	4801      	ldr	r0, [pc, #4]	; (401180 <PIOB_Handler+0xc>)
  40117a:	4b02      	ldr	r3, [pc, #8]	; (401184 <PIOB_Handler+0x10>)
  40117c:	4798      	blx	r3
  40117e:	bd08      	pop	{r3, pc}
  401180:	400e1000 	.word	0x400e1000
  401184:	004010a1 	.word	0x004010a1

00401188 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401188:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40118a:	210c      	movs	r1, #12
  40118c:	4801      	ldr	r0, [pc, #4]	; (401194 <PIOC_Handler+0xc>)
  40118e:	4b02      	ldr	r3, [pc, #8]	; (401198 <PIOC_Handler+0x10>)
  401190:	4798      	blx	r3
  401192:	bd08      	pop	{r3, pc}
  401194:	400e1200 	.word	0x400e1200
  401198:	004010a1 	.word	0x004010a1

0040119c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40119c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40119e:	2110      	movs	r1, #16
  4011a0:	4801      	ldr	r0, [pc, #4]	; (4011a8 <PIOD_Handler+0xc>)
  4011a2:	4b02      	ldr	r3, [pc, #8]	; (4011ac <PIOD_Handler+0x10>)
  4011a4:	4798      	blx	r3
  4011a6:	bd08      	pop	{r3, pc}
  4011a8:	400e1400 	.word	0x400e1400
  4011ac:	004010a1 	.word	0x004010a1

004011b0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4011b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4011b2:	2111      	movs	r1, #17
  4011b4:	4801      	ldr	r0, [pc, #4]	; (4011bc <PIOE_Handler+0xc>)
  4011b6:	4b02      	ldr	r3, [pc, #8]	; (4011c0 <PIOE_Handler+0x10>)
  4011b8:	4798      	blx	r3
  4011ba:	bd08      	pop	{r3, pc}
  4011bc:	400e1600 	.word	0x400e1600
  4011c0:	004010a1 	.word	0x004010a1

004011c4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4011c4:	2803      	cmp	r0, #3
  4011c6:	d011      	beq.n	4011ec <pmc_mck_set_division+0x28>
  4011c8:	2804      	cmp	r0, #4
  4011ca:	d012      	beq.n	4011f2 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4011cc:	2802      	cmp	r0, #2
  4011ce:	bf0c      	ite	eq
  4011d0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4011d4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4011d6:	4a08      	ldr	r2, [pc, #32]	; (4011f8 <pmc_mck_set_division+0x34>)
  4011d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4011de:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4011e0:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4011e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011e4:	f013 0f08 	tst.w	r3, #8
  4011e8:	d0fb      	beq.n	4011e2 <pmc_mck_set_division+0x1e>
}
  4011ea:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4011ec:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4011f0:	e7f1      	b.n	4011d6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4011f2:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4011f6:	e7ee      	b.n	4011d6 <pmc_mck_set_division+0x12>
  4011f8:	400e0600 	.word	0x400e0600

004011fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4011fc:	4a17      	ldr	r2, [pc, #92]	; (40125c <pmc_switch_mck_to_pllack+0x60>)
  4011fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401204:	4318      	orrs	r0, r3
  401206:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401208:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40120a:	f013 0f08 	tst.w	r3, #8
  40120e:	d10a      	bne.n	401226 <pmc_switch_mck_to_pllack+0x2a>
  401210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401214:	4911      	ldr	r1, [pc, #68]	; (40125c <pmc_switch_mck_to_pllack+0x60>)
  401216:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401218:	f012 0f08 	tst.w	r2, #8
  40121c:	d103      	bne.n	401226 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40121e:	3b01      	subs	r3, #1
  401220:	d1f9      	bne.n	401216 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401222:	2001      	movs	r0, #1
  401224:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401226:	4a0d      	ldr	r2, [pc, #52]	; (40125c <pmc_switch_mck_to_pllack+0x60>)
  401228:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40122a:	f023 0303 	bic.w	r3, r3, #3
  40122e:	f043 0302 	orr.w	r3, r3, #2
  401232:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401234:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401236:	f013 0f08 	tst.w	r3, #8
  40123a:	d10a      	bne.n	401252 <pmc_switch_mck_to_pllack+0x56>
  40123c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401240:	4906      	ldr	r1, [pc, #24]	; (40125c <pmc_switch_mck_to_pllack+0x60>)
  401242:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401244:	f012 0f08 	tst.w	r2, #8
  401248:	d105      	bne.n	401256 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40124a:	3b01      	subs	r3, #1
  40124c:	d1f9      	bne.n	401242 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40124e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401250:	4770      	bx	lr
	return 0;
  401252:	2000      	movs	r0, #0
  401254:	4770      	bx	lr
  401256:	2000      	movs	r0, #0
  401258:	4770      	bx	lr
  40125a:	bf00      	nop
  40125c:	400e0600 	.word	0x400e0600

00401260 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401260:	b9a0      	cbnz	r0, 40128c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401262:	480e      	ldr	r0, [pc, #56]	; (40129c <pmc_switch_mainck_to_xtal+0x3c>)
  401264:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401266:	0209      	lsls	r1, r1, #8
  401268:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40126a:	4a0d      	ldr	r2, [pc, #52]	; (4012a0 <pmc_switch_mainck_to_xtal+0x40>)
  40126c:	401a      	ands	r2, r3
  40126e:	4b0d      	ldr	r3, [pc, #52]	; (4012a4 <pmc_switch_mainck_to_xtal+0x44>)
  401270:	4313      	orrs	r3, r2
  401272:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401274:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401276:	4602      	mov	r2, r0
  401278:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40127a:	f013 0f01 	tst.w	r3, #1
  40127e:	d0fb      	beq.n	401278 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401280:	4a06      	ldr	r2, [pc, #24]	; (40129c <pmc_switch_mainck_to_xtal+0x3c>)
  401282:	6a11      	ldr	r1, [r2, #32]
  401284:	4b08      	ldr	r3, [pc, #32]	; (4012a8 <pmc_switch_mainck_to_xtal+0x48>)
  401286:	430b      	orrs	r3, r1
  401288:	6213      	str	r3, [r2, #32]
  40128a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40128c:	4903      	ldr	r1, [pc, #12]	; (40129c <pmc_switch_mainck_to_xtal+0x3c>)
  40128e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401290:	4a06      	ldr	r2, [pc, #24]	; (4012ac <pmc_switch_mainck_to_xtal+0x4c>)
  401292:	401a      	ands	r2, r3
  401294:	4b06      	ldr	r3, [pc, #24]	; (4012b0 <pmc_switch_mainck_to_xtal+0x50>)
  401296:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401298:	620b      	str	r3, [r1, #32]
  40129a:	4770      	bx	lr
  40129c:	400e0600 	.word	0x400e0600
  4012a0:	ffc8fffc 	.word	0xffc8fffc
  4012a4:	00370001 	.word	0x00370001
  4012a8:	01370000 	.word	0x01370000
  4012ac:	fec8fffc 	.word	0xfec8fffc
  4012b0:	01370002 	.word	0x01370002

004012b4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4012b4:	4b02      	ldr	r3, [pc, #8]	; (4012c0 <pmc_osc_is_ready_mainck+0xc>)
  4012b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4012b8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4012bc:	4770      	bx	lr
  4012be:	bf00      	nop
  4012c0:	400e0600 	.word	0x400e0600

004012c4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4012c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4012c8:	4b01      	ldr	r3, [pc, #4]	; (4012d0 <pmc_disable_pllack+0xc>)
  4012ca:	629a      	str	r2, [r3, #40]	; 0x28
  4012cc:	4770      	bx	lr
  4012ce:	bf00      	nop
  4012d0:	400e0600 	.word	0x400e0600

004012d4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4012d4:	4b02      	ldr	r3, [pc, #8]	; (4012e0 <pmc_is_locked_pllack+0xc>)
  4012d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4012d8:	f000 0002 	and.w	r0, r0, #2
  4012dc:	4770      	bx	lr
  4012de:	bf00      	nop
  4012e0:	400e0600 	.word	0x400e0600

004012e4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4012e4:	283f      	cmp	r0, #63	; 0x3f
  4012e6:	d81e      	bhi.n	401326 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4012e8:	281f      	cmp	r0, #31
  4012ea:	d80c      	bhi.n	401306 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4012ec:	4b11      	ldr	r3, [pc, #68]	; (401334 <pmc_enable_periph_clk+0x50>)
  4012ee:	699a      	ldr	r2, [r3, #24]
  4012f0:	2301      	movs	r3, #1
  4012f2:	4083      	lsls	r3, r0
  4012f4:	4393      	bics	r3, r2
  4012f6:	d018      	beq.n	40132a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4012f8:	2301      	movs	r3, #1
  4012fa:	fa03 f000 	lsl.w	r0, r3, r0
  4012fe:	4b0d      	ldr	r3, [pc, #52]	; (401334 <pmc_enable_periph_clk+0x50>)
  401300:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401302:	2000      	movs	r0, #0
  401304:	4770      	bx	lr
		ul_id -= 32;
  401306:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401308:	4b0a      	ldr	r3, [pc, #40]	; (401334 <pmc_enable_periph_clk+0x50>)
  40130a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40130e:	2301      	movs	r3, #1
  401310:	4083      	lsls	r3, r0
  401312:	4393      	bics	r3, r2
  401314:	d00b      	beq.n	40132e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401316:	2301      	movs	r3, #1
  401318:	fa03 f000 	lsl.w	r0, r3, r0
  40131c:	4b05      	ldr	r3, [pc, #20]	; (401334 <pmc_enable_periph_clk+0x50>)
  40131e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401322:	2000      	movs	r0, #0
  401324:	4770      	bx	lr
		return 1;
  401326:	2001      	movs	r0, #1
  401328:	4770      	bx	lr
	return 0;
  40132a:	2000      	movs	r0, #0
  40132c:	4770      	bx	lr
  40132e:	2000      	movs	r0, #0
}
  401330:	4770      	bx	lr
  401332:	bf00      	nop
  401334:	400e0600 	.word	0x400e0600

00401338 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401338:	6943      	ldr	r3, [r0, #20]
  40133a:	f013 0f02 	tst.w	r3, #2
  40133e:	d002      	beq.n	401346 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401340:	61c1      	str	r1, [r0, #28]
	return 0;
  401342:	2000      	movs	r0, #0
  401344:	4770      	bx	lr
		return 1;
  401346:	2001      	movs	r0, #1
}
  401348:	4770      	bx	lr

0040134a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40134a:	6943      	ldr	r3, [r0, #20]
  40134c:	f013 0f01 	tst.w	r3, #1
  401350:	d003      	beq.n	40135a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401352:	6983      	ldr	r3, [r0, #24]
  401354:	700b      	strb	r3, [r1, #0]
	return 0;
  401356:	2000      	movs	r0, #0
  401358:	4770      	bx	lr
		return 1;
  40135a:	2001      	movs	r0, #1
}
  40135c:	4770      	bx	lr

0040135e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40135e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401360:	010b      	lsls	r3, r1, #4
  401362:	4293      	cmp	r3, r2
  401364:	d914      	bls.n	401390 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401366:	00c9      	lsls	r1, r1, #3
  401368:	084b      	lsrs	r3, r1, #1
  40136a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40136e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401372:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401374:	1e5c      	subs	r4, r3, #1
  401376:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40137a:	428c      	cmp	r4, r1
  40137c:	d901      	bls.n	401382 <usart_set_async_baudrate+0x24>
		return 1;
  40137e:	2001      	movs	r0, #1
  401380:	e017      	b.n	4013b2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401382:	6841      	ldr	r1, [r0, #4]
  401384:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401388:	6041      	str	r1, [r0, #4]
  40138a:	e00c      	b.n	4013a6 <usart_set_async_baudrate+0x48>
		return 1;
  40138c:	2001      	movs	r0, #1
  40138e:	e010      	b.n	4013b2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401390:	0859      	lsrs	r1, r3, #1
  401392:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401396:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40139a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40139c:	1e5c      	subs	r4, r3, #1
  40139e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4013a2:	428c      	cmp	r4, r1
  4013a4:	d8f2      	bhi.n	40138c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4013a6:	0412      	lsls	r2, r2, #16
  4013a8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4013ac:	431a      	orrs	r2, r3
  4013ae:	6202      	str	r2, [r0, #32]

	return 0;
  4013b0:	2000      	movs	r0, #0
}
  4013b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013b6:	4770      	bx	lr

004013b8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4013b8:	4b08      	ldr	r3, [pc, #32]	; (4013dc <usart_reset+0x24>)
  4013ba:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4013be:	2300      	movs	r3, #0
  4013c0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4013c2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4013c4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4013c6:	2388      	movs	r3, #136	; 0x88
  4013c8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4013ca:	2324      	movs	r3, #36	; 0x24
  4013cc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4013ce:	f44f 7380 	mov.w	r3, #256	; 0x100
  4013d2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4013d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4013d8:	6003      	str	r3, [r0, #0]
  4013da:	4770      	bx	lr
  4013dc:	55534100 	.word	0x55534100

004013e0 <usart_init_rs232>:
{
  4013e0:	b570      	push	{r4, r5, r6, lr}
  4013e2:	4605      	mov	r5, r0
  4013e4:	460c      	mov	r4, r1
  4013e6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4013e8:	4b0f      	ldr	r3, [pc, #60]	; (401428 <usart_init_rs232+0x48>)
  4013ea:	4798      	blx	r3
	ul_reg_val = 0;
  4013ec:	2200      	movs	r2, #0
  4013ee:	4b0f      	ldr	r3, [pc, #60]	; (40142c <usart_init_rs232+0x4c>)
  4013f0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4013f2:	b1a4      	cbz	r4, 40141e <usart_init_rs232+0x3e>
  4013f4:	4632      	mov	r2, r6
  4013f6:	6821      	ldr	r1, [r4, #0]
  4013f8:	4628      	mov	r0, r5
  4013fa:	4b0d      	ldr	r3, [pc, #52]	; (401430 <usart_init_rs232+0x50>)
  4013fc:	4798      	blx	r3
  4013fe:	4602      	mov	r2, r0
  401400:	b978      	cbnz	r0, 401422 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401402:	6863      	ldr	r3, [r4, #4]
  401404:	68a1      	ldr	r1, [r4, #8]
  401406:	430b      	orrs	r3, r1
  401408:	6921      	ldr	r1, [r4, #16]
  40140a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40140c:	68e1      	ldr	r1, [r4, #12]
  40140e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401410:	4906      	ldr	r1, [pc, #24]	; (40142c <usart_init_rs232+0x4c>)
  401412:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401414:	6869      	ldr	r1, [r5, #4]
  401416:	430b      	orrs	r3, r1
  401418:	606b      	str	r3, [r5, #4]
}
  40141a:	4610      	mov	r0, r2
  40141c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40141e:	2201      	movs	r2, #1
  401420:	e7fb      	b.n	40141a <usart_init_rs232+0x3a>
  401422:	2201      	movs	r2, #1
  401424:	e7f9      	b.n	40141a <usart_init_rs232+0x3a>
  401426:	bf00      	nop
  401428:	004013b9 	.word	0x004013b9
  40142c:	20400c6c 	.word	0x20400c6c
  401430:	0040135f 	.word	0x0040135f

00401434 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401434:	2340      	movs	r3, #64	; 0x40
  401436:	6003      	str	r3, [r0, #0]
  401438:	4770      	bx	lr

0040143a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40143a:	2310      	movs	r3, #16
  40143c:	6003      	str	r3, [r0, #0]
  40143e:	4770      	bx	lr

00401440 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401440:	6943      	ldr	r3, [r0, #20]
  401442:	f013 0f02 	tst.w	r3, #2
  401446:	d004      	beq.n	401452 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401448:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40144c:	61c1      	str	r1, [r0, #28]
	return 0;
  40144e:	2000      	movs	r0, #0
  401450:	4770      	bx	lr
		return 1;
  401452:	2001      	movs	r0, #1
}
  401454:	4770      	bx	lr

00401456 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401456:	6943      	ldr	r3, [r0, #20]
  401458:	f013 0f01 	tst.w	r3, #1
  40145c:	d005      	beq.n	40146a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40145e:	6983      	ldr	r3, [r0, #24]
  401460:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401464:	600b      	str	r3, [r1, #0]
	return 0;
  401466:	2000      	movs	r0, #0
  401468:	4770      	bx	lr
		return 1;
  40146a:	2001      	movs	r0, #1
}
  40146c:	4770      	bx	lr

0040146e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40146e:	e7fe      	b.n	40146e <Dummy_Handler>

00401470 <Reset_Handler>:
{
  401470:	b500      	push	{lr}
  401472:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401474:	4b25      	ldr	r3, [pc, #148]	; (40150c <Reset_Handler+0x9c>)
  401476:	4a26      	ldr	r2, [pc, #152]	; (401510 <Reset_Handler+0xa0>)
  401478:	429a      	cmp	r2, r3
  40147a:	d010      	beq.n	40149e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40147c:	4b25      	ldr	r3, [pc, #148]	; (401514 <Reset_Handler+0xa4>)
  40147e:	4a23      	ldr	r2, [pc, #140]	; (40150c <Reset_Handler+0x9c>)
  401480:	429a      	cmp	r2, r3
  401482:	d20c      	bcs.n	40149e <Reset_Handler+0x2e>
  401484:	3b01      	subs	r3, #1
  401486:	1a9b      	subs	r3, r3, r2
  401488:	f023 0303 	bic.w	r3, r3, #3
  40148c:	3304      	adds	r3, #4
  40148e:	4413      	add	r3, r2
  401490:	491f      	ldr	r1, [pc, #124]	; (401510 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401492:	f851 0b04 	ldr.w	r0, [r1], #4
  401496:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40149a:	429a      	cmp	r2, r3
  40149c:	d1f9      	bne.n	401492 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40149e:	4b1e      	ldr	r3, [pc, #120]	; (401518 <Reset_Handler+0xa8>)
  4014a0:	4a1e      	ldr	r2, [pc, #120]	; (40151c <Reset_Handler+0xac>)
  4014a2:	429a      	cmp	r2, r3
  4014a4:	d20a      	bcs.n	4014bc <Reset_Handler+0x4c>
  4014a6:	3b01      	subs	r3, #1
  4014a8:	1a9b      	subs	r3, r3, r2
  4014aa:	f023 0303 	bic.w	r3, r3, #3
  4014ae:	3304      	adds	r3, #4
  4014b0:	4413      	add	r3, r2
                *pDest++ = 0;
  4014b2:	2100      	movs	r1, #0
  4014b4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4014b8:	4293      	cmp	r3, r2
  4014ba:	d1fb      	bne.n	4014b4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4014bc:	4a18      	ldr	r2, [pc, #96]	; (401520 <Reset_Handler+0xb0>)
  4014be:	4b19      	ldr	r3, [pc, #100]	; (401524 <Reset_Handler+0xb4>)
  4014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4014c4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4014c6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4014ca:	fab3 f383 	clz	r3, r3
  4014ce:	095b      	lsrs	r3, r3, #5
  4014d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4014d2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4014d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4014d8:	2200      	movs	r2, #0
  4014da:	4b13      	ldr	r3, [pc, #76]	; (401528 <Reset_Handler+0xb8>)
  4014dc:	701a      	strb	r2, [r3, #0]
	return flags;
  4014de:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4014e0:	4a12      	ldr	r2, [pc, #72]	; (40152c <Reset_Handler+0xbc>)
  4014e2:	6813      	ldr	r3, [r2, #0]
  4014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4014e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4014ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4014ee:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4014f2:	b129      	cbz	r1, 401500 <Reset_Handler+0x90>
		cpu_irq_enable();
  4014f4:	2201      	movs	r2, #1
  4014f6:	4b0c      	ldr	r3, [pc, #48]	; (401528 <Reset_Handler+0xb8>)
  4014f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4014fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4014fe:	b662      	cpsie	i
        __libc_init_array();
  401500:	4b0b      	ldr	r3, [pc, #44]	; (401530 <Reset_Handler+0xc0>)
  401502:	4798      	blx	r3
        main();
  401504:	4b0b      	ldr	r3, [pc, #44]	; (401534 <Reset_Handler+0xc4>)
  401506:	4798      	blx	r3
  401508:	e7fe      	b.n	401508 <Reset_Handler+0x98>
  40150a:	bf00      	nop
  40150c:	20400000 	.word	0x20400000
  401510:	0040b71c 	.word	0x0040b71c
  401514:	204009d8 	.word	0x204009d8
  401518:	20400e64 	.word	0x20400e64
  40151c:	204009d8 	.word	0x204009d8
  401520:	e000ed00 	.word	0xe000ed00
  401524:	00400000 	.word	0x00400000
  401528:	20400018 	.word	0x20400018
  40152c:	e000ed88 	.word	0xe000ed88
  401530:	00405cd1 	.word	0x00405cd1
  401534:	00403aa1 	.word	0x00403aa1

00401538 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401538:	4b3b      	ldr	r3, [pc, #236]	; (401628 <SystemCoreClockUpdate+0xf0>)
  40153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40153c:	f003 0303 	and.w	r3, r3, #3
  401540:	2b01      	cmp	r3, #1
  401542:	d01d      	beq.n	401580 <SystemCoreClockUpdate+0x48>
  401544:	b183      	cbz	r3, 401568 <SystemCoreClockUpdate+0x30>
  401546:	2b02      	cmp	r3, #2
  401548:	d036      	beq.n	4015b8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40154a:	4b37      	ldr	r3, [pc, #220]	; (401628 <SystemCoreClockUpdate+0xf0>)
  40154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40154e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401552:	2b70      	cmp	r3, #112	; 0x70
  401554:	d05f      	beq.n	401616 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401556:	4b34      	ldr	r3, [pc, #208]	; (401628 <SystemCoreClockUpdate+0xf0>)
  401558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40155a:	4934      	ldr	r1, [pc, #208]	; (40162c <SystemCoreClockUpdate+0xf4>)
  40155c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401560:	680b      	ldr	r3, [r1, #0]
  401562:	40d3      	lsrs	r3, r2
  401564:	600b      	str	r3, [r1, #0]
  401566:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401568:	4b31      	ldr	r3, [pc, #196]	; (401630 <SystemCoreClockUpdate+0xf8>)
  40156a:	695b      	ldr	r3, [r3, #20]
  40156c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401570:	bf14      	ite	ne
  401572:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401576:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40157a:	4b2c      	ldr	r3, [pc, #176]	; (40162c <SystemCoreClockUpdate+0xf4>)
  40157c:	601a      	str	r2, [r3, #0]
  40157e:	e7e4      	b.n	40154a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401580:	4b29      	ldr	r3, [pc, #164]	; (401628 <SystemCoreClockUpdate+0xf0>)
  401582:	6a1b      	ldr	r3, [r3, #32]
  401584:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401588:	d003      	beq.n	401592 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40158a:	4a2a      	ldr	r2, [pc, #168]	; (401634 <SystemCoreClockUpdate+0xfc>)
  40158c:	4b27      	ldr	r3, [pc, #156]	; (40162c <SystemCoreClockUpdate+0xf4>)
  40158e:	601a      	str	r2, [r3, #0]
  401590:	e7db      	b.n	40154a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401592:	4a29      	ldr	r2, [pc, #164]	; (401638 <SystemCoreClockUpdate+0x100>)
  401594:	4b25      	ldr	r3, [pc, #148]	; (40162c <SystemCoreClockUpdate+0xf4>)
  401596:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401598:	4b23      	ldr	r3, [pc, #140]	; (401628 <SystemCoreClockUpdate+0xf0>)
  40159a:	6a1b      	ldr	r3, [r3, #32]
  40159c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015a0:	2b10      	cmp	r3, #16
  4015a2:	d005      	beq.n	4015b0 <SystemCoreClockUpdate+0x78>
  4015a4:	2b20      	cmp	r3, #32
  4015a6:	d1d0      	bne.n	40154a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4015a8:	4a22      	ldr	r2, [pc, #136]	; (401634 <SystemCoreClockUpdate+0xfc>)
  4015aa:	4b20      	ldr	r3, [pc, #128]	; (40162c <SystemCoreClockUpdate+0xf4>)
  4015ac:	601a      	str	r2, [r3, #0]
          break;
  4015ae:	e7cc      	b.n	40154a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4015b0:	4a22      	ldr	r2, [pc, #136]	; (40163c <SystemCoreClockUpdate+0x104>)
  4015b2:	4b1e      	ldr	r3, [pc, #120]	; (40162c <SystemCoreClockUpdate+0xf4>)
  4015b4:	601a      	str	r2, [r3, #0]
          break;
  4015b6:	e7c8      	b.n	40154a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4015b8:	4b1b      	ldr	r3, [pc, #108]	; (401628 <SystemCoreClockUpdate+0xf0>)
  4015ba:	6a1b      	ldr	r3, [r3, #32]
  4015bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4015c0:	d016      	beq.n	4015f0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4015c2:	4a1c      	ldr	r2, [pc, #112]	; (401634 <SystemCoreClockUpdate+0xfc>)
  4015c4:	4b19      	ldr	r3, [pc, #100]	; (40162c <SystemCoreClockUpdate+0xf4>)
  4015c6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4015c8:	4b17      	ldr	r3, [pc, #92]	; (401628 <SystemCoreClockUpdate+0xf0>)
  4015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015cc:	f003 0303 	and.w	r3, r3, #3
  4015d0:	2b02      	cmp	r3, #2
  4015d2:	d1ba      	bne.n	40154a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015d4:	4a14      	ldr	r2, [pc, #80]	; (401628 <SystemCoreClockUpdate+0xf0>)
  4015d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4015d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4015da:	4814      	ldr	r0, [pc, #80]	; (40162c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4015dc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4015e0:	6803      	ldr	r3, [r0, #0]
  4015e2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4015e6:	b2d2      	uxtb	r2, r2
  4015e8:	fbb3 f3f2 	udiv	r3, r3, r2
  4015ec:	6003      	str	r3, [r0, #0]
  4015ee:	e7ac      	b.n	40154a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015f0:	4a11      	ldr	r2, [pc, #68]	; (401638 <SystemCoreClockUpdate+0x100>)
  4015f2:	4b0e      	ldr	r3, [pc, #56]	; (40162c <SystemCoreClockUpdate+0xf4>)
  4015f4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4015f6:	4b0c      	ldr	r3, [pc, #48]	; (401628 <SystemCoreClockUpdate+0xf0>)
  4015f8:	6a1b      	ldr	r3, [r3, #32]
  4015fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015fe:	2b10      	cmp	r3, #16
  401600:	d005      	beq.n	40160e <SystemCoreClockUpdate+0xd6>
  401602:	2b20      	cmp	r3, #32
  401604:	d1e0      	bne.n	4015c8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401606:	4a0b      	ldr	r2, [pc, #44]	; (401634 <SystemCoreClockUpdate+0xfc>)
  401608:	4b08      	ldr	r3, [pc, #32]	; (40162c <SystemCoreClockUpdate+0xf4>)
  40160a:	601a      	str	r2, [r3, #0]
          break;
  40160c:	e7dc      	b.n	4015c8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40160e:	4a0b      	ldr	r2, [pc, #44]	; (40163c <SystemCoreClockUpdate+0x104>)
  401610:	4b06      	ldr	r3, [pc, #24]	; (40162c <SystemCoreClockUpdate+0xf4>)
  401612:	601a      	str	r2, [r3, #0]
          break;
  401614:	e7d8      	b.n	4015c8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401616:	4a05      	ldr	r2, [pc, #20]	; (40162c <SystemCoreClockUpdate+0xf4>)
  401618:	6813      	ldr	r3, [r2, #0]
  40161a:	4909      	ldr	r1, [pc, #36]	; (401640 <SystemCoreClockUpdate+0x108>)
  40161c:	fba1 1303 	umull	r1, r3, r1, r3
  401620:	085b      	lsrs	r3, r3, #1
  401622:	6013      	str	r3, [r2, #0]
  401624:	4770      	bx	lr
  401626:	bf00      	nop
  401628:	400e0600 	.word	0x400e0600
  40162c:	2040001c 	.word	0x2040001c
  401630:	400e1810 	.word	0x400e1810
  401634:	00b71b00 	.word	0x00b71b00
  401638:	003d0900 	.word	0x003d0900
  40163c:	007a1200 	.word	0x007a1200
  401640:	aaaaaaab 	.word	0xaaaaaaab

00401644 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401644:	4b16      	ldr	r3, [pc, #88]	; (4016a0 <system_init_flash+0x5c>)
  401646:	4298      	cmp	r0, r3
  401648:	d913      	bls.n	401672 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40164a:	4b16      	ldr	r3, [pc, #88]	; (4016a4 <system_init_flash+0x60>)
  40164c:	4298      	cmp	r0, r3
  40164e:	d915      	bls.n	40167c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401650:	4b15      	ldr	r3, [pc, #84]	; (4016a8 <system_init_flash+0x64>)
  401652:	4298      	cmp	r0, r3
  401654:	d916      	bls.n	401684 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401656:	4b15      	ldr	r3, [pc, #84]	; (4016ac <system_init_flash+0x68>)
  401658:	4298      	cmp	r0, r3
  40165a:	d917      	bls.n	40168c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40165c:	4b14      	ldr	r3, [pc, #80]	; (4016b0 <system_init_flash+0x6c>)
  40165e:	4298      	cmp	r0, r3
  401660:	d918      	bls.n	401694 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401662:	4b14      	ldr	r3, [pc, #80]	; (4016b4 <system_init_flash+0x70>)
  401664:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401666:	bf94      	ite	ls
  401668:	4a13      	ldrls	r2, [pc, #76]	; (4016b8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40166a:	4a14      	ldrhi	r2, [pc, #80]	; (4016bc <system_init_flash+0x78>)
  40166c:	4b14      	ldr	r3, [pc, #80]	; (4016c0 <system_init_flash+0x7c>)
  40166e:	601a      	str	r2, [r3, #0]
  401670:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401672:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401676:	4b12      	ldr	r3, [pc, #72]	; (4016c0 <system_init_flash+0x7c>)
  401678:	601a      	str	r2, [r3, #0]
  40167a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40167c:	4a11      	ldr	r2, [pc, #68]	; (4016c4 <system_init_flash+0x80>)
  40167e:	4b10      	ldr	r3, [pc, #64]	; (4016c0 <system_init_flash+0x7c>)
  401680:	601a      	str	r2, [r3, #0]
  401682:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401684:	4a10      	ldr	r2, [pc, #64]	; (4016c8 <system_init_flash+0x84>)
  401686:	4b0e      	ldr	r3, [pc, #56]	; (4016c0 <system_init_flash+0x7c>)
  401688:	601a      	str	r2, [r3, #0]
  40168a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40168c:	4a0f      	ldr	r2, [pc, #60]	; (4016cc <system_init_flash+0x88>)
  40168e:	4b0c      	ldr	r3, [pc, #48]	; (4016c0 <system_init_flash+0x7c>)
  401690:	601a      	str	r2, [r3, #0]
  401692:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401694:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401698:	4b09      	ldr	r3, [pc, #36]	; (4016c0 <system_init_flash+0x7c>)
  40169a:	601a      	str	r2, [r3, #0]
  40169c:	4770      	bx	lr
  40169e:	bf00      	nop
  4016a0:	015ef3bf 	.word	0x015ef3bf
  4016a4:	02bde77f 	.word	0x02bde77f
  4016a8:	041cdb3f 	.word	0x041cdb3f
  4016ac:	057bceff 	.word	0x057bceff
  4016b0:	06dac2bf 	.word	0x06dac2bf
  4016b4:	0839b67f 	.word	0x0839b67f
  4016b8:	04000500 	.word	0x04000500
  4016bc:	04000600 	.word	0x04000600
  4016c0:	400e0c00 	.word	0x400e0c00
  4016c4:	04000100 	.word	0x04000100
  4016c8:	04000200 	.word	0x04000200
  4016cc:	04000300 	.word	0x04000300

004016d0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4016d0:	4b0a      	ldr	r3, [pc, #40]	; (4016fc <_sbrk+0x2c>)
  4016d2:	681b      	ldr	r3, [r3, #0]
  4016d4:	b153      	cbz	r3, 4016ec <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4016d6:	4b09      	ldr	r3, [pc, #36]	; (4016fc <_sbrk+0x2c>)
  4016d8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4016da:	181a      	adds	r2, r3, r0
  4016dc:	4908      	ldr	r1, [pc, #32]	; (401700 <_sbrk+0x30>)
  4016de:	4291      	cmp	r1, r2
  4016e0:	db08      	blt.n	4016f4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4016e2:	4610      	mov	r0, r2
  4016e4:	4a05      	ldr	r2, [pc, #20]	; (4016fc <_sbrk+0x2c>)
  4016e6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4016e8:	4618      	mov	r0, r3
  4016ea:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4016ec:	4a05      	ldr	r2, [pc, #20]	; (401704 <_sbrk+0x34>)
  4016ee:	4b03      	ldr	r3, [pc, #12]	; (4016fc <_sbrk+0x2c>)
  4016f0:	601a      	str	r2, [r3, #0]
  4016f2:	e7f0      	b.n	4016d6 <_sbrk+0x6>
		return (caddr_t) -1;	
  4016f4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4016f8:	4770      	bx	lr
  4016fa:	bf00      	nop
  4016fc:	20400c70 	.word	0x20400c70
  401700:	2045fffc 	.word	0x2045fffc
  401704:	20403068 	.word	0x20403068

00401708 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401708:	f04f 30ff 	mov.w	r0, #4294967295
  40170c:	4770      	bx	lr

0040170e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40170e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401712:	604b      	str	r3, [r1, #4]

	return 0;
}
  401714:	2000      	movs	r0, #0
  401716:	4770      	bx	lr

00401718 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401718:	2001      	movs	r0, #1
  40171a:	4770      	bx	lr

0040171c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40171c:	2000      	movs	r0, #0
  40171e:	4770      	bx	lr

00401720 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401720:	f100 0308 	add.w	r3, r0, #8
  401724:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401726:	f04f 32ff 	mov.w	r2, #4294967295
  40172a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40172c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40172e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401730:	2300      	movs	r3, #0
  401732:	6003      	str	r3, [r0, #0]
  401734:	4770      	bx	lr

00401736 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401736:	2300      	movs	r3, #0
  401738:	6103      	str	r3, [r0, #16]
  40173a:	4770      	bx	lr

0040173c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40173c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40173e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401740:	689a      	ldr	r2, [r3, #8]
  401742:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401744:	689a      	ldr	r2, [r3, #8]
  401746:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401748:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40174a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40174c:	6803      	ldr	r3, [r0, #0]
  40174e:	3301      	adds	r3, #1
  401750:	6003      	str	r3, [r0, #0]
  401752:	4770      	bx	lr

00401754 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401754:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401756:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401758:	f1b5 3fff 	cmp.w	r5, #4294967295
  40175c:	d002      	beq.n	401764 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40175e:	f100 0208 	add.w	r2, r0, #8
  401762:	e002      	b.n	40176a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401764:	6902      	ldr	r2, [r0, #16]
  401766:	e004      	b.n	401772 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401768:	461a      	mov	r2, r3
  40176a:	6853      	ldr	r3, [r2, #4]
  40176c:	681c      	ldr	r4, [r3, #0]
  40176e:	42a5      	cmp	r5, r4
  401770:	d2fa      	bcs.n	401768 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401772:	6853      	ldr	r3, [r2, #4]
  401774:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401776:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401778:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40177a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40177c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40177e:	6803      	ldr	r3, [r0, #0]
  401780:	3301      	adds	r3, #1
  401782:	6003      	str	r3, [r0, #0]
}
  401784:	bc30      	pop	{r4, r5}
  401786:	4770      	bx	lr

00401788 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401788:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40178a:	6842      	ldr	r2, [r0, #4]
  40178c:	6881      	ldr	r1, [r0, #8]
  40178e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401790:	6882      	ldr	r2, [r0, #8]
  401792:	6841      	ldr	r1, [r0, #4]
  401794:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401796:	685a      	ldr	r2, [r3, #4]
  401798:	4290      	cmp	r0, r2
  40179a:	d005      	beq.n	4017a8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  40179c:	2200      	movs	r2, #0
  40179e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4017a0:	6818      	ldr	r0, [r3, #0]
  4017a2:	3801      	subs	r0, #1
  4017a4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4017a6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4017a8:	6882      	ldr	r2, [r0, #8]
  4017aa:	605a      	str	r2, [r3, #4]
  4017ac:	e7f6      	b.n	40179c <uxListRemove+0x14>
	...

004017b0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4017b0:	4b0d      	ldr	r3, [pc, #52]	; (4017e8 <prvTaskExitError+0x38>)
  4017b2:	681b      	ldr	r3, [r3, #0]
  4017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017b8:	d00a      	beq.n	4017d0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4017ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017be:	b672      	cpsid	i
  4017c0:	f383 8811 	msr	BASEPRI, r3
  4017c4:	f3bf 8f6f 	isb	sy
  4017c8:	f3bf 8f4f 	dsb	sy
  4017cc:	b662      	cpsie	i
  4017ce:	e7fe      	b.n	4017ce <prvTaskExitError+0x1e>
  4017d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017d4:	b672      	cpsid	i
  4017d6:	f383 8811 	msr	BASEPRI, r3
  4017da:	f3bf 8f6f 	isb	sy
  4017de:	f3bf 8f4f 	dsb	sy
  4017e2:	b662      	cpsie	i
  4017e4:	e7fe      	b.n	4017e4 <prvTaskExitError+0x34>
  4017e6:	bf00      	nop
  4017e8:	20400020 	.word	0x20400020

004017ec <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4017ec:	4806      	ldr	r0, [pc, #24]	; (401808 <prvPortStartFirstTask+0x1c>)
  4017ee:	6800      	ldr	r0, [r0, #0]
  4017f0:	6800      	ldr	r0, [r0, #0]
  4017f2:	f380 8808 	msr	MSP, r0
  4017f6:	b662      	cpsie	i
  4017f8:	b661      	cpsie	f
  4017fa:	f3bf 8f4f 	dsb	sy
  4017fe:	f3bf 8f6f 	isb	sy
  401802:	df00      	svc	0
  401804:	bf00      	nop
  401806:	0000      	.short	0x0000
  401808:	e000ed08 	.word	0xe000ed08

0040180c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40180c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40181c <vPortEnableVFP+0x10>
  401810:	6801      	ldr	r1, [r0, #0]
  401812:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401816:	6001      	str	r1, [r0, #0]
  401818:	4770      	bx	lr
  40181a:	0000      	.short	0x0000
  40181c:	e000ed88 	.word	0xe000ed88

00401820 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401824:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401828:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40182c:	4b05      	ldr	r3, [pc, #20]	; (401844 <pxPortInitialiseStack+0x24>)
  40182e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401832:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401836:	f06f 0302 	mvn.w	r3, #2
  40183a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40183e:	3844      	subs	r0, #68	; 0x44
  401840:	4770      	bx	lr
  401842:	bf00      	nop
  401844:	004017b1 	.word	0x004017b1

00401848 <SVC_Handler>:
	__asm volatile (
  401848:	4b06      	ldr	r3, [pc, #24]	; (401864 <pxCurrentTCBConst2>)
  40184a:	6819      	ldr	r1, [r3, #0]
  40184c:	6808      	ldr	r0, [r1, #0]
  40184e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401852:	f380 8809 	msr	PSP, r0
  401856:	f3bf 8f6f 	isb	sy
  40185a:	f04f 0000 	mov.w	r0, #0
  40185e:	f380 8811 	msr	BASEPRI, r0
  401862:	4770      	bx	lr

00401864 <pxCurrentTCBConst2>:
  401864:	20400c7c 	.word	0x20400c7c
  401868:	4770      	bx	lr
  40186a:	bf00      	nop

0040186c <vPortEnterCritical>:
  40186c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401870:	b672      	cpsid	i
  401872:	f383 8811 	msr	BASEPRI, r3
  401876:	f3bf 8f6f 	isb	sy
  40187a:	f3bf 8f4f 	dsb	sy
  40187e:	b662      	cpsie	i
	uxCriticalNesting++;
  401880:	4a0b      	ldr	r2, [pc, #44]	; (4018b0 <vPortEnterCritical+0x44>)
  401882:	6813      	ldr	r3, [r2, #0]
  401884:	3301      	adds	r3, #1
  401886:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401888:	2b01      	cmp	r3, #1
  40188a:	d10f      	bne.n	4018ac <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40188c:	4b09      	ldr	r3, [pc, #36]	; (4018b4 <vPortEnterCritical+0x48>)
  40188e:	681b      	ldr	r3, [r3, #0]
  401890:	f013 0fff 	tst.w	r3, #255	; 0xff
  401894:	d00a      	beq.n	4018ac <vPortEnterCritical+0x40>
  401896:	f04f 0380 	mov.w	r3, #128	; 0x80
  40189a:	b672      	cpsid	i
  40189c:	f383 8811 	msr	BASEPRI, r3
  4018a0:	f3bf 8f6f 	isb	sy
  4018a4:	f3bf 8f4f 	dsb	sy
  4018a8:	b662      	cpsie	i
  4018aa:	e7fe      	b.n	4018aa <vPortEnterCritical+0x3e>
  4018ac:	4770      	bx	lr
  4018ae:	bf00      	nop
  4018b0:	20400020 	.word	0x20400020
  4018b4:	e000ed04 	.word	0xe000ed04

004018b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4018b8:	4b0a      	ldr	r3, [pc, #40]	; (4018e4 <vPortExitCritical+0x2c>)
  4018ba:	681b      	ldr	r3, [r3, #0]
  4018bc:	b953      	cbnz	r3, 4018d4 <vPortExitCritical+0x1c>
  4018be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018c2:	b672      	cpsid	i
  4018c4:	f383 8811 	msr	BASEPRI, r3
  4018c8:	f3bf 8f6f 	isb	sy
  4018cc:	f3bf 8f4f 	dsb	sy
  4018d0:	b662      	cpsie	i
  4018d2:	e7fe      	b.n	4018d2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4018d4:	3b01      	subs	r3, #1
  4018d6:	4a03      	ldr	r2, [pc, #12]	; (4018e4 <vPortExitCritical+0x2c>)
  4018d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4018da:	b90b      	cbnz	r3, 4018e0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4018dc:	f383 8811 	msr	BASEPRI, r3
  4018e0:	4770      	bx	lr
  4018e2:	bf00      	nop
  4018e4:	20400020 	.word	0x20400020

004018e8 <PendSV_Handler>:
	__asm volatile
  4018e8:	f3ef 8009 	mrs	r0, PSP
  4018ec:	f3bf 8f6f 	isb	sy
  4018f0:	4b15      	ldr	r3, [pc, #84]	; (401948 <pxCurrentTCBConst>)
  4018f2:	681a      	ldr	r2, [r3, #0]
  4018f4:	f01e 0f10 	tst.w	lr, #16
  4018f8:	bf08      	it	eq
  4018fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4018fe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401902:	6010      	str	r0, [r2, #0]
  401904:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401908:	f04f 0080 	mov.w	r0, #128	; 0x80
  40190c:	b672      	cpsid	i
  40190e:	f380 8811 	msr	BASEPRI, r0
  401912:	f3bf 8f4f 	dsb	sy
  401916:	f3bf 8f6f 	isb	sy
  40191a:	b662      	cpsie	i
  40191c:	f001 f890 	bl	402a40 <vTaskSwitchContext>
  401920:	f04f 0000 	mov.w	r0, #0
  401924:	f380 8811 	msr	BASEPRI, r0
  401928:	bc08      	pop	{r3}
  40192a:	6819      	ldr	r1, [r3, #0]
  40192c:	6808      	ldr	r0, [r1, #0]
  40192e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401932:	f01e 0f10 	tst.w	lr, #16
  401936:	bf08      	it	eq
  401938:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40193c:	f380 8809 	msr	PSP, r0
  401940:	f3bf 8f6f 	isb	sy
  401944:	4770      	bx	lr
  401946:	bf00      	nop

00401948 <pxCurrentTCBConst>:
  401948:	20400c7c 	.word	0x20400c7c
  40194c:	4770      	bx	lr
  40194e:	bf00      	nop

00401950 <SysTick_Handler>:
{
  401950:	b508      	push	{r3, lr}
	__asm volatile
  401952:	f3ef 8311 	mrs	r3, BASEPRI
  401956:	f04f 0280 	mov.w	r2, #128	; 0x80
  40195a:	b672      	cpsid	i
  40195c:	f382 8811 	msr	BASEPRI, r2
  401960:	f3bf 8f6f 	isb	sy
  401964:	f3bf 8f4f 	dsb	sy
  401968:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40196a:	4b05      	ldr	r3, [pc, #20]	; (401980 <SysTick_Handler+0x30>)
  40196c:	4798      	blx	r3
  40196e:	b118      	cbz	r0, 401978 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401974:	4b03      	ldr	r3, [pc, #12]	; (401984 <SysTick_Handler+0x34>)
  401976:	601a      	str	r2, [r3, #0]
	__asm volatile
  401978:	2300      	movs	r3, #0
  40197a:	f383 8811 	msr	BASEPRI, r3
  40197e:	bd08      	pop	{r3, pc}
  401980:	004026ad 	.word	0x004026ad
  401984:	e000ed04 	.word	0xe000ed04

00401988 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401988:	4a03      	ldr	r2, [pc, #12]	; (401998 <vPortSetupTimerInterrupt+0x10>)
  40198a:	4b04      	ldr	r3, [pc, #16]	; (40199c <vPortSetupTimerInterrupt+0x14>)
  40198c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40198e:	2207      	movs	r2, #7
  401990:	3b04      	subs	r3, #4
  401992:	601a      	str	r2, [r3, #0]
  401994:	4770      	bx	lr
  401996:	bf00      	nop
  401998:	000927bf 	.word	0x000927bf
  40199c:	e000e014 	.word	0xe000e014

004019a0 <xPortStartScheduler>:
{
  4019a0:	b500      	push	{lr}
  4019a2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4019a4:	4b25      	ldr	r3, [pc, #148]	; (401a3c <xPortStartScheduler+0x9c>)
  4019a6:	781a      	ldrb	r2, [r3, #0]
  4019a8:	b2d2      	uxtb	r2, r2
  4019aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4019ac:	22ff      	movs	r2, #255	; 0xff
  4019ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4019b0:	781b      	ldrb	r3, [r3, #0]
  4019b2:	b2db      	uxtb	r3, r3
  4019b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4019b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4019bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4019c0:	4a1f      	ldr	r2, [pc, #124]	; (401a40 <xPortStartScheduler+0xa0>)
  4019c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4019c4:	2207      	movs	r2, #7
  4019c6:	4b1f      	ldr	r3, [pc, #124]	; (401a44 <xPortStartScheduler+0xa4>)
  4019c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4019ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4019ce:	f013 0f80 	tst.w	r3, #128	; 0x80
  4019d2:	d010      	beq.n	4019f6 <xPortStartScheduler+0x56>
  4019d4:	2206      	movs	r2, #6
  4019d6:	e000      	b.n	4019da <xPortStartScheduler+0x3a>
  4019d8:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4019da:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4019de:	005b      	lsls	r3, r3, #1
  4019e0:	b2db      	uxtb	r3, r3
  4019e2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4019e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4019ea:	1e51      	subs	r1, r2, #1
  4019ec:	f013 0f80 	tst.w	r3, #128	; 0x80
  4019f0:	d1f2      	bne.n	4019d8 <xPortStartScheduler+0x38>
  4019f2:	4b14      	ldr	r3, [pc, #80]	; (401a44 <xPortStartScheduler+0xa4>)
  4019f4:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4019f6:	4a13      	ldr	r2, [pc, #76]	; (401a44 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4019f8:	6813      	ldr	r3, [r2, #0]
  4019fa:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4019fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401a00:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401a02:	9b01      	ldr	r3, [sp, #4]
  401a04:	b2db      	uxtb	r3, r3
  401a06:	4a0d      	ldr	r2, [pc, #52]	; (401a3c <xPortStartScheduler+0x9c>)
  401a08:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401a0a:	4b0f      	ldr	r3, [pc, #60]	; (401a48 <xPortStartScheduler+0xa8>)
  401a0c:	681a      	ldr	r2, [r3, #0]
  401a0e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401a12:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401a14:	681a      	ldr	r2, [r3, #0]
  401a16:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401a1a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401a1c:	4b0b      	ldr	r3, [pc, #44]	; (401a4c <xPortStartScheduler+0xac>)
  401a1e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401a20:	2200      	movs	r2, #0
  401a22:	4b0b      	ldr	r3, [pc, #44]	; (401a50 <xPortStartScheduler+0xb0>)
  401a24:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401a26:	4b0b      	ldr	r3, [pc, #44]	; (401a54 <xPortStartScheduler+0xb4>)
  401a28:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401a2a:	4a0b      	ldr	r2, [pc, #44]	; (401a58 <xPortStartScheduler+0xb8>)
  401a2c:	6813      	ldr	r3, [r2, #0]
  401a2e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401a32:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401a34:	4b09      	ldr	r3, [pc, #36]	; (401a5c <xPortStartScheduler+0xbc>)
  401a36:	4798      	blx	r3
	prvTaskExitError();
  401a38:	4b09      	ldr	r3, [pc, #36]	; (401a60 <xPortStartScheduler+0xc0>)
  401a3a:	4798      	blx	r3
  401a3c:	e000e400 	.word	0xe000e400
  401a40:	20400c74 	.word	0x20400c74
  401a44:	20400c78 	.word	0x20400c78
  401a48:	e000ed20 	.word	0xe000ed20
  401a4c:	00401989 	.word	0x00401989
  401a50:	20400020 	.word	0x20400020
  401a54:	0040180d 	.word	0x0040180d
  401a58:	e000ef34 	.word	0xe000ef34
  401a5c:	004017ed 	.word	0x004017ed
  401a60:	004017b1 	.word	0x004017b1

00401a64 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401a64:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401a68:	2b0f      	cmp	r3, #15
  401a6a:	d911      	bls.n	401a90 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401a6c:	4a12      	ldr	r2, [pc, #72]	; (401ab8 <vPortValidateInterruptPriority+0x54>)
  401a6e:	5c9b      	ldrb	r3, [r3, r2]
  401a70:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401a72:	4a12      	ldr	r2, [pc, #72]	; (401abc <vPortValidateInterruptPriority+0x58>)
  401a74:	7812      	ldrb	r2, [r2, #0]
  401a76:	429a      	cmp	r2, r3
  401a78:	d90a      	bls.n	401a90 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401a7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a7e:	b672      	cpsid	i
  401a80:	f383 8811 	msr	BASEPRI, r3
  401a84:	f3bf 8f6f 	isb	sy
  401a88:	f3bf 8f4f 	dsb	sy
  401a8c:	b662      	cpsie	i
  401a8e:	e7fe      	b.n	401a8e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401a90:	4b0b      	ldr	r3, [pc, #44]	; (401ac0 <vPortValidateInterruptPriority+0x5c>)
  401a92:	681b      	ldr	r3, [r3, #0]
  401a94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401a98:	4a0a      	ldr	r2, [pc, #40]	; (401ac4 <vPortValidateInterruptPriority+0x60>)
  401a9a:	6812      	ldr	r2, [r2, #0]
  401a9c:	4293      	cmp	r3, r2
  401a9e:	d90a      	bls.n	401ab6 <vPortValidateInterruptPriority+0x52>
  401aa0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aa4:	b672      	cpsid	i
  401aa6:	f383 8811 	msr	BASEPRI, r3
  401aaa:	f3bf 8f6f 	isb	sy
  401aae:	f3bf 8f4f 	dsb	sy
  401ab2:	b662      	cpsie	i
  401ab4:	e7fe      	b.n	401ab4 <vPortValidateInterruptPriority+0x50>
  401ab6:	4770      	bx	lr
  401ab8:	e000e3f0 	.word	0xe000e3f0
  401abc:	20400c74 	.word	0x20400c74
  401ac0:	e000ed0c 	.word	0xe000ed0c
  401ac4:	20400c78 	.word	0x20400c78

00401ac8 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401ac8:	b510      	push	{r4, lr}
  401aca:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401acc:	4b06      	ldr	r3, [pc, #24]	; (401ae8 <pvPortMalloc+0x20>)
  401ace:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401ad0:	4620      	mov	r0, r4
  401ad2:	4b06      	ldr	r3, [pc, #24]	; (401aec <pvPortMalloc+0x24>)
  401ad4:	4798      	blx	r3
  401ad6:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401ad8:	4b05      	ldr	r3, [pc, #20]	; (401af0 <pvPortMalloc+0x28>)
  401ada:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401adc:	b10c      	cbz	r4, 401ae2 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401ade:	4620      	mov	r0, r4
  401ae0:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401ae2:	4b04      	ldr	r3, [pc, #16]	; (401af4 <pvPortMalloc+0x2c>)
  401ae4:	4798      	blx	r3
	return pvReturn;
  401ae6:	e7fa      	b.n	401ade <pvPortMalloc+0x16>
  401ae8:	00402691 	.word	0x00402691
  401aec:	00405d21 	.word	0x00405d21
  401af0:	004027f9 	.word	0x004027f9
  401af4:	004036b7 	.word	0x004036b7

00401af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401af8:	b148      	cbz	r0, 401b0e <vPortFree+0x16>
{
  401afa:	b510      	push	{r4, lr}
  401afc:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401afe:	4b04      	ldr	r3, [pc, #16]	; (401b10 <vPortFree+0x18>)
  401b00:	4798      	blx	r3
		{
			free( pv );
  401b02:	4620      	mov	r0, r4
  401b04:	4b03      	ldr	r3, [pc, #12]	; (401b14 <vPortFree+0x1c>)
  401b06:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401b08:	4b03      	ldr	r3, [pc, #12]	; (401b18 <vPortFree+0x20>)
  401b0a:	4798      	blx	r3
  401b0c:	bd10      	pop	{r4, pc}
  401b0e:	4770      	bx	lr
  401b10:	00402691 	.word	0x00402691
  401b14:	00405d31 	.word	0x00405d31
  401b18:	004027f9 	.word	0x004027f9

00401b1c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401b1c:	b538      	push	{r3, r4, r5, lr}
  401b1e:	4604      	mov	r4, r0
  401b20:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401b22:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b24:	b95a      	cbnz	r2, 401b3e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b26:	6803      	ldr	r3, [r0, #0]
  401b28:	2b00      	cmp	r3, #0
  401b2a:	d12e      	bne.n	401b8a <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401b2c:	6840      	ldr	r0, [r0, #4]
  401b2e:	4b1b      	ldr	r3, [pc, #108]	; (401b9c <prvCopyDataToQueue+0x80>)
  401b30:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401b32:	2300      	movs	r3, #0
  401b34:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b38:	3301      	adds	r3, #1
  401b3a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401b3c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401b3e:	b96d      	cbnz	r5, 401b5c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401b40:	6880      	ldr	r0, [r0, #8]
  401b42:	4b17      	ldr	r3, [pc, #92]	; (401ba0 <prvCopyDataToQueue+0x84>)
  401b44:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401b46:	68a3      	ldr	r3, [r4, #8]
  401b48:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401b4a:	4413      	add	r3, r2
  401b4c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401b4e:	6862      	ldr	r2, [r4, #4]
  401b50:	4293      	cmp	r3, r2
  401b52:	d31c      	bcc.n	401b8e <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401b54:	6823      	ldr	r3, [r4, #0]
  401b56:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401b58:	2000      	movs	r0, #0
  401b5a:	e7ec      	b.n	401b36 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b5c:	68c0      	ldr	r0, [r0, #12]
  401b5e:	4b10      	ldr	r3, [pc, #64]	; (401ba0 <prvCopyDataToQueue+0x84>)
  401b60:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401b64:	425b      	negs	r3, r3
  401b66:	68e2      	ldr	r2, [r4, #12]
  401b68:	441a      	add	r2, r3
  401b6a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401b6c:	6821      	ldr	r1, [r4, #0]
  401b6e:	428a      	cmp	r2, r1
  401b70:	d202      	bcs.n	401b78 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401b72:	6862      	ldr	r2, [r4, #4]
  401b74:	4413      	add	r3, r2
  401b76:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401b78:	2d02      	cmp	r5, #2
  401b7a:	d10a      	bne.n	401b92 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b7e:	b153      	cbz	r3, 401b96 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b82:	3b01      	subs	r3, #1
  401b84:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401b86:	2000      	movs	r0, #0
  401b88:	e7d5      	b.n	401b36 <prvCopyDataToQueue+0x1a>
  401b8a:	2000      	movs	r0, #0
  401b8c:	e7d3      	b.n	401b36 <prvCopyDataToQueue+0x1a>
  401b8e:	2000      	movs	r0, #0
  401b90:	e7d1      	b.n	401b36 <prvCopyDataToQueue+0x1a>
  401b92:	2000      	movs	r0, #0
  401b94:	e7cf      	b.n	401b36 <prvCopyDataToQueue+0x1a>
  401b96:	2000      	movs	r0, #0
  401b98:	e7cd      	b.n	401b36 <prvCopyDataToQueue+0x1a>
  401b9a:	bf00      	nop
  401b9c:	00402e41 	.word	0x00402e41
  401ba0:	004062a1 	.word	0x004062a1

00401ba4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401ba4:	b530      	push	{r4, r5, lr}
  401ba6:	b083      	sub	sp, #12
  401ba8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401baa:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401bac:	b174      	cbz	r4, 401bcc <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401bae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401bb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401bb2:	429a      	cmp	r2, r3
  401bb4:	d315      	bcc.n	401be2 <prvNotifyQueueSetContainer+0x3e>
  401bb6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bba:	b672      	cpsid	i
  401bbc:	f383 8811 	msr	BASEPRI, r3
  401bc0:	f3bf 8f6f 	isb	sy
  401bc4:	f3bf 8f4f 	dsb	sy
  401bc8:	b662      	cpsie	i
  401bca:	e7fe      	b.n	401bca <prvNotifyQueueSetContainer+0x26>
  401bcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bd0:	b672      	cpsid	i
  401bd2:	f383 8811 	msr	BASEPRI, r3
  401bd6:	f3bf 8f6f 	isb	sy
  401bda:	f3bf 8f4f 	dsb	sy
  401bde:	b662      	cpsie	i
  401be0:	e7fe      	b.n	401be0 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401be2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401be4:	4293      	cmp	r3, r2
  401be6:	d803      	bhi.n	401bf0 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401be8:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401bea:	4628      	mov	r0, r5
  401bec:	b003      	add	sp, #12
  401bee:	bd30      	pop	{r4, r5, pc}
  401bf0:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401bf2:	a901      	add	r1, sp, #4
  401bf4:	4620      	mov	r0, r4
  401bf6:	4b0b      	ldr	r3, [pc, #44]	; (401c24 <prvNotifyQueueSetContainer+0x80>)
  401bf8:	4798      	blx	r3
  401bfa:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401bfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c02:	d10a      	bne.n	401c1a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c06:	2b00      	cmp	r3, #0
  401c08:	d0ef      	beq.n	401bea <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401c0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c0e:	4b06      	ldr	r3, [pc, #24]	; (401c28 <prvNotifyQueueSetContainer+0x84>)
  401c10:	4798      	blx	r3
  401c12:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401c14:	bf18      	it	ne
  401c16:	2501      	movne	r5, #1
  401c18:	e7e7      	b.n	401bea <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401c1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c1c:	3301      	adds	r3, #1
  401c1e:	64a3      	str	r3, [r4, #72]	; 0x48
  401c20:	e7e3      	b.n	401bea <prvNotifyQueueSetContainer+0x46>
  401c22:	bf00      	nop
  401c24:	00401b1d 	.word	0x00401b1d
  401c28:	00402c15 	.word	0x00402c15

00401c2c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401c2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401c2e:	b172      	cbz	r2, 401c4e <prvCopyDataFromQueue+0x22>
{
  401c30:	b510      	push	{r4, lr}
  401c32:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401c34:	68c4      	ldr	r4, [r0, #12]
  401c36:	4414      	add	r4, r2
  401c38:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401c3a:	6840      	ldr	r0, [r0, #4]
  401c3c:	4284      	cmp	r4, r0
  401c3e:	d301      	bcc.n	401c44 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401c40:	6818      	ldr	r0, [r3, #0]
  401c42:	60d8      	str	r0, [r3, #12]
  401c44:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401c46:	68d9      	ldr	r1, [r3, #12]
  401c48:	4b01      	ldr	r3, [pc, #4]	; (401c50 <prvCopyDataFromQueue+0x24>)
  401c4a:	4798      	blx	r3
  401c4c:	bd10      	pop	{r4, pc}
  401c4e:	4770      	bx	lr
  401c50:	004062a1 	.word	0x004062a1

00401c54 <prvUnlockQueue>:
{
  401c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c56:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401c58:	4b22      	ldr	r3, [pc, #136]	; (401ce4 <prvUnlockQueue+0x90>)
  401c5a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401c5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c5e:	2b00      	cmp	r3, #0
  401c60:	dd1b      	ble.n	401c9a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401c62:	4d21      	ldr	r5, [pc, #132]	; (401ce8 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401c64:	4f21      	ldr	r7, [pc, #132]	; (401cec <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401c66:	4e22      	ldr	r6, [pc, #136]	; (401cf0 <prvUnlockQueue+0x9c>)
  401c68:	e00b      	b.n	401c82 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c6c:	b1ab      	cbz	r3, 401c9a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401c6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c72:	47b0      	blx	r6
  401c74:	b978      	cbnz	r0, 401c96 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401c76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c78:	3b01      	subs	r3, #1
  401c7a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401c7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c7e:	2b00      	cmp	r3, #0
  401c80:	dd0b      	ble.n	401c9a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401c82:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401c84:	2b00      	cmp	r3, #0
  401c86:	d0f0      	beq.n	401c6a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401c88:	2100      	movs	r1, #0
  401c8a:	4620      	mov	r0, r4
  401c8c:	47a8      	blx	r5
  401c8e:	2801      	cmp	r0, #1
  401c90:	d1f1      	bne.n	401c76 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401c92:	47b8      	blx	r7
  401c94:	e7ef      	b.n	401c76 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401c96:	47b8      	blx	r7
  401c98:	e7ed      	b.n	401c76 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401c9a:	f04f 33ff 	mov.w	r3, #4294967295
  401c9e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401ca0:	4b14      	ldr	r3, [pc, #80]	; (401cf4 <prvUnlockQueue+0xa0>)
  401ca2:	4798      	blx	r3
	taskENTER_CRITICAL();
  401ca4:	4b0f      	ldr	r3, [pc, #60]	; (401ce4 <prvUnlockQueue+0x90>)
  401ca6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401ca8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401caa:	2b00      	cmp	r3, #0
  401cac:	dd14      	ble.n	401cd8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401cae:	6923      	ldr	r3, [r4, #16]
  401cb0:	b193      	cbz	r3, 401cd8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401cb2:	f104 0610 	add.w	r6, r4, #16
  401cb6:	4d0e      	ldr	r5, [pc, #56]	; (401cf0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401cb8:	4f0c      	ldr	r7, [pc, #48]	; (401cec <prvUnlockQueue+0x98>)
  401cba:	e007      	b.n	401ccc <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401cbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401cbe:	3b01      	subs	r3, #1
  401cc0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401cc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401cc4:	2b00      	cmp	r3, #0
  401cc6:	dd07      	ble.n	401cd8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401cc8:	6923      	ldr	r3, [r4, #16]
  401cca:	b12b      	cbz	r3, 401cd8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401ccc:	4630      	mov	r0, r6
  401cce:	47a8      	blx	r5
  401cd0:	2800      	cmp	r0, #0
  401cd2:	d0f3      	beq.n	401cbc <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401cd4:	47b8      	blx	r7
  401cd6:	e7f1      	b.n	401cbc <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401cd8:	f04f 33ff 	mov.w	r3, #4294967295
  401cdc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401cde:	4b05      	ldr	r3, [pc, #20]	; (401cf4 <prvUnlockQueue+0xa0>)
  401ce0:	4798      	blx	r3
  401ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ce4:	0040186d 	.word	0x0040186d
  401ce8:	00401ba5 	.word	0x00401ba5
  401cec:	00402d71 	.word	0x00402d71
  401cf0:	00402c15 	.word	0x00402c15
  401cf4:	004018b9 	.word	0x004018b9

00401cf8 <xQueueGenericReset>:
{
  401cf8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401cfa:	b308      	cbz	r0, 401d40 <xQueueGenericReset+0x48>
  401cfc:	4604      	mov	r4, r0
  401cfe:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401d00:	4b1d      	ldr	r3, [pc, #116]	; (401d78 <xQueueGenericReset+0x80>)
  401d02:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401d04:	6822      	ldr	r2, [r4, #0]
  401d06:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401d08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401d0a:	fb03 f301 	mul.w	r3, r3, r1
  401d0e:	18d0      	adds	r0, r2, r3
  401d10:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401d12:	2000      	movs	r0, #0
  401d14:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401d16:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401d18:	1a5b      	subs	r3, r3, r1
  401d1a:	4413      	add	r3, r2
  401d1c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401d1e:	f04f 33ff 	mov.w	r3, #4294967295
  401d22:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401d24:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401d26:	b9fd      	cbnz	r5, 401d68 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401d28:	6923      	ldr	r3, [r4, #16]
  401d2a:	b12b      	cbz	r3, 401d38 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401d2c:	f104 0010 	add.w	r0, r4, #16
  401d30:	4b12      	ldr	r3, [pc, #72]	; (401d7c <xQueueGenericReset+0x84>)
  401d32:	4798      	blx	r3
  401d34:	2801      	cmp	r0, #1
  401d36:	d00e      	beq.n	401d56 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401d38:	4b11      	ldr	r3, [pc, #68]	; (401d80 <xQueueGenericReset+0x88>)
  401d3a:	4798      	blx	r3
}
  401d3c:	2001      	movs	r0, #1
  401d3e:	bd38      	pop	{r3, r4, r5, pc}
  401d40:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d44:	b672      	cpsid	i
  401d46:	f383 8811 	msr	BASEPRI, r3
  401d4a:	f3bf 8f6f 	isb	sy
  401d4e:	f3bf 8f4f 	dsb	sy
  401d52:	b662      	cpsie	i
  401d54:	e7fe      	b.n	401d54 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d5a:	4b0a      	ldr	r3, [pc, #40]	; (401d84 <xQueueGenericReset+0x8c>)
  401d5c:	601a      	str	r2, [r3, #0]
  401d5e:	f3bf 8f4f 	dsb	sy
  401d62:	f3bf 8f6f 	isb	sy
  401d66:	e7e7      	b.n	401d38 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401d68:	f104 0010 	add.w	r0, r4, #16
  401d6c:	4d06      	ldr	r5, [pc, #24]	; (401d88 <xQueueGenericReset+0x90>)
  401d6e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401d70:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d74:	47a8      	blx	r5
  401d76:	e7df      	b.n	401d38 <xQueueGenericReset+0x40>
  401d78:	0040186d 	.word	0x0040186d
  401d7c:	00402c15 	.word	0x00402c15
  401d80:	004018b9 	.word	0x004018b9
  401d84:	e000ed04 	.word	0xe000ed04
  401d88:	00401721 	.word	0x00401721

00401d8c <xQueueGenericCreate>:
{
  401d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401d8e:	b950      	cbnz	r0, 401da6 <xQueueGenericCreate+0x1a>
  401d90:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d94:	b672      	cpsid	i
  401d96:	f383 8811 	msr	BASEPRI, r3
  401d9a:	f3bf 8f6f 	isb	sy
  401d9e:	f3bf 8f4f 	dsb	sy
  401da2:	b662      	cpsie	i
  401da4:	e7fe      	b.n	401da4 <xQueueGenericCreate+0x18>
  401da6:	4606      	mov	r6, r0
  401da8:	4617      	mov	r7, r2
  401daa:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401dac:	b189      	cbz	r1, 401dd2 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dae:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401db2:	3059      	adds	r0, #89	; 0x59
  401db4:	4b12      	ldr	r3, [pc, #72]	; (401e00 <xQueueGenericCreate+0x74>)
  401db6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401db8:	4604      	mov	r4, r0
  401dba:	b9e8      	cbnz	r0, 401df8 <xQueueGenericCreate+0x6c>
  401dbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dc0:	b672      	cpsid	i
  401dc2:	f383 8811 	msr	BASEPRI, r3
  401dc6:	f3bf 8f6f 	isb	sy
  401dca:	f3bf 8f4f 	dsb	sy
  401dce:	b662      	cpsie	i
  401dd0:	e7fe      	b.n	401dd0 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401dd2:	2058      	movs	r0, #88	; 0x58
  401dd4:	4b0a      	ldr	r3, [pc, #40]	; (401e00 <xQueueGenericCreate+0x74>)
  401dd6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401dd8:	4604      	mov	r4, r0
  401dda:	2800      	cmp	r0, #0
  401ddc:	d0ee      	beq.n	401dbc <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401dde:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401de0:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401de2:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401de4:	2101      	movs	r1, #1
  401de6:	4620      	mov	r0, r4
  401de8:	4b06      	ldr	r3, [pc, #24]	; (401e04 <xQueueGenericCreate+0x78>)
  401dea:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401dec:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401df0:	2300      	movs	r3, #0
  401df2:	6563      	str	r3, [r4, #84]	; 0x54
}
  401df4:	4620      	mov	r0, r4
  401df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401df8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401dfc:	6003      	str	r3, [r0, #0]
  401dfe:	e7ef      	b.n	401de0 <xQueueGenericCreate+0x54>
  401e00:	00401ac9 	.word	0x00401ac9
  401e04:	00401cf9 	.word	0x00401cf9

00401e08 <xQueueGenericSend>:
{
  401e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e0c:	b085      	sub	sp, #20
  401e0e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401e10:	b1b8      	cbz	r0, 401e42 <xQueueGenericSend+0x3a>
  401e12:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e14:	b301      	cbz	r1, 401e58 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401e16:	2b02      	cmp	r3, #2
  401e18:	d02c      	beq.n	401e74 <xQueueGenericSend+0x6c>
  401e1a:	461d      	mov	r5, r3
  401e1c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401e1e:	4b66      	ldr	r3, [pc, #408]	; (401fb8 <xQueueGenericSend+0x1b0>)
  401e20:	4798      	blx	r3
  401e22:	2800      	cmp	r0, #0
  401e24:	d134      	bne.n	401e90 <xQueueGenericSend+0x88>
  401e26:	9b01      	ldr	r3, [sp, #4]
  401e28:	2b00      	cmp	r3, #0
  401e2a:	d038      	beq.n	401e9e <xQueueGenericSend+0x96>
  401e2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e30:	b672      	cpsid	i
  401e32:	f383 8811 	msr	BASEPRI, r3
  401e36:	f3bf 8f6f 	isb	sy
  401e3a:	f3bf 8f4f 	dsb	sy
  401e3e:	b662      	cpsie	i
  401e40:	e7fe      	b.n	401e40 <xQueueGenericSend+0x38>
  401e42:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e46:	b672      	cpsid	i
  401e48:	f383 8811 	msr	BASEPRI, r3
  401e4c:	f3bf 8f6f 	isb	sy
  401e50:	f3bf 8f4f 	dsb	sy
  401e54:	b662      	cpsie	i
  401e56:	e7fe      	b.n	401e56 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e58:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401e5a:	2a00      	cmp	r2, #0
  401e5c:	d0db      	beq.n	401e16 <xQueueGenericSend+0xe>
  401e5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e62:	b672      	cpsid	i
  401e64:	f383 8811 	msr	BASEPRI, r3
  401e68:	f3bf 8f6f 	isb	sy
  401e6c:	f3bf 8f4f 	dsb	sy
  401e70:	b662      	cpsie	i
  401e72:	e7fe      	b.n	401e72 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401e74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401e76:	2a01      	cmp	r2, #1
  401e78:	d0cf      	beq.n	401e1a <xQueueGenericSend+0x12>
  401e7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e7e:	b672      	cpsid	i
  401e80:	f383 8811 	msr	BASEPRI, r3
  401e84:	f3bf 8f6f 	isb	sy
  401e88:	f3bf 8f4f 	dsb	sy
  401e8c:	b662      	cpsie	i
  401e8e:	e7fe      	b.n	401e8e <xQueueGenericSend+0x86>
  401e90:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401e92:	4e4a      	ldr	r6, [pc, #296]	; (401fbc <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401e94:	f8df a150 	ldr.w	sl, [pc, #336]	; 401fe8 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401e98:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401fc8 <xQueueGenericSend+0x1c0>
  401e9c:	e042      	b.n	401f24 <xQueueGenericSend+0x11c>
  401e9e:	2700      	movs	r7, #0
  401ea0:	e7f7      	b.n	401e92 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401ea2:	462a      	mov	r2, r5
  401ea4:	4641      	mov	r1, r8
  401ea6:	4620      	mov	r0, r4
  401ea8:	4b45      	ldr	r3, [pc, #276]	; (401fc0 <xQueueGenericSend+0x1b8>)
  401eaa:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401eac:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401eae:	b19b      	cbz	r3, 401ed8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401eb0:	4629      	mov	r1, r5
  401eb2:	4620      	mov	r0, r4
  401eb4:	4b43      	ldr	r3, [pc, #268]	; (401fc4 <xQueueGenericSend+0x1bc>)
  401eb6:	4798      	blx	r3
  401eb8:	2801      	cmp	r0, #1
  401eba:	d107      	bne.n	401ecc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ec0:	4b41      	ldr	r3, [pc, #260]	; (401fc8 <xQueueGenericSend+0x1c0>)
  401ec2:	601a      	str	r2, [r3, #0]
  401ec4:	f3bf 8f4f 	dsb	sy
  401ec8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401ecc:	4b3f      	ldr	r3, [pc, #252]	; (401fcc <xQueueGenericSend+0x1c4>)
  401ece:	4798      	blx	r3
				return pdPASS;
  401ed0:	2001      	movs	r0, #1
}
  401ed2:	b005      	add	sp, #20
  401ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401eda:	b173      	cbz	r3, 401efa <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401edc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ee0:	4b3b      	ldr	r3, [pc, #236]	; (401fd0 <xQueueGenericSend+0x1c8>)
  401ee2:	4798      	blx	r3
  401ee4:	2801      	cmp	r0, #1
  401ee6:	d1f1      	bne.n	401ecc <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401eec:	4b36      	ldr	r3, [pc, #216]	; (401fc8 <xQueueGenericSend+0x1c0>)
  401eee:	601a      	str	r2, [r3, #0]
  401ef0:	f3bf 8f4f 	dsb	sy
  401ef4:	f3bf 8f6f 	isb	sy
  401ef8:	e7e8      	b.n	401ecc <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401efa:	2800      	cmp	r0, #0
  401efc:	d0e6      	beq.n	401ecc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f02:	4b31      	ldr	r3, [pc, #196]	; (401fc8 <xQueueGenericSend+0x1c0>)
  401f04:	601a      	str	r2, [r3, #0]
  401f06:	f3bf 8f4f 	dsb	sy
  401f0a:	f3bf 8f6f 	isb	sy
  401f0e:	e7dd      	b.n	401ecc <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401f10:	4b2e      	ldr	r3, [pc, #184]	; (401fcc <xQueueGenericSend+0x1c4>)
  401f12:	4798      	blx	r3
					return errQUEUE_FULL;
  401f14:	2000      	movs	r0, #0
  401f16:	e7dc      	b.n	401ed2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401f18:	4620      	mov	r0, r4
  401f1a:	4b2e      	ldr	r3, [pc, #184]	; (401fd4 <xQueueGenericSend+0x1cc>)
  401f1c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401f1e:	4b2e      	ldr	r3, [pc, #184]	; (401fd8 <xQueueGenericSend+0x1d0>)
  401f20:	4798      	blx	r3
  401f22:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401f24:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401f26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401f28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f2a:	429a      	cmp	r2, r3
  401f2c:	d3b9      	bcc.n	401ea2 <xQueueGenericSend+0x9a>
  401f2e:	2d02      	cmp	r5, #2
  401f30:	d0b7      	beq.n	401ea2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401f32:	9b01      	ldr	r3, [sp, #4]
  401f34:	2b00      	cmp	r3, #0
  401f36:	d0eb      	beq.n	401f10 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401f38:	b90f      	cbnz	r7, 401f3e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401f3a:	a802      	add	r0, sp, #8
  401f3c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401f3e:	4b23      	ldr	r3, [pc, #140]	; (401fcc <xQueueGenericSend+0x1c4>)
  401f40:	4798      	blx	r3
		vTaskSuspendAll();
  401f42:	4b26      	ldr	r3, [pc, #152]	; (401fdc <xQueueGenericSend+0x1d4>)
  401f44:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401f46:	47b0      	blx	r6
  401f48:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f4e:	d101      	bne.n	401f54 <xQueueGenericSend+0x14c>
  401f50:	2300      	movs	r3, #0
  401f52:	6463      	str	r3, [r4, #68]	; 0x44
  401f54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f56:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f5a:	d101      	bne.n	401f60 <xQueueGenericSend+0x158>
  401f5c:	2300      	movs	r3, #0
  401f5e:	64a3      	str	r3, [r4, #72]	; 0x48
  401f60:	4b1a      	ldr	r3, [pc, #104]	; (401fcc <xQueueGenericSend+0x1c4>)
  401f62:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401f64:	a901      	add	r1, sp, #4
  401f66:	a802      	add	r0, sp, #8
  401f68:	4b1d      	ldr	r3, [pc, #116]	; (401fe0 <xQueueGenericSend+0x1d8>)
  401f6a:	4798      	blx	r3
  401f6c:	b9e0      	cbnz	r0, 401fa8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401f6e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401f70:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401f74:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401f76:	4b15      	ldr	r3, [pc, #84]	; (401fcc <xQueueGenericSend+0x1c4>)
  401f78:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401f7a:	45bb      	cmp	fp, r7
  401f7c:	d1cc      	bne.n	401f18 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401f7e:	9901      	ldr	r1, [sp, #4]
  401f80:	f104 0010 	add.w	r0, r4, #16
  401f84:	4b17      	ldr	r3, [pc, #92]	; (401fe4 <xQueueGenericSend+0x1dc>)
  401f86:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401f88:	4620      	mov	r0, r4
  401f8a:	4b12      	ldr	r3, [pc, #72]	; (401fd4 <xQueueGenericSend+0x1cc>)
  401f8c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401f8e:	4b12      	ldr	r3, [pc, #72]	; (401fd8 <xQueueGenericSend+0x1d0>)
  401f90:	4798      	blx	r3
  401f92:	2800      	cmp	r0, #0
  401f94:	d1c5      	bne.n	401f22 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401f96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401f9a:	f8c9 3000 	str.w	r3, [r9]
  401f9e:	f3bf 8f4f 	dsb	sy
  401fa2:	f3bf 8f6f 	isb	sy
  401fa6:	e7bc      	b.n	401f22 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401fa8:	4620      	mov	r0, r4
  401faa:	4b0a      	ldr	r3, [pc, #40]	; (401fd4 <xQueueGenericSend+0x1cc>)
  401fac:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401fae:	4b0a      	ldr	r3, [pc, #40]	; (401fd8 <xQueueGenericSend+0x1d0>)
  401fb0:	4798      	blx	r3
			return errQUEUE_FULL;
  401fb2:	2000      	movs	r0, #0
  401fb4:	e78d      	b.n	401ed2 <xQueueGenericSend+0xca>
  401fb6:	bf00      	nop
  401fb8:	00402d7d 	.word	0x00402d7d
  401fbc:	0040186d 	.word	0x0040186d
  401fc0:	00401b1d 	.word	0x00401b1d
  401fc4:	00401ba5 	.word	0x00401ba5
  401fc8:	e000ed04 	.word	0xe000ed04
  401fcc:	004018b9 	.word	0x004018b9
  401fd0:	00402c15 	.word	0x00402c15
  401fd4:	00401c55 	.word	0x00401c55
  401fd8:	004027f9 	.word	0x004027f9
  401fdc:	00402691 	.word	0x00402691
  401fe0:	00402cdd 	.word	0x00402cdd
  401fe4:	00402b11 	.word	0x00402b11
  401fe8:	00402cad 	.word	0x00402cad

00401fec <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401fec:	2800      	cmp	r0, #0
  401fee:	d036      	beq.n	40205e <xQueueGenericSendFromISR+0x72>
{
  401ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ff4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401ff6:	2900      	cmp	r1, #0
  401ff8:	d03c      	beq.n	402074 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401ffa:	2b02      	cmp	r3, #2
  401ffc:	d048      	beq.n	402090 <xQueueGenericSendFromISR+0xa4>
  401ffe:	461e      	mov	r6, r3
  402000:	4615      	mov	r5, r2
  402002:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  402004:	4b35      	ldr	r3, [pc, #212]	; (4020dc <xQueueGenericSendFromISR+0xf0>)
  402006:	4798      	blx	r3
	__asm volatile
  402008:	f3ef 8711 	mrs	r7, BASEPRI
  40200c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402010:	b672      	cpsid	i
  402012:	f383 8811 	msr	BASEPRI, r3
  402016:	f3bf 8f6f 	isb	sy
  40201a:	f3bf 8f4f 	dsb	sy
  40201e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  402020:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402022:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402024:	429a      	cmp	r2, r3
  402026:	d301      	bcc.n	40202c <xQueueGenericSendFromISR+0x40>
  402028:	2e02      	cmp	r6, #2
  40202a:	d14f      	bne.n	4020cc <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40202c:	4632      	mov	r2, r6
  40202e:	4641      	mov	r1, r8
  402030:	4620      	mov	r0, r4
  402032:	4b2b      	ldr	r3, [pc, #172]	; (4020e0 <xQueueGenericSendFromISR+0xf4>)
  402034:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  402036:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402038:	f1b3 3fff 	cmp.w	r3, #4294967295
  40203c:	d141      	bne.n	4020c2 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40203e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402040:	2b00      	cmp	r3, #0
  402042:	d033      	beq.n	4020ac <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402044:	4631      	mov	r1, r6
  402046:	4620      	mov	r0, r4
  402048:	4b26      	ldr	r3, [pc, #152]	; (4020e4 <xQueueGenericSendFromISR+0xf8>)
  40204a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  40204c:	2d00      	cmp	r5, #0
  40204e:	d03f      	beq.n	4020d0 <xQueueGenericSendFromISR+0xe4>
  402050:	2801      	cmp	r0, #1
  402052:	d13d      	bne.n	4020d0 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402054:	6028      	str	r0, [r5, #0]
	__asm volatile
  402056:	f387 8811 	msr	BASEPRI, r7
}
  40205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  40205e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402062:	b672      	cpsid	i
  402064:	f383 8811 	msr	BASEPRI, r3
  402068:	f3bf 8f6f 	isb	sy
  40206c:	f3bf 8f4f 	dsb	sy
  402070:	b662      	cpsie	i
  402072:	e7fe      	b.n	402072 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402074:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402076:	2800      	cmp	r0, #0
  402078:	d0bf      	beq.n	401ffa <xQueueGenericSendFromISR+0xe>
  40207a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40207e:	b672      	cpsid	i
  402080:	f383 8811 	msr	BASEPRI, r3
  402084:	f3bf 8f6f 	isb	sy
  402088:	f3bf 8f4f 	dsb	sy
  40208c:	b662      	cpsie	i
  40208e:	e7fe      	b.n	40208e <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402090:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402092:	2801      	cmp	r0, #1
  402094:	d0b3      	beq.n	401ffe <xQueueGenericSendFromISR+0x12>
  402096:	f04f 0380 	mov.w	r3, #128	; 0x80
  40209a:	b672      	cpsid	i
  40209c:	f383 8811 	msr	BASEPRI, r3
  4020a0:	f3bf 8f6f 	isb	sy
  4020a4:	f3bf 8f4f 	dsb	sy
  4020a8:	b662      	cpsie	i
  4020aa:	e7fe      	b.n	4020aa <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4020ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4020ae:	b18b      	cbz	r3, 4020d4 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4020b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4020b4:	4b0c      	ldr	r3, [pc, #48]	; (4020e8 <xQueueGenericSendFromISR+0xfc>)
  4020b6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4020b8:	b175      	cbz	r5, 4020d8 <xQueueGenericSendFromISR+0xec>
  4020ba:	b168      	cbz	r0, 4020d8 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4020bc:	2001      	movs	r0, #1
  4020be:	6028      	str	r0, [r5, #0]
  4020c0:	e7c9      	b.n	402056 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  4020c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020c4:	3301      	adds	r3, #1
  4020c6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4020c8:	2001      	movs	r0, #1
  4020ca:	e7c4      	b.n	402056 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  4020cc:	2000      	movs	r0, #0
  4020ce:	e7c2      	b.n	402056 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  4020d0:	2001      	movs	r0, #1
  4020d2:	e7c0      	b.n	402056 <xQueueGenericSendFromISR+0x6a>
  4020d4:	2001      	movs	r0, #1
  4020d6:	e7be      	b.n	402056 <xQueueGenericSendFromISR+0x6a>
  4020d8:	2001      	movs	r0, #1
  4020da:	e7bc      	b.n	402056 <xQueueGenericSendFromISR+0x6a>
  4020dc:	00401a65 	.word	0x00401a65
  4020e0:	00401b1d 	.word	0x00401b1d
  4020e4:	00401ba5 	.word	0x00401ba5
  4020e8:	00402c15 	.word	0x00402c15

004020ec <xQueueGenericReceive>:
{
  4020ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4020f0:	b084      	sub	sp, #16
  4020f2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4020f4:	b198      	cbz	r0, 40211e <xQueueGenericReceive+0x32>
  4020f6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4020f8:	b1e1      	cbz	r1, 402134 <xQueueGenericReceive+0x48>
  4020fa:	4698      	mov	r8, r3
  4020fc:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4020fe:	4b61      	ldr	r3, [pc, #388]	; (402284 <xQueueGenericReceive+0x198>)
  402100:	4798      	blx	r3
  402102:	bb28      	cbnz	r0, 402150 <xQueueGenericReceive+0x64>
  402104:	9b01      	ldr	r3, [sp, #4]
  402106:	b353      	cbz	r3, 40215e <xQueueGenericReceive+0x72>
  402108:	f04f 0380 	mov.w	r3, #128	; 0x80
  40210c:	b672      	cpsid	i
  40210e:	f383 8811 	msr	BASEPRI, r3
  402112:	f3bf 8f6f 	isb	sy
  402116:	f3bf 8f4f 	dsb	sy
  40211a:	b662      	cpsie	i
  40211c:	e7fe      	b.n	40211c <xQueueGenericReceive+0x30>
  40211e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402122:	b672      	cpsid	i
  402124:	f383 8811 	msr	BASEPRI, r3
  402128:	f3bf 8f6f 	isb	sy
  40212c:	f3bf 8f4f 	dsb	sy
  402130:	b662      	cpsie	i
  402132:	e7fe      	b.n	402132 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402134:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402136:	2a00      	cmp	r2, #0
  402138:	d0df      	beq.n	4020fa <xQueueGenericReceive+0xe>
  40213a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40213e:	b672      	cpsid	i
  402140:	f383 8811 	msr	BASEPRI, r3
  402144:	f3bf 8f6f 	isb	sy
  402148:	f3bf 8f4f 	dsb	sy
  40214c:	b662      	cpsie	i
  40214e:	e7fe      	b.n	40214e <xQueueGenericReceive+0x62>
  402150:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402152:	4d4d      	ldr	r5, [pc, #308]	; (402288 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402154:	f8df a160 	ldr.w	sl, [pc, #352]	; 4022b8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  402158:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402298 <xQueueGenericReceive+0x1ac>
  40215c:	e04b      	b.n	4021f6 <xQueueGenericReceive+0x10a>
  40215e:	2600      	movs	r6, #0
  402160:	e7f7      	b.n	402152 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402162:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402164:	4639      	mov	r1, r7
  402166:	4620      	mov	r0, r4
  402168:	4b48      	ldr	r3, [pc, #288]	; (40228c <xQueueGenericReceive+0x1a0>)
  40216a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40216c:	f1b8 0f00 	cmp.w	r8, #0
  402170:	d11d      	bne.n	4021ae <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  402172:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402174:	3b01      	subs	r3, #1
  402176:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402178:	6823      	ldr	r3, [r4, #0]
  40217a:	b913      	cbnz	r3, 402182 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40217c:	4b44      	ldr	r3, [pc, #272]	; (402290 <xQueueGenericReceive+0x1a4>)
  40217e:	4798      	blx	r3
  402180:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402182:	6923      	ldr	r3, [r4, #16]
  402184:	b16b      	cbz	r3, 4021a2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402186:	f104 0010 	add.w	r0, r4, #16
  40218a:	4b42      	ldr	r3, [pc, #264]	; (402294 <xQueueGenericReceive+0x1a8>)
  40218c:	4798      	blx	r3
  40218e:	2801      	cmp	r0, #1
  402190:	d107      	bne.n	4021a2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402196:	4b40      	ldr	r3, [pc, #256]	; (402298 <xQueueGenericReceive+0x1ac>)
  402198:	601a      	str	r2, [r3, #0]
  40219a:	f3bf 8f4f 	dsb	sy
  40219e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4021a2:	4b3e      	ldr	r3, [pc, #248]	; (40229c <xQueueGenericReceive+0x1b0>)
  4021a4:	4798      	blx	r3
				return pdPASS;
  4021a6:	2001      	movs	r0, #1
}
  4021a8:	b004      	add	sp, #16
  4021aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4021ae:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4021b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4021b2:	2b00      	cmp	r3, #0
  4021b4:	d0f5      	beq.n	4021a2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4021b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4021ba:	4b36      	ldr	r3, [pc, #216]	; (402294 <xQueueGenericReceive+0x1a8>)
  4021bc:	4798      	blx	r3
  4021be:	2800      	cmp	r0, #0
  4021c0:	d0ef      	beq.n	4021a2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4021c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4021c6:	4b34      	ldr	r3, [pc, #208]	; (402298 <xQueueGenericReceive+0x1ac>)
  4021c8:	601a      	str	r2, [r3, #0]
  4021ca:	f3bf 8f4f 	dsb	sy
  4021ce:	f3bf 8f6f 	isb	sy
  4021d2:	e7e6      	b.n	4021a2 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  4021d4:	4b31      	ldr	r3, [pc, #196]	; (40229c <xQueueGenericReceive+0x1b0>)
  4021d6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4021d8:	2000      	movs	r0, #0
  4021da:	e7e5      	b.n	4021a8 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4021dc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4021de:	6860      	ldr	r0, [r4, #4]
  4021e0:	4b2f      	ldr	r3, [pc, #188]	; (4022a0 <xQueueGenericReceive+0x1b4>)
  4021e2:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4021e4:	4b2d      	ldr	r3, [pc, #180]	; (40229c <xQueueGenericReceive+0x1b0>)
  4021e6:	4798      	blx	r3
  4021e8:	e030      	b.n	40224c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4021ea:	4620      	mov	r0, r4
  4021ec:	4b2d      	ldr	r3, [pc, #180]	; (4022a4 <xQueueGenericReceive+0x1b8>)
  4021ee:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4021f0:	4b2d      	ldr	r3, [pc, #180]	; (4022a8 <xQueueGenericReceive+0x1bc>)
  4021f2:	4798      	blx	r3
  4021f4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4021f6:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4021f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4021fa:	2b00      	cmp	r3, #0
  4021fc:	d1b1      	bne.n	402162 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4021fe:	9b01      	ldr	r3, [sp, #4]
  402200:	2b00      	cmp	r3, #0
  402202:	d0e7      	beq.n	4021d4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402204:	b90e      	cbnz	r6, 40220a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  402206:	a802      	add	r0, sp, #8
  402208:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40220a:	4b24      	ldr	r3, [pc, #144]	; (40229c <xQueueGenericReceive+0x1b0>)
  40220c:	4798      	blx	r3
		vTaskSuspendAll();
  40220e:	4b27      	ldr	r3, [pc, #156]	; (4022ac <xQueueGenericReceive+0x1c0>)
  402210:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402212:	47a8      	blx	r5
  402214:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402216:	f1b3 3fff 	cmp.w	r3, #4294967295
  40221a:	d101      	bne.n	402220 <xQueueGenericReceive+0x134>
  40221c:	2300      	movs	r3, #0
  40221e:	6463      	str	r3, [r4, #68]	; 0x44
  402220:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402222:	f1b3 3fff 	cmp.w	r3, #4294967295
  402226:	d101      	bne.n	40222c <xQueueGenericReceive+0x140>
  402228:	2300      	movs	r3, #0
  40222a:	64a3      	str	r3, [r4, #72]	; 0x48
  40222c:	4b1b      	ldr	r3, [pc, #108]	; (40229c <xQueueGenericReceive+0x1b0>)
  40222e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402230:	a901      	add	r1, sp, #4
  402232:	a802      	add	r0, sp, #8
  402234:	4b1e      	ldr	r3, [pc, #120]	; (4022b0 <xQueueGenericReceive+0x1c4>)
  402236:	4798      	blx	r3
  402238:	b9e8      	cbnz	r0, 402276 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40223a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40223c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40223e:	4b17      	ldr	r3, [pc, #92]	; (40229c <xQueueGenericReceive+0x1b0>)
  402240:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402242:	2e00      	cmp	r6, #0
  402244:	d1d1      	bne.n	4021ea <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402246:	6823      	ldr	r3, [r4, #0]
  402248:	2b00      	cmp	r3, #0
  40224a:	d0c7      	beq.n	4021dc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40224c:	9901      	ldr	r1, [sp, #4]
  40224e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402252:	4b18      	ldr	r3, [pc, #96]	; (4022b4 <xQueueGenericReceive+0x1c8>)
  402254:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402256:	4620      	mov	r0, r4
  402258:	4b12      	ldr	r3, [pc, #72]	; (4022a4 <xQueueGenericReceive+0x1b8>)
  40225a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40225c:	4b12      	ldr	r3, [pc, #72]	; (4022a8 <xQueueGenericReceive+0x1bc>)
  40225e:	4798      	blx	r3
  402260:	2800      	cmp	r0, #0
  402262:	d1c7      	bne.n	4021f4 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402268:	f8c9 3000 	str.w	r3, [r9]
  40226c:	f3bf 8f4f 	dsb	sy
  402270:	f3bf 8f6f 	isb	sy
  402274:	e7be      	b.n	4021f4 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  402276:	4620      	mov	r0, r4
  402278:	4b0a      	ldr	r3, [pc, #40]	; (4022a4 <xQueueGenericReceive+0x1b8>)
  40227a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40227c:	4b0a      	ldr	r3, [pc, #40]	; (4022a8 <xQueueGenericReceive+0x1bc>)
  40227e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402280:	2000      	movs	r0, #0
  402282:	e791      	b.n	4021a8 <xQueueGenericReceive+0xbc>
  402284:	00402d7d 	.word	0x00402d7d
  402288:	0040186d 	.word	0x0040186d
  40228c:	00401c2d 	.word	0x00401c2d
  402290:	00402efd 	.word	0x00402efd
  402294:	00402c15 	.word	0x00402c15
  402298:	e000ed04 	.word	0xe000ed04
  40229c:	004018b9 	.word	0x004018b9
  4022a0:	00402d9d 	.word	0x00402d9d
  4022a4:	00401c55 	.word	0x00401c55
  4022a8:	004027f9 	.word	0x004027f9
  4022ac:	00402691 	.word	0x00402691
  4022b0:	00402cdd 	.word	0x00402cdd
  4022b4:	00402b11 	.word	0x00402b11
  4022b8:	00402cad 	.word	0x00402cad

004022bc <vQueueAddToRegistry>:
	{
  4022bc:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4022be:	4b0b      	ldr	r3, [pc, #44]	; (4022ec <vQueueAddToRegistry+0x30>)
  4022c0:	681b      	ldr	r3, [r3, #0]
  4022c2:	b153      	cbz	r3, 4022da <vQueueAddToRegistry+0x1e>
  4022c4:	2301      	movs	r3, #1
  4022c6:	4c09      	ldr	r4, [pc, #36]	; (4022ec <vQueueAddToRegistry+0x30>)
  4022c8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4022cc:	b132      	cbz	r2, 4022dc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4022ce:	3301      	adds	r3, #1
  4022d0:	2b08      	cmp	r3, #8
  4022d2:	d1f9      	bne.n	4022c8 <vQueueAddToRegistry+0xc>
	}
  4022d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4022d8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4022da:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4022dc:	4a03      	ldr	r2, [pc, #12]	; (4022ec <vQueueAddToRegistry+0x30>)
  4022de:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4022e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4022e6:	6058      	str	r0, [r3, #4]
				break;
  4022e8:	e7f4      	b.n	4022d4 <vQueueAddToRegistry+0x18>
  4022ea:	bf00      	nop
  4022ec:	20400df4 	.word	0x20400df4

004022f0 <vQueueWaitForMessageRestricted>:
	{
  4022f0:	b570      	push	{r4, r5, r6, lr}
  4022f2:	4604      	mov	r4, r0
  4022f4:	460d      	mov	r5, r1
  4022f6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4022f8:	4b0f      	ldr	r3, [pc, #60]	; (402338 <vQueueWaitForMessageRestricted+0x48>)
  4022fa:	4798      	blx	r3
  4022fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  402302:	d00b      	beq.n	40231c <vQueueWaitForMessageRestricted+0x2c>
  402304:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402306:	f1b3 3fff 	cmp.w	r3, #4294967295
  40230a:	d00a      	beq.n	402322 <vQueueWaitForMessageRestricted+0x32>
  40230c:	4b0b      	ldr	r3, [pc, #44]	; (40233c <vQueueWaitForMessageRestricted+0x4c>)
  40230e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402310:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402312:	b14b      	cbz	r3, 402328 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402314:	4620      	mov	r0, r4
  402316:	4b0a      	ldr	r3, [pc, #40]	; (402340 <vQueueWaitForMessageRestricted+0x50>)
  402318:	4798      	blx	r3
  40231a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40231c:	2300      	movs	r3, #0
  40231e:	6463      	str	r3, [r4, #68]	; 0x44
  402320:	e7f0      	b.n	402304 <vQueueWaitForMessageRestricted+0x14>
  402322:	2300      	movs	r3, #0
  402324:	64a3      	str	r3, [r4, #72]	; 0x48
  402326:	e7f1      	b.n	40230c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402328:	4632      	mov	r2, r6
  40232a:	4629      	mov	r1, r5
  40232c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402330:	4b04      	ldr	r3, [pc, #16]	; (402344 <vQueueWaitForMessageRestricted+0x54>)
  402332:	4798      	blx	r3
  402334:	e7ee      	b.n	402314 <vQueueWaitForMessageRestricted+0x24>
  402336:	bf00      	nop
  402338:	0040186d 	.word	0x0040186d
  40233c:	004018b9 	.word	0x004018b9
  402340:	00401c55 	.word	0x00401c55
  402344:	00402b95 	.word	0x00402b95

00402348 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402348:	4b08      	ldr	r3, [pc, #32]	; (40236c <prvResetNextTaskUnblockTime+0x24>)
  40234a:	681b      	ldr	r3, [r3, #0]
  40234c:	681b      	ldr	r3, [r3, #0]
  40234e:	b13b      	cbz	r3, 402360 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402350:	4b06      	ldr	r3, [pc, #24]	; (40236c <prvResetNextTaskUnblockTime+0x24>)
  402352:	681b      	ldr	r3, [r3, #0]
  402354:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402356:	68db      	ldr	r3, [r3, #12]
  402358:	685a      	ldr	r2, [r3, #4]
  40235a:	4b05      	ldr	r3, [pc, #20]	; (402370 <prvResetNextTaskUnblockTime+0x28>)
  40235c:	601a      	str	r2, [r3, #0]
  40235e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402360:	f04f 32ff 	mov.w	r2, #4294967295
  402364:	4b02      	ldr	r3, [pc, #8]	; (402370 <prvResetNextTaskUnblockTime+0x28>)
  402366:	601a      	str	r2, [r3, #0]
  402368:	4770      	bx	lr
  40236a:	bf00      	nop
  40236c:	20400c80 	.word	0x20400c80
  402370:	20400d2c 	.word	0x20400d2c

00402374 <prvAddCurrentTaskToDelayedList>:
{
  402374:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402376:	4b0f      	ldr	r3, [pc, #60]	; (4023b4 <prvAddCurrentTaskToDelayedList+0x40>)
  402378:	681b      	ldr	r3, [r3, #0]
  40237a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  40237c:	4b0e      	ldr	r3, [pc, #56]	; (4023b8 <prvAddCurrentTaskToDelayedList+0x44>)
  40237e:	681b      	ldr	r3, [r3, #0]
  402380:	4298      	cmp	r0, r3
  402382:	d30e      	bcc.n	4023a2 <prvAddCurrentTaskToDelayedList+0x2e>
  402384:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402386:	4b0d      	ldr	r3, [pc, #52]	; (4023bc <prvAddCurrentTaskToDelayedList+0x48>)
  402388:	6818      	ldr	r0, [r3, #0]
  40238a:	4b0a      	ldr	r3, [pc, #40]	; (4023b4 <prvAddCurrentTaskToDelayedList+0x40>)
  40238c:	6819      	ldr	r1, [r3, #0]
  40238e:	3104      	adds	r1, #4
  402390:	4b0b      	ldr	r3, [pc, #44]	; (4023c0 <prvAddCurrentTaskToDelayedList+0x4c>)
  402392:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402394:	4b0b      	ldr	r3, [pc, #44]	; (4023c4 <prvAddCurrentTaskToDelayedList+0x50>)
  402396:	681b      	ldr	r3, [r3, #0]
  402398:	429c      	cmp	r4, r3
  40239a:	d201      	bcs.n	4023a0 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40239c:	4b09      	ldr	r3, [pc, #36]	; (4023c4 <prvAddCurrentTaskToDelayedList+0x50>)
  40239e:	601c      	str	r4, [r3, #0]
  4023a0:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4023a2:	4b09      	ldr	r3, [pc, #36]	; (4023c8 <prvAddCurrentTaskToDelayedList+0x54>)
  4023a4:	6818      	ldr	r0, [r3, #0]
  4023a6:	4b03      	ldr	r3, [pc, #12]	; (4023b4 <prvAddCurrentTaskToDelayedList+0x40>)
  4023a8:	6819      	ldr	r1, [r3, #0]
  4023aa:	3104      	adds	r1, #4
  4023ac:	4b04      	ldr	r3, [pc, #16]	; (4023c0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4023ae:	4798      	blx	r3
  4023b0:	bd10      	pop	{r4, pc}
  4023b2:	bf00      	nop
  4023b4:	20400c7c 	.word	0x20400c7c
  4023b8:	20400d74 	.word	0x20400d74
  4023bc:	20400c80 	.word	0x20400c80
  4023c0:	00401755 	.word	0x00401755
  4023c4:	20400d2c 	.word	0x20400d2c
  4023c8:	20400c84 	.word	0x20400c84

004023cc <xTaskGenericCreate>:
{
  4023cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023d0:	b083      	sub	sp, #12
  4023d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4023d4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4023d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4023da:	b160      	cbz	r0, 4023f6 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4023dc:	2d04      	cmp	r5, #4
  4023de:	d915      	bls.n	40240c <xTaskGenericCreate+0x40>
  4023e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023e4:	b672      	cpsid	i
  4023e6:	f383 8811 	msr	BASEPRI, r3
  4023ea:	f3bf 8f6f 	isb	sy
  4023ee:	f3bf 8f4f 	dsb	sy
  4023f2:	b662      	cpsie	i
  4023f4:	e7fe      	b.n	4023f4 <xTaskGenericCreate+0x28>
  4023f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023fa:	b672      	cpsid	i
  4023fc:	f383 8811 	msr	BASEPRI, r3
  402400:	f3bf 8f6f 	isb	sy
  402404:	f3bf 8f4f 	dsb	sy
  402408:	b662      	cpsie	i
  40240a:	e7fe      	b.n	40240a <xTaskGenericCreate+0x3e>
  40240c:	9001      	str	r0, [sp, #4]
  40240e:	4698      	mov	r8, r3
  402410:	4691      	mov	r9, r2
  402412:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402414:	b936      	cbnz	r6, 402424 <xTaskGenericCreate+0x58>
  402416:	0090      	lsls	r0, r2, #2
  402418:	4b62      	ldr	r3, [pc, #392]	; (4025a4 <xTaskGenericCreate+0x1d8>)
  40241a:	4798      	blx	r3
		if( pxStack != NULL )
  40241c:	4606      	mov	r6, r0
  40241e:	2800      	cmp	r0, #0
  402420:	f000 809e 	beq.w	402560 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402424:	2058      	movs	r0, #88	; 0x58
  402426:	4b5f      	ldr	r3, [pc, #380]	; (4025a4 <xTaskGenericCreate+0x1d8>)
  402428:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40242a:	4604      	mov	r4, r0
  40242c:	2800      	cmp	r0, #0
  40242e:	f000 8094 	beq.w	40255a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402432:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402434:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402438:	21a5      	movs	r1, #165	; 0xa5
  40243a:	4630      	mov	r0, r6
  40243c:	4b5a      	ldr	r3, [pc, #360]	; (4025a8 <xTaskGenericCreate+0x1dc>)
  40243e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402440:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402444:	444e      	add	r6, r9
  402446:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402448:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40244c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402450:	783b      	ldrb	r3, [r7, #0]
  402452:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402456:	783b      	ldrb	r3, [r7, #0]
  402458:	2b00      	cmp	r3, #0
  40245a:	f040 8084 	bne.w	402566 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40245e:	2700      	movs	r7, #0
  402460:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402464:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402466:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402468:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40246a:	f104 0904 	add.w	r9, r4, #4
  40246e:	4648      	mov	r0, r9
  402470:	f8df b184 	ldr.w	fp, [pc, #388]	; 4025f8 <xTaskGenericCreate+0x22c>
  402474:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402476:	f104 0018 	add.w	r0, r4, #24
  40247a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40247c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40247e:	f1c5 0305 	rsb	r3, r5, #5
  402482:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402484:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402486:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402488:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40248c:	4642      	mov	r2, r8
  40248e:	9901      	ldr	r1, [sp, #4]
  402490:	4630      	mov	r0, r6
  402492:	4b46      	ldr	r3, [pc, #280]	; (4025ac <xTaskGenericCreate+0x1e0>)
  402494:	4798      	blx	r3
  402496:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402498:	f1ba 0f00 	cmp.w	sl, #0
  40249c:	d001      	beq.n	4024a2 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40249e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4024a2:	4b43      	ldr	r3, [pc, #268]	; (4025b0 <xTaskGenericCreate+0x1e4>)
  4024a4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4024a6:	4a43      	ldr	r2, [pc, #268]	; (4025b4 <xTaskGenericCreate+0x1e8>)
  4024a8:	6813      	ldr	r3, [r2, #0]
  4024aa:	3301      	adds	r3, #1
  4024ac:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4024ae:	4b42      	ldr	r3, [pc, #264]	; (4025b8 <xTaskGenericCreate+0x1ec>)
  4024b0:	681b      	ldr	r3, [r3, #0]
  4024b2:	2b00      	cmp	r3, #0
  4024b4:	d166      	bne.n	402584 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4024b6:	4b40      	ldr	r3, [pc, #256]	; (4025b8 <xTaskGenericCreate+0x1ec>)
  4024b8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4024ba:	6813      	ldr	r3, [r2, #0]
  4024bc:	2b01      	cmp	r3, #1
  4024be:	d121      	bne.n	402504 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4024c0:	4f3e      	ldr	r7, [pc, #248]	; (4025bc <xTaskGenericCreate+0x1f0>)
  4024c2:	4638      	mov	r0, r7
  4024c4:	4e3e      	ldr	r6, [pc, #248]	; (4025c0 <xTaskGenericCreate+0x1f4>)
  4024c6:	47b0      	blx	r6
  4024c8:	f107 0014 	add.w	r0, r7, #20
  4024cc:	47b0      	blx	r6
  4024ce:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4024d2:	47b0      	blx	r6
  4024d4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4024d8:	47b0      	blx	r6
  4024da:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4024de:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4024e0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4025fc <xTaskGenericCreate+0x230>
  4024e4:	4640      	mov	r0, r8
  4024e6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4024e8:	4f36      	ldr	r7, [pc, #216]	; (4025c4 <xTaskGenericCreate+0x1f8>)
  4024ea:	4638      	mov	r0, r7
  4024ec:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4024ee:	4836      	ldr	r0, [pc, #216]	; (4025c8 <xTaskGenericCreate+0x1fc>)
  4024f0:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4024f2:	4836      	ldr	r0, [pc, #216]	; (4025cc <xTaskGenericCreate+0x200>)
  4024f4:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4024f6:	4836      	ldr	r0, [pc, #216]	; (4025d0 <xTaskGenericCreate+0x204>)
  4024f8:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4024fa:	4b36      	ldr	r3, [pc, #216]	; (4025d4 <xTaskGenericCreate+0x208>)
  4024fc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402500:	4b35      	ldr	r3, [pc, #212]	; (4025d8 <xTaskGenericCreate+0x20c>)
  402502:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402504:	4a35      	ldr	r2, [pc, #212]	; (4025dc <xTaskGenericCreate+0x210>)
  402506:	6813      	ldr	r3, [r2, #0]
  402508:	3301      	adds	r3, #1
  40250a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40250c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40250e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402510:	4a33      	ldr	r2, [pc, #204]	; (4025e0 <xTaskGenericCreate+0x214>)
  402512:	6811      	ldr	r1, [r2, #0]
  402514:	2301      	movs	r3, #1
  402516:	4083      	lsls	r3, r0
  402518:	430b      	orrs	r3, r1
  40251a:	6013      	str	r3, [r2, #0]
  40251c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402520:	4649      	mov	r1, r9
  402522:	4b26      	ldr	r3, [pc, #152]	; (4025bc <xTaskGenericCreate+0x1f0>)
  402524:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402528:	4b2e      	ldr	r3, [pc, #184]	; (4025e4 <xTaskGenericCreate+0x218>)
  40252a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40252c:	4b2e      	ldr	r3, [pc, #184]	; (4025e8 <xTaskGenericCreate+0x21c>)
  40252e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402530:	4b2e      	ldr	r3, [pc, #184]	; (4025ec <xTaskGenericCreate+0x220>)
  402532:	681b      	ldr	r3, [r3, #0]
  402534:	2b00      	cmp	r3, #0
  402536:	d031      	beq.n	40259c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402538:	4b1f      	ldr	r3, [pc, #124]	; (4025b8 <xTaskGenericCreate+0x1ec>)
  40253a:	681b      	ldr	r3, [r3, #0]
  40253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40253e:	429d      	cmp	r5, r3
  402540:	d92e      	bls.n	4025a0 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402546:	4b2a      	ldr	r3, [pc, #168]	; (4025f0 <xTaskGenericCreate+0x224>)
  402548:	601a      	str	r2, [r3, #0]
  40254a:	f3bf 8f4f 	dsb	sy
  40254e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402552:	2001      	movs	r0, #1
}
  402554:	b003      	add	sp, #12
  402556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40255a:	4630      	mov	r0, r6
  40255c:	4b25      	ldr	r3, [pc, #148]	; (4025f4 <xTaskGenericCreate+0x228>)
  40255e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402560:	f04f 30ff 	mov.w	r0, #4294967295
  402564:	e7f6      	b.n	402554 <xTaskGenericCreate+0x188>
  402566:	463b      	mov	r3, r7
  402568:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40256c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40256e:	7859      	ldrb	r1, [r3, #1]
  402570:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402574:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402578:	2900      	cmp	r1, #0
  40257a:	f43f af70 	beq.w	40245e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40257e:	42bb      	cmp	r3, r7
  402580:	d1f5      	bne.n	40256e <xTaskGenericCreate+0x1a2>
  402582:	e76c      	b.n	40245e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402584:	4b19      	ldr	r3, [pc, #100]	; (4025ec <xTaskGenericCreate+0x220>)
  402586:	681b      	ldr	r3, [r3, #0]
  402588:	2b00      	cmp	r3, #0
  40258a:	d1bb      	bne.n	402504 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40258c:	4b0a      	ldr	r3, [pc, #40]	; (4025b8 <xTaskGenericCreate+0x1ec>)
  40258e:	681b      	ldr	r3, [r3, #0]
  402590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402592:	429d      	cmp	r5, r3
  402594:	d3b6      	bcc.n	402504 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402596:	4b08      	ldr	r3, [pc, #32]	; (4025b8 <xTaskGenericCreate+0x1ec>)
  402598:	601c      	str	r4, [r3, #0]
  40259a:	e7b3      	b.n	402504 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  40259c:	2001      	movs	r0, #1
  40259e:	e7d9      	b.n	402554 <xTaskGenericCreate+0x188>
  4025a0:	2001      	movs	r0, #1
	return xReturn;
  4025a2:	e7d7      	b.n	402554 <xTaskGenericCreate+0x188>
  4025a4:	00401ac9 	.word	0x00401ac9
  4025a8:	004063d5 	.word	0x004063d5
  4025ac:	00401821 	.word	0x00401821
  4025b0:	0040186d 	.word	0x0040186d
  4025b4:	20400cec 	.word	0x20400cec
  4025b8:	20400c7c 	.word	0x20400c7c
  4025bc:	20400c88 	.word	0x20400c88
  4025c0:	00401721 	.word	0x00401721
  4025c4:	20400d18 	.word	0x20400d18
  4025c8:	20400d34 	.word	0x20400d34
  4025cc:	20400d60 	.word	0x20400d60
  4025d0:	20400d4c 	.word	0x20400d4c
  4025d4:	20400c80 	.word	0x20400c80
  4025d8:	20400c84 	.word	0x20400c84
  4025dc:	20400cf8 	.word	0x20400cf8
  4025e0:	20400d00 	.word	0x20400d00
  4025e4:	0040173d 	.word	0x0040173d
  4025e8:	004018b9 	.word	0x004018b9
  4025ec:	20400d48 	.word	0x20400d48
  4025f0:	e000ed04 	.word	0xe000ed04
  4025f4:	00401af9 	.word	0x00401af9
  4025f8:	00401737 	.word	0x00401737
  4025fc:	20400d04 	.word	0x20400d04

00402600 <vTaskStartScheduler>:
{
  402600:	b510      	push	{r4, lr}
  402602:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402604:	2300      	movs	r3, #0
  402606:	9303      	str	r3, [sp, #12]
  402608:	9302      	str	r3, [sp, #8]
  40260a:	9301      	str	r3, [sp, #4]
  40260c:	9300      	str	r3, [sp, #0]
  40260e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402612:	4917      	ldr	r1, [pc, #92]	; (402670 <vTaskStartScheduler+0x70>)
  402614:	4817      	ldr	r0, [pc, #92]	; (402674 <vTaskStartScheduler+0x74>)
  402616:	4c18      	ldr	r4, [pc, #96]	; (402678 <vTaskStartScheduler+0x78>)
  402618:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40261a:	2801      	cmp	r0, #1
  40261c:	d00b      	beq.n	402636 <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  40261e:	bb20      	cbnz	r0, 40266a <vTaskStartScheduler+0x6a>
  402620:	f04f 0380 	mov.w	r3, #128	; 0x80
  402624:	b672      	cpsid	i
  402626:	f383 8811 	msr	BASEPRI, r3
  40262a:	f3bf 8f6f 	isb	sy
  40262e:	f3bf 8f4f 	dsb	sy
  402632:	b662      	cpsie	i
  402634:	e7fe      	b.n	402634 <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  402636:	4b11      	ldr	r3, [pc, #68]	; (40267c <vTaskStartScheduler+0x7c>)
  402638:	4798      	blx	r3
	if( xReturn == pdPASS )
  40263a:	2801      	cmp	r0, #1
  40263c:	d1ef      	bne.n	40261e <vTaskStartScheduler+0x1e>
  40263e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402642:	b672      	cpsid	i
  402644:	f383 8811 	msr	BASEPRI, r3
  402648:	f3bf 8f6f 	isb	sy
  40264c:	f3bf 8f4f 	dsb	sy
  402650:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402652:	f04f 32ff 	mov.w	r2, #4294967295
  402656:	4b0a      	ldr	r3, [pc, #40]	; (402680 <vTaskStartScheduler+0x80>)
  402658:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40265a:	2201      	movs	r2, #1
  40265c:	4b09      	ldr	r3, [pc, #36]	; (402684 <vTaskStartScheduler+0x84>)
  40265e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402660:	2200      	movs	r2, #0
  402662:	4b09      	ldr	r3, [pc, #36]	; (402688 <vTaskStartScheduler+0x88>)
  402664:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402666:	4b09      	ldr	r3, [pc, #36]	; (40268c <vTaskStartScheduler+0x8c>)
  402668:	4798      	blx	r3
}
  40266a:	b004      	add	sp, #16
  40266c:	bd10      	pop	{r4, pc}
  40266e:	bf00      	nop
  402670:	0040aed8 	.word	0x0040aed8
  402674:	004029a9 	.word	0x004029a9
  402678:	004023cd 	.word	0x004023cd
  40267c:	00402fe9 	.word	0x00402fe9
  402680:	20400d2c 	.word	0x20400d2c
  402684:	20400d48 	.word	0x20400d48
  402688:	20400d74 	.word	0x20400d74
  40268c:	004019a1 	.word	0x004019a1

00402690 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402690:	4a02      	ldr	r2, [pc, #8]	; (40269c <vTaskSuspendAll+0xc>)
  402692:	6813      	ldr	r3, [r2, #0]
  402694:	3301      	adds	r3, #1
  402696:	6013      	str	r3, [r2, #0]
  402698:	4770      	bx	lr
  40269a:	bf00      	nop
  40269c:	20400cf4 	.word	0x20400cf4

004026a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4026a0:	4b01      	ldr	r3, [pc, #4]	; (4026a8 <xTaskGetTickCount+0x8>)
  4026a2:	6818      	ldr	r0, [r3, #0]
}
  4026a4:	4770      	bx	lr
  4026a6:	bf00      	nop
  4026a8:	20400d74 	.word	0x20400d74

004026ac <xTaskIncrementTick>:
{
  4026ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4026b0:	4b42      	ldr	r3, [pc, #264]	; (4027bc <xTaskIncrementTick+0x110>)
  4026b2:	681b      	ldr	r3, [r3, #0]
  4026b4:	2b00      	cmp	r3, #0
  4026b6:	d178      	bne.n	4027aa <xTaskIncrementTick+0xfe>
		++xTickCount;
  4026b8:	4b41      	ldr	r3, [pc, #260]	; (4027c0 <xTaskIncrementTick+0x114>)
  4026ba:	681a      	ldr	r2, [r3, #0]
  4026bc:	3201      	adds	r2, #1
  4026be:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4026c0:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4026c2:	b9d6      	cbnz	r6, 4026fa <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4026c4:	4b3f      	ldr	r3, [pc, #252]	; (4027c4 <xTaskIncrementTick+0x118>)
  4026c6:	681b      	ldr	r3, [r3, #0]
  4026c8:	681b      	ldr	r3, [r3, #0]
  4026ca:	b153      	cbz	r3, 4026e2 <xTaskIncrementTick+0x36>
  4026cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d0:	b672      	cpsid	i
  4026d2:	f383 8811 	msr	BASEPRI, r3
  4026d6:	f3bf 8f6f 	isb	sy
  4026da:	f3bf 8f4f 	dsb	sy
  4026de:	b662      	cpsie	i
  4026e0:	e7fe      	b.n	4026e0 <xTaskIncrementTick+0x34>
  4026e2:	4a38      	ldr	r2, [pc, #224]	; (4027c4 <xTaskIncrementTick+0x118>)
  4026e4:	6811      	ldr	r1, [r2, #0]
  4026e6:	4b38      	ldr	r3, [pc, #224]	; (4027c8 <xTaskIncrementTick+0x11c>)
  4026e8:	6818      	ldr	r0, [r3, #0]
  4026ea:	6010      	str	r0, [r2, #0]
  4026ec:	6019      	str	r1, [r3, #0]
  4026ee:	4a37      	ldr	r2, [pc, #220]	; (4027cc <xTaskIncrementTick+0x120>)
  4026f0:	6813      	ldr	r3, [r2, #0]
  4026f2:	3301      	adds	r3, #1
  4026f4:	6013      	str	r3, [r2, #0]
  4026f6:	4b36      	ldr	r3, [pc, #216]	; (4027d0 <xTaskIncrementTick+0x124>)
  4026f8:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4026fa:	4b36      	ldr	r3, [pc, #216]	; (4027d4 <xTaskIncrementTick+0x128>)
  4026fc:	681b      	ldr	r3, [r3, #0]
  4026fe:	429e      	cmp	r6, r3
  402700:	d218      	bcs.n	402734 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402702:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402704:	4b34      	ldr	r3, [pc, #208]	; (4027d8 <xTaskIncrementTick+0x12c>)
  402706:	681b      	ldr	r3, [r3, #0]
  402708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40270a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40270e:	4a33      	ldr	r2, [pc, #204]	; (4027dc <xTaskIncrementTick+0x130>)
  402710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402714:	2b02      	cmp	r3, #2
  402716:	bf28      	it	cs
  402718:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40271a:	4b31      	ldr	r3, [pc, #196]	; (4027e0 <xTaskIncrementTick+0x134>)
  40271c:	681b      	ldr	r3, [r3, #0]
  40271e:	b90b      	cbnz	r3, 402724 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402720:	4b30      	ldr	r3, [pc, #192]	; (4027e4 <xTaskIncrementTick+0x138>)
  402722:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402724:	4b30      	ldr	r3, [pc, #192]	; (4027e8 <xTaskIncrementTick+0x13c>)
  402726:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402728:	2b00      	cmp	r3, #0
}
  40272a:	bf0c      	ite	eq
  40272c:	4620      	moveq	r0, r4
  40272e:	2001      	movne	r0, #1
  402730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402734:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402736:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4027c4 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40273a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4027f4 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40273e:	4f2b      	ldr	r7, [pc, #172]	; (4027ec <xTaskIncrementTick+0x140>)
  402740:	e01f      	b.n	402782 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402742:	f04f 32ff 	mov.w	r2, #4294967295
  402746:	4b23      	ldr	r3, [pc, #140]	; (4027d4 <xTaskIncrementTick+0x128>)
  402748:	601a      	str	r2, [r3, #0]
						break;
  40274a:	e7db      	b.n	402704 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  40274c:	4a21      	ldr	r2, [pc, #132]	; (4027d4 <xTaskIncrementTick+0x128>)
  40274e:	6013      	str	r3, [r2, #0]
							break;
  402750:	e7d8      	b.n	402704 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402752:	f105 0018 	add.w	r0, r5, #24
  402756:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402758:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40275a:	683a      	ldr	r2, [r7, #0]
  40275c:	2301      	movs	r3, #1
  40275e:	4083      	lsls	r3, r0
  402760:	4313      	orrs	r3, r2
  402762:	603b      	str	r3, [r7, #0]
  402764:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402768:	4651      	mov	r1, sl
  40276a:	4b1c      	ldr	r3, [pc, #112]	; (4027dc <xTaskIncrementTick+0x130>)
  40276c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402770:	4b1f      	ldr	r3, [pc, #124]	; (4027f0 <xTaskIncrementTick+0x144>)
  402772:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402774:	4b18      	ldr	r3, [pc, #96]	; (4027d8 <xTaskIncrementTick+0x12c>)
  402776:	681b      	ldr	r3, [r3, #0]
  402778:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  40277c:	429a      	cmp	r2, r3
  40277e:	bf28      	it	cs
  402780:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402782:	f8d9 3000 	ldr.w	r3, [r9]
  402786:	681b      	ldr	r3, [r3, #0]
  402788:	2b00      	cmp	r3, #0
  40278a:	d0da      	beq.n	402742 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40278c:	f8d9 3000 	ldr.w	r3, [r9]
  402790:	68db      	ldr	r3, [r3, #12]
  402792:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402794:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402796:	429e      	cmp	r6, r3
  402798:	d3d8      	bcc.n	40274c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40279a:	f105 0a04 	add.w	sl, r5, #4
  40279e:	4650      	mov	r0, sl
  4027a0:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4027a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4027a4:	2b00      	cmp	r3, #0
  4027a6:	d1d4      	bne.n	402752 <xTaskIncrementTick+0xa6>
  4027a8:	e7d6      	b.n	402758 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4027aa:	4a0d      	ldr	r2, [pc, #52]	; (4027e0 <xTaskIncrementTick+0x134>)
  4027ac:	6813      	ldr	r3, [r2, #0]
  4027ae:	3301      	adds	r3, #1
  4027b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4027b2:	4b0c      	ldr	r3, [pc, #48]	; (4027e4 <xTaskIncrementTick+0x138>)
  4027b4:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4027b6:	2400      	movs	r4, #0
  4027b8:	e7b4      	b.n	402724 <xTaskIncrementTick+0x78>
  4027ba:	bf00      	nop
  4027bc:	20400cf4 	.word	0x20400cf4
  4027c0:	20400d74 	.word	0x20400d74
  4027c4:	20400c80 	.word	0x20400c80
  4027c8:	20400c84 	.word	0x20400c84
  4027cc:	20400d30 	.word	0x20400d30
  4027d0:	00402349 	.word	0x00402349
  4027d4:	20400d2c 	.word	0x20400d2c
  4027d8:	20400c7c 	.word	0x20400c7c
  4027dc:	20400c88 	.word	0x20400c88
  4027e0:	20400cf0 	.word	0x20400cf0
  4027e4:	004036b5 	.word	0x004036b5
  4027e8:	20400d78 	.word	0x20400d78
  4027ec:	20400d00 	.word	0x20400d00
  4027f0:	0040173d 	.word	0x0040173d
  4027f4:	00401789 	.word	0x00401789

004027f8 <xTaskResumeAll>:
{
  4027f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4027fc:	4b38      	ldr	r3, [pc, #224]	; (4028e0 <xTaskResumeAll+0xe8>)
  4027fe:	681b      	ldr	r3, [r3, #0]
  402800:	b953      	cbnz	r3, 402818 <xTaskResumeAll+0x20>
  402802:	f04f 0380 	mov.w	r3, #128	; 0x80
  402806:	b672      	cpsid	i
  402808:	f383 8811 	msr	BASEPRI, r3
  40280c:	f3bf 8f6f 	isb	sy
  402810:	f3bf 8f4f 	dsb	sy
  402814:	b662      	cpsie	i
  402816:	e7fe      	b.n	402816 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402818:	4b32      	ldr	r3, [pc, #200]	; (4028e4 <xTaskResumeAll+0xec>)
  40281a:	4798      	blx	r3
		--uxSchedulerSuspended;
  40281c:	4b30      	ldr	r3, [pc, #192]	; (4028e0 <xTaskResumeAll+0xe8>)
  40281e:	681a      	ldr	r2, [r3, #0]
  402820:	3a01      	subs	r2, #1
  402822:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402824:	681b      	ldr	r3, [r3, #0]
  402826:	2b00      	cmp	r3, #0
  402828:	d155      	bne.n	4028d6 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40282a:	4b2f      	ldr	r3, [pc, #188]	; (4028e8 <xTaskResumeAll+0xf0>)
  40282c:	681b      	ldr	r3, [r3, #0]
  40282e:	2b00      	cmp	r3, #0
  402830:	d132      	bne.n	402898 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402832:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402834:	4b2d      	ldr	r3, [pc, #180]	; (4028ec <xTaskResumeAll+0xf4>)
  402836:	4798      	blx	r3
}
  402838:	4620      	mov	r0, r4
  40283a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40283e:	68fb      	ldr	r3, [r7, #12]
  402840:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402842:	f104 0018 	add.w	r0, r4, #24
  402846:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402848:	f104 0804 	add.w	r8, r4, #4
  40284c:	4640      	mov	r0, r8
  40284e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402850:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402852:	682a      	ldr	r2, [r5, #0]
  402854:	2301      	movs	r3, #1
  402856:	4083      	lsls	r3, r0
  402858:	4313      	orrs	r3, r2
  40285a:	602b      	str	r3, [r5, #0]
  40285c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402860:	4641      	mov	r1, r8
  402862:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402866:	4b22      	ldr	r3, [pc, #136]	; (4028f0 <xTaskResumeAll+0xf8>)
  402868:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40286a:	4b22      	ldr	r3, [pc, #136]	; (4028f4 <xTaskResumeAll+0xfc>)
  40286c:	681b      	ldr	r3, [r3, #0]
  40286e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402872:	429a      	cmp	r2, r3
  402874:	d20c      	bcs.n	402890 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402876:	683b      	ldr	r3, [r7, #0]
  402878:	2b00      	cmp	r3, #0
  40287a:	d1e0      	bne.n	40283e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40287c:	4b1e      	ldr	r3, [pc, #120]	; (4028f8 <xTaskResumeAll+0x100>)
  40287e:	681b      	ldr	r3, [r3, #0]
  402880:	b1db      	cbz	r3, 4028ba <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402882:	4b1d      	ldr	r3, [pc, #116]	; (4028f8 <xTaskResumeAll+0x100>)
  402884:	681b      	ldr	r3, [r3, #0]
  402886:	b1c3      	cbz	r3, 4028ba <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402888:	4e1c      	ldr	r6, [pc, #112]	; (4028fc <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40288a:	4d1d      	ldr	r5, [pc, #116]	; (402900 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  40288c:	4c1a      	ldr	r4, [pc, #104]	; (4028f8 <xTaskResumeAll+0x100>)
  40288e:	e00e      	b.n	4028ae <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402890:	2201      	movs	r2, #1
  402892:	4b1b      	ldr	r3, [pc, #108]	; (402900 <xTaskResumeAll+0x108>)
  402894:	601a      	str	r2, [r3, #0]
  402896:	e7ee      	b.n	402876 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402898:	4f1a      	ldr	r7, [pc, #104]	; (402904 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40289a:	4e1b      	ldr	r6, [pc, #108]	; (402908 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  40289c:	4d1b      	ldr	r5, [pc, #108]	; (40290c <xTaskResumeAll+0x114>)
  40289e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402914 <xTaskResumeAll+0x11c>
  4028a2:	e7e8      	b.n	402876 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4028a4:	6823      	ldr	r3, [r4, #0]
  4028a6:	3b01      	subs	r3, #1
  4028a8:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4028aa:	6823      	ldr	r3, [r4, #0]
  4028ac:	b12b      	cbz	r3, 4028ba <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4028ae:	47b0      	blx	r6
  4028b0:	2800      	cmp	r0, #0
  4028b2:	d0f7      	beq.n	4028a4 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4028b4:	2301      	movs	r3, #1
  4028b6:	602b      	str	r3, [r5, #0]
  4028b8:	e7f4      	b.n	4028a4 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4028ba:	4b11      	ldr	r3, [pc, #68]	; (402900 <xTaskResumeAll+0x108>)
  4028bc:	681b      	ldr	r3, [r3, #0]
  4028be:	2b01      	cmp	r3, #1
  4028c0:	d10b      	bne.n	4028da <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4028c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4028c6:	4b12      	ldr	r3, [pc, #72]	; (402910 <xTaskResumeAll+0x118>)
  4028c8:	601a      	str	r2, [r3, #0]
  4028ca:	f3bf 8f4f 	dsb	sy
  4028ce:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4028d2:	2401      	movs	r4, #1
  4028d4:	e7ae      	b.n	402834 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4028d6:	2400      	movs	r4, #0
  4028d8:	e7ac      	b.n	402834 <xTaskResumeAll+0x3c>
  4028da:	2400      	movs	r4, #0
  4028dc:	e7aa      	b.n	402834 <xTaskResumeAll+0x3c>
  4028de:	bf00      	nop
  4028e0:	20400cf4 	.word	0x20400cf4
  4028e4:	0040186d 	.word	0x0040186d
  4028e8:	20400cec 	.word	0x20400cec
  4028ec:	004018b9 	.word	0x004018b9
  4028f0:	0040173d 	.word	0x0040173d
  4028f4:	20400c7c 	.word	0x20400c7c
  4028f8:	20400cf0 	.word	0x20400cf0
  4028fc:	004026ad 	.word	0x004026ad
  402900:	20400d78 	.word	0x20400d78
  402904:	20400d34 	.word	0x20400d34
  402908:	00401789 	.word	0x00401789
  40290c:	20400d00 	.word	0x20400d00
  402910:	e000ed04 	.word	0xe000ed04
  402914:	20400c88 	.word	0x20400c88

00402918 <vTaskDelay>:
	{
  402918:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40291a:	2800      	cmp	r0, #0
  40291c:	d029      	beq.n	402972 <vTaskDelay+0x5a>
  40291e:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402920:	4b18      	ldr	r3, [pc, #96]	; (402984 <vTaskDelay+0x6c>)
  402922:	681b      	ldr	r3, [r3, #0]
  402924:	b153      	cbz	r3, 40293c <vTaskDelay+0x24>
  402926:	f04f 0380 	mov.w	r3, #128	; 0x80
  40292a:	b672      	cpsid	i
  40292c:	f383 8811 	msr	BASEPRI, r3
  402930:	f3bf 8f6f 	isb	sy
  402934:	f3bf 8f4f 	dsb	sy
  402938:	b662      	cpsie	i
  40293a:	e7fe      	b.n	40293a <vTaskDelay+0x22>
			vTaskSuspendAll();
  40293c:	4b12      	ldr	r3, [pc, #72]	; (402988 <vTaskDelay+0x70>)
  40293e:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402940:	4b12      	ldr	r3, [pc, #72]	; (40298c <vTaskDelay+0x74>)
  402942:	681b      	ldr	r3, [r3, #0]
  402944:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402946:	4b12      	ldr	r3, [pc, #72]	; (402990 <vTaskDelay+0x78>)
  402948:	6818      	ldr	r0, [r3, #0]
  40294a:	3004      	adds	r0, #4
  40294c:	4b11      	ldr	r3, [pc, #68]	; (402994 <vTaskDelay+0x7c>)
  40294e:	4798      	blx	r3
  402950:	b948      	cbnz	r0, 402966 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402952:	4b0f      	ldr	r3, [pc, #60]	; (402990 <vTaskDelay+0x78>)
  402954:	681a      	ldr	r2, [r3, #0]
  402956:	4910      	ldr	r1, [pc, #64]	; (402998 <vTaskDelay+0x80>)
  402958:	680b      	ldr	r3, [r1, #0]
  40295a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40295c:	2201      	movs	r2, #1
  40295e:	4082      	lsls	r2, r0
  402960:	ea23 0302 	bic.w	r3, r3, r2
  402964:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402966:	4620      	mov	r0, r4
  402968:	4b0c      	ldr	r3, [pc, #48]	; (40299c <vTaskDelay+0x84>)
  40296a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40296c:	4b0c      	ldr	r3, [pc, #48]	; (4029a0 <vTaskDelay+0x88>)
  40296e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402970:	b938      	cbnz	r0, 402982 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402976:	4b0b      	ldr	r3, [pc, #44]	; (4029a4 <vTaskDelay+0x8c>)
  402978:	601a      	str	r2, [r3, #0]
  40297a:	f3bf 8f4f 	dsb	sy
  40297e:	f3bf 8f6f 	isb	sy
  402982:	bd10      	pop	{r4, pc}
  402984:	20400cf4 	.word	0x20400cf4
  402988:	00402691 	.word	0x00402691
  40298c:	20400d74 	.word	0x20400d74
  402990:	20400c7c 	.word	0x20400c7c
  402994:	00401789 	.word	0x00401789
  402998:	20400d00 	.word	0x20400d00
  40299c:	00402375 	.word	0x00402375
  4029a0:	004027f9 	.word	0x004027f9
  4029a4:	e000ed04 	.word	0xe000ed04

004029a8 <prvIdleTask>:
{
  4029a8:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4029aa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402a34 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4029ae:	4e19      	ldr	r6, [pc, #100]	; (402a14 <prvIdleTask+0x6c>)
				taskYIELD();
  4029b0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402a38 <prvIdleTask+0x90>
  4029b4:	e02a      	b.n	402a0c <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4029b6:	4b18      	ldr	r3, [pc, #96]	; (402a18 <prvIdleTask+0x70>)
  4029b8:	681b      	ldr	r3, [r3, #0]
  4029ba:	2b01      	cmp	r3, #1
  4029bc:	d81e      	bhi.n	4029fc <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4029be:	682b      	ldr	r3, [r5, #0]
  4029c0:	2b00      	cmp	r3, #0
  4029c2:	d0f8      	beq.n	4029b6 <prvIdleTask+0xe>
			vTaskSuspendAll();
  4029c4:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4029c6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4029c8:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4029ca:	2c00      	cmp	r4, #0
  4029cc:	d0f7      	beq.n	4029be <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4029ce:	4b13      	ldr	r3, [pc, #76]	; (402a1c <prvIdleTask+0x74>)
  4029d0:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4029d2:	68f3      	ldr	r3, [r6, #12]
  4029d4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4029d6:	1d20      	adds	r0, r4, #4
  4029d8:	4b11      	ldr	r3, [pc, #68]	; (402a20 <prvIdleTask+0x78>)
  4029da:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4029dc:	4a11      	ldr	r2, [pc, #68]	; (402a24 <prvIdleTask+0x7c>)
  4029de:	6813      	ldr	r3, [r2, #0]
  4029e0:	3b01      	subs	r3, #1
  4029e2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4029e4:	682b      	ldr	r3, [r5, #0]
  4029e6:	3b01      	subs	r3, #1
  4029e8:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4029ea:	4b0f      	ldr	r3, [pc, #60]	; (402a28 <prvIdleTask+0x80>)
  4029ec:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4029ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4029f0:	f8df a048 	ldr.w	sl, [pc, #72]	; 402a3c <prvIdleTask+0x94>
  4029f4:	47d0      	blx	sl
		vPortFree( pxTCB );
  4029f6:	4620      	mov	r0, r4
  4029f8:	47d0      	blx	sl
  4029fa:	e7e0      	b.n	4029be <prvIdleTask+0x16>
				taskYIELD();
  4029fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402a00:	f8c9 3000 	str.w	r3, [r9]
  402a04:	f3bf 8f4f 	dsb	sy
  402a08:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402a0c:	4d07      	ldr	r5, [pc, #28]	; (402a2c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402a0e:	4f08      	ldr	r7, [pc, #32]	; (402a30 <prvIdleTask+0x88>)
  402a10:	e7d5      	b.n	4029be <prvIdleTask+0x16>
  402a12:	bf00      	nop
  402a14:	20400d60 	.word	0x20400d60
  402a18:	20400c88 	.word	0x20400c88
  402a1c:	0040186d 	.word	0x0040186d
  402a20:	00401789 	.word	0x00401789
  402a24:	20400cec 	.word	0x20400cec
  402a28:	004018b9 	.word	0x004018b9
  402a2c:	20400cfc 	.word	0x20400cfc
  402a30:	004027f9 	.word	0x004027f9
  402a34:	00402691 	.word	0x00402691
  402a38:	e000ed04 	.word	0xe000ed04
  402a3c:	00401af9 	.word	0x00401af9

00402a40 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402a40:	4b2d      	ldr	r3, [pc, #180]	; (402af8 <vTaskSwitchContext+0xb8>)
  402a42:	681b      	ldr	r3, [r3, #0]
  402a44:	2b00      	cmp	r3, #0
  402a46:	d12c      	bne.n	402aa2 <vTaskSwitchContext+0x62>
{
  402a48:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402a4a:	2200      	movs	r2, #0
  402a4c:	4b2b      	ldr	r3, [pc, #172]	; (402afc <vTaskSwitchContext+0xbc>)
  402a4e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402a50:	4b2b      	ldr	r3, [pc, #172]	; (402b00 <vTaskSwitchContext+0xc0>)
  402a52:	681b      	ldr	r3, [r3, #0]
  402a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a56:	681a      	ldr	r2, [r3, #0]
  402a58:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402a5c:	d103      	bne.n	402a66 <vTaskSwitchContext+0x26>
  402a5e:	685a      	ldr	r2, [r3, #4]
  402a60:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402a64:	d021      	beq.n	402aaa <vTaskSwitchContext+0x6a>
  402a66:	4b26      	ldr	r3, [pc, #152]	; (402b00 <vTaskSwitchContext+0xc0>)
  402a68:	6818      	ldr	r0, [r3, #0]
  402a6a:	6819      	ldr	r1, [r3, #0]
  402a6c:	3134      	adds	r1, #52	; 0x34
  402a6e:	4b25      	ldr	r3, [pc, #148]	; (402b04 <vTaskSwitchContext+0xc4>)
  402a70:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402a72:	4b25      	ldr	r3, [pc, #148]	; (402b08 <vTaskSwitchContext+0xc8>)
  402a74:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402a76:	fab3 f383 	clz	r3, r3
  402a7a:	b2db      	uxtb	r3, r3
  402a7c:	f1c3 031f 	rsb	r3, r3, #31
  402a80:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402a84:	4a21      	ldr	r2, [pc, #132]	; (402b0c <vTaskSwitchContext+0xcc>)
  402a86:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402a8a:	b9ba      	cbnz	r2, 402abc <vTaskSwitchContext+0x7c>
	__asm volatile
  402a8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a90:	b672      	cpsid	i
  402a92:	f383 8811 	msr	BASEPRI, r3
  402a96:	f3bf 8f6f 	isb	sy
  402a9a:	f3bf 8f4f 	dsb	sy
  402a9e:	b662      	cpsie	i
  402aa0:	e7fe      	b.n	402aa0 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402aa2:	2201      	movs	r2, #1
  402aa4:	4b15      	ldr	r3, [pc, #84]	; (402afc <vTaskSwitchContext+0xbc>)
  402aa6:	601a      	str	r2, [r3, #0]
  402aa8:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402aaa:	689a      	ldr	r2, [r3, #8]
  402aac:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402ab0:	d1d9      	bne.n	402a66 <vTaskSwitchContext+0x26>
  402ab2:	68db      	ldr	r3, [r3, #12]
  402ab4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402ab8:	d1d5      	bne.n	402a66 <vTaskSwitchContext+0x26>
  402aba:	e7da      	b.n	402a72 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402abc:	4a13      	ldr	r2, [pc, #76]	; (402b0c <vTaskSwitchContext+0xcc>)
  402abe:	0099      	lsls	r1, r3, #2
  402ac0:	18c8      	adds	r0, r1, r3
  402ac2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402ac6:	6844      	ldr	r4, [r0, #4]
  402ac8:	6864      	ldr	r4, [r4, #4]
  402aca:	6044      	str	r4, [r0, #4]
  402acc:	4419      	add	r1, r3
  402ace:	4602      	mov	r2, r0
  402ad0:	3208      	adds	r2, #8
  402ad2:	4294      	cmp	r4, r2
  402ad4:	d009      	beq.n	402aea <vTaskSwitchContext+0xaa>
  402ad6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402ada:	4a0c      	ldr	r2, [pc, #48]	; (402b0c <vTaskSwitchContext+0xcc>)
  402adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402ae0:	685b      	ldr	r3, [r3, #4]
  402ae2:	68da      	ldr	r2, [r3, #12]
  402ae4:	4b06      	ldr	r3, [pc, #24]	; (402b00 <vTaskSwitchContext+0xc0>)
  402ae6:	601a      	str	r2, [r3, #0]
  402ae8:	bd10      	pop	{r4, pc}
  402aea:	6860      	ldr	r0, [r4, #4]
  402aec:	4a07      	ldr	r2, [pc, #28]	; (402b0c <vTaskSwitchContext+0xcc>)
  402aee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402af2:	6050      	str	r0, [r2, #4]
  402af4:	e7ef      	b.n	402ad6 <vTaskSwitchContext+0x96>
  402af6:	bf00      	nop
  402af8:	20400cf4 	.word	0x20400cf4
  402afc:	20400d78 	.word	0x20400d78
  402b00:	20400c7c 	.word	0x20400c7c
  402b04:	0040369d 	.word	0x0040369d
  402b08:	20400d00 	.word	0x20400d00
  402b0c:	20400c88 	.word	0x20400c88

00402b10 <vTaskPlaceOnEventList>:
{
  402b10:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402b12:	b1e0      	cbz	r0, 402b4e <vTaskPlaceOnEventList+0x3e>
  402b14:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402b16:	4d17      	ldr	r5, [pc, #92]	; (402b74 <vTaskPlaceOnEventList+0x64>)
  402b18:	6829      	ldr	r1, [r5, #0]
  402b1a:	3118      	adds	r1, #24
  402b1c:	4b16      	ldr	r3, [pc, #88]	; (402b78 <vTaskPlaceOnEventList+0x68>)
  402b1e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b20:	6828      	ldr	r0, [r5, #0]
  402b22:	3004      	adds	r0, #4
  402b24:	4b15      	ldr	r3, [pc, #84]	; (402b7c <vTaskPlaceOnEventList+0x6c>)
  402b26:	4798      	blx	r3
  402b28:	b940      	cbnz	r0, 402b3c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402b2a:	682a      	ldr	r2, [r5, #0]
  402b2c:	4914      	ldr	r1, [pc, #80]	; (402b80 <vTaskPlaceOnEventList+0x70>)
  402b2e:	680b      	ldr	r3, [r1, #0]
  402b30:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402b32:	2201      	movs	r2, #1
  402b34:	4082      	lsls	r2, r0
  402b36:	ea23 0302 	bic.w	r3, r3, r2
  402b3a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402b3c:	f1b4 3fff 	cmp.w	r4, #4294967295
  402b40:	d010      	beq.n	402b64 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402b42:	4b10      	ldr	r3, [pc, #64]	; (402b84 <vTaskPlaceOnEventList+0x74>)
  402b44:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402b46:	4420      	add	r0, r4
  402b48:	4b0f      	ldr	r3, [pc, #60]	; (402b88 <vTaskPlaceOnEventList+0x78>)
  402b4a:	4798      	blx	r3
  402b4c:	bd38      	pop	{r3, r4, r5, pc}
  402b4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b52:	b672      	cpsid	i
  402b54:	f383 8811 	msr	BASEPRI, r3
  402b58:	f3bf 8f6f 	isb	sy
  402b5c:	f3bf 8f4f 	dsb	sy
  402b60:	b662      	cpsie	i
  402b62:	e7fe      	b.n	402b62 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402b64:	4b03      	ldr	r3, [pc, #12]	; (402b74 <vTaskPlaceOnEventList+0x64>)
  402b66:	6819      	ldr	r1, [r3, #0]
  402b68:	3104      	adds	r1, #4
  402b6a:	4808      	ldr	r0, [pc, #32]	; (402b8c <vTaskPlaceOnEventList+0x7c>)
  402b6c:	4b08      	ldr	r3, [pc, #32]	; (402b90 <vTaskPlaceOnEventList+0x80>)
  402b6e:	4798      	blx	r3
  402b70:	bd38      	pop	{r3, r4, r5, pc}
  402b72:	bf00      	nop
  402b74:	20400c7c 	.word	0x20400c7c
  402b78:	00401755 	.word	0x00401755
  402b7c:	00401789 	.word	0x00401789
  402b80:	20400d00 	.word	0x20400d00
  402b84:	20400d74 	.word	0x20400d74
  402b88:	00402375 	.word	0x00402375
  402b8c:	20400d4c 	.word	0x20400d4c
  402b90:	0040173d 	.word	0x0040173d

00402b94 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402b94:	b1e8      	cbz	r0, 402bd2 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402b96:	b570      	push	{r4, r5, r6, lr}
  402b98:	4615      	mov	r5, r2
  402b9a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402b9c:	4e16      	ldr	r6, [pc, #88]	; (402bf8 <vTaskPlaceOnEventListRestricted+0x64>)
  402b9e:	6831      	ldr	r1, [r6, #0]
  402ba0:	3118      	adds	r1, #24
  402ba2:	4b16      	ldr	r3, [pc, #88]	; (402bfc <vTaskPlaceOnEventListRestricted+0x68>)
  402ba4:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402ba6:	6830      	ldr	r0, [r6, #0]
  402ba8:	3004      	adds	r0, #4
  402baa:	4b15      	ldr	r3, [pc, #84]	; (402c00 <vTaskPlaceOnEventListRestricted+0x6c>)
  402bac:	4798      	blx	r3
  402bae:	b940      	cbnz	r0, 402bc2 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402bb0:	6832      	ldr	r2, [r6, #0]
  402bb2:	4914      	ldr	r1, [pc, #80]	; (402c04 <vTaskPlaceOnEventListRestricted+0x70>)
  402bb4:	680b      	ldr	r3, [r1, #0]
  402bb6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402bb8:	2201      	movs	r2, #1
  402bba:	4082      	lsls	r2, r0
  402bbc:	ea23 0302 	bic.w	r3, r3, r2
  402bc0:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402bc2:	2d01      	cmp	r5, #1
  402bc4:	d010      	beq.n	402be8 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402bc6:	4b10      	ldr	r3, [pc, #64]	; (402c08 <vTaskPlaceOnEventListRestricted+0x74>)
  402bc8:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402bca:	4420      	add	r0, r4
  402bcc:	4b0f      	ldr	r3, [pc, #60]	; (402c0c <vTaskPlaceOnEventListRestricted+0x78>)
  402bce:	4798      	blx	r3
  402bd0:	bd70      	pop	{r4, r5, r6, pc}
  402bd2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bd6:	b672      	cpsid	i
  402bd8:	f383 8811 	msr	BASEPRI, r3
  402bdc:	f3bf 8f6f 	isb	sy
  402be0:	f3bf 8f4f 	dsb	sy
  402be4:	b662      	cpsie	i
  402be6:	e7fe      	b.n	402be6 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402be8:	4b03      	ldr	r3, [pc, #12]	; (402bf8 <vTaskPlaceOnEventListRestricted+0x64>)
  402bea:	6819      	ldr	r1, [r3, #0]
  402bec:	3104      	adds	r1, #4
  402bee:	4808      	ldr	r0, [pc, #32]	; (402c10 <vTaskPlaceOnEventListRestricted+0x7c>)
  402bf0:	4b02      	ldr	r3, [pc, #8]	; (402bfc <vTaskPlaceOnEventListRestricted+0x68>)
  402bf2:	4798      	blx	r3
  402bf4:	bd70      	pop	{r4, r5, r6, pc}
  402bf6:	bf00      	nop
  402bf8:	20400c7c 	.word	0x20400c7c
  402bfc:	0040173d 	.word	0x0040173d
  402c00:	00401789 	.word	0x00401789
  402c04:	20400d00 	.word	0x20400d00
  402c08:	20400d74 	.word	0x20400d74
  402c0c:	00402375 	.word	0x00402375
  402c10:	20400d4c 	.word	0x20400d4c

00402c14 <xTaskRemoveFromEventList>:
{
  402c14:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402c16:	68c3      	ldr	r3, [r0, #12]
  402c18:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402c1a:	b324      	cbz	r4, 402c66 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402c1c:	f104 0518 	add.w	r5, r4, #24
  402c20:	4628      	mov	r0, r5
  402c22:	4b1a      	ldr	r3, [pc, #104]	; (402c8c <xTaskRemoveFromEventList+0x78>)
  402c24:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402c26:	4b1a      	ldr	r3, [pc, #104]	; (402c90 <xTaskRemoveFromEventList+0x7c>)
  402c28:	681b      	ldr	r3, [r3, #0]
  402c2a:	bb3b      	cbnz	r3, 402c7c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402c2c:	1d25      	adds	r5, r4, #4
  402c2e:	4628      	mov	r0, r5
  402c30:	4b16      	ldr	r3, [pc, #88]	; (402c8c <xTaskRemoveFromEventList+0x78>)
  402c32:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402c34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402c36:	4a17      	ldr	r2, [pc, #92]	; (402c94 <xTaskRemoveFromEventList+0x80>)
  402c38:	6811      	ldr	r1, [r2, #0]
  402c3a:	2301      	movs	r3, #1
  402c3c:	4083      	lsls	r3, r0
  402c3e:	430b      	orrs	r3, r1
  402c40:	6013      	str	r3, [r2, #0]
  402c42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c46:	4629      	mov	r1, r5
  402c48:	4b13      	ldr	r3, [pc, #76]	; (402c98 <xTaskRemoveFromEventList+0x84>)
  402c4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c4e:	4b13      	ldr	r3, [pc, #76]	; (402c9c <xTaskRemoveFromEventList+0x88>)
  402c50:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402c52:	4b13      	ldr	r3, [pc, #76]	; (402ca0 <xTaskRemoveFromEventList+0x8c>)
  402c54:	681b      	ldr	r3, [r3, #0]
  402c56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402c5a:	429a      	cmp	r2, r3
  402c5c:	d913      	bls.n	402c86 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402c5e:	2001      	movs	r0, #1
  402c60:	4b10      	ldr	r3, [pc, #64]	; (402ca4 <xTaskRemoveFromEventList+0x90>)
  402c62:	6018      	str	r0, [r3, #0]
  402c64:	bd38      	pop	{r3, r4, r5, pc}
  402c66:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c6a:	b672      	cpsid	i
  402c6c:	f383 8811 	msr	BASEPRI, r3
  402c70:	f3bf 8f6f 	isb	sy
  402c74:	f3bf 8f4f 	dsb	sy
  402c78:	b662      	cpsie	i
  402c7a:	e7fe      	b.n	402c7a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402c7c:	4629      	mov	r1, r5
  402c7e:	480a      	ldr	r0, [pc, #40]	; (402ca8 <xTaskRemoveFromEventList+0x94>)
  402c80:	4b06      	ldr	r3, [pc, #24]	; (402c9c <xTaskRemoveFromEventList+0x88>)
  402c82:	4798      	blx	r3
  402c84:	e7e5      	b.n	402c52 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402c86:	2000      	movs	r0, #0
}
  402c88:	bd38      	pop	{r3, r4, r5, pc}
  402c8a:	bf00      	nop
  402c8c:	00401789 	.word	0x00401789
  402c90:	20400cf4 	.word	0x20400cf4
  402c94:	20400d00 	.word	0x20400d00
  402c98:	20400c88 	.word	0x20400c88
  402c9c:	0040173d 	.word	0x0040173d
  402ca0:	20400c7c 	.word	0x20400c7c
  402ca4:	20400d78 	.word	0x20400d78
  402ca8:	20400d34 	.word	0x20400d34

00402cac <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402cac:	b130      	cbz	r0, 402cbc <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402cae:	4a09      	ldr	r2, [pc, #36]	; (402cd4 <vTaskSetTimeOutState+0x28>)
  402cb0:	6812      	ldr	r2, [r2, #0]
  402cb2:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402cb4:	4a08      	ldr	r2, [pc, #32]	; (402cd8 <vTaskSetTimeOutState+0x2c>)
  402cb6:	6812      	ldr	r2, [r2, #0]
  402cb8:	6042      	str	r2, [r0, #4]
  402cba:	4770      	bx	lr
  402cbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cc0:	b672      	cpsid	i
  402cc2:	f383 8811 	msr	BASEPRI, r3
  402cc6:	f3bf 8f6f 	isb	sy
  402cca:	f3bf 8f4f 	dsb	sy
  402cce:	b662      	cpsie	i
  402cd0:	e7fe      	b.n	402cd0 <vTaskSetTimeOutState+0x24>
  402cd2:	bf00      	nop
  402cd4:	20400d30 	.word	0x20400d30
  402cd8:	20400d74 	.word	0x20400d74

00402cdc <xTaskCheckForTimeOut>:
{
  402cdc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402cde:	b1c0      	cbz	r0, 402d12 <xTaskCheckForTimeOut+0x36>
  402ce0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402ce2:	b309      	cbz	r1, 402d28 <xTaskCheckForTimeOut+0x4c>
  402ce4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402ce6:	4b1d      	ldr	r3, [pc, #116]	; (402d5c <xTaskCheckForTimeOut+0x80>)
  402ce8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402cea:	4b1d      	ldr	r3, [pc, #116]	; (402d60 <xTaskCheckForTimeOut+0x84>)
  402cec:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402cee:	682b      	ldr	r3, [r5, #0]
  402cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
  402cf4:	d02e      	beq.n	402d54 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402cf6:	491b      	ldr	r1, [pc, #108]	; (402d64 <xTaskCheckForTimeOut+0x88>)
  402cf8:	6809      	ldr	r1, [r1, #0]
  402cfa:	6820      	ldr	r0, [r4, #0]
  402cfc:	4288      	cmp	r0, r1
  402cfe:	d002      	beq.n	402d06 <xTaskCheckForTimeOut+0x2a>
  402d00:	6861      	ldr	r1, [r4, #4]
  402d02:	428a      	cmp	r2, r1
  402d04:	d228      	bcs.n	402d58 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402d06:	6861      	ldr	r1, [r4, #4]
  402d08:	1a50      	subs	r0, r2, r1
  402d0a:	4283      	cmp	r3, r0
  402d0c:	d817      	bhi.n	402d3e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402d0e:	2401      	movs	r4, #1
  402d10:	e01c      	b.n	402d4c <xTaskCheckForTimeOut+0x70>
  402d12:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d16:	b672      	cpsid	i
  402d18:	f383 8811 	msr	BASEPRI, r3
  402d1c:	f3bf 8f6f 	isb	sy
  402d20:	f3bf 8f4f 	dsb	sy
  402d24:	b662      	cpsie	i
  402d26:	e7fe      	b.n	402d26 <xTaskCheckForTimeOut+0x4a>
  402d28:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d2c:	b672      	cpsid	i
  402d2e:	f383 8811 	msr	BASEPRI, r3
  402d32:	f3bf 8f6f 	isb	sy
  402d36:	f3bf 8f4f 	dsb	sy
  402d3a:	b662      	cpsie	i
  402d3c:	e7fe      	b.n	402d3c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402d3e:	1a9b      	subs	r3, r3, r2
  402d40:	440b      	add	r3, r1
  402d42:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402d44:	4620      	mov	r0, r4
  402d46:	4b08      	ldr	r3, [pc, #32]	; (402d68 <xTaskCheckForTimeOut+0x8c>)
  402d48:	4798      	blx	r3
			xReturn = pdFALSE;
  402d4a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402d4c:	4b07      	ldr	r3, [pc, #28]	; (402d6c <xTaskCheckForTimeOut+0x90>)
  402d4e:	4798      	blx	r3
}
  402d50:	4620      	mov	r0, r4
  402d52:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402d54:	2400      	movs	r4, #0
  402d56:	e7f9      	b.n	402d4c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402d58:	2401      	movs	r4, #1
  402d5a:	e7f7      	b.n	402d4c <xTaskCheckForTimeOut+0x70>
  402d5c:	0040186d 	.word	0x0040186d
  402d60:	20400d74 	.word	0x20400d74
  402d64:	20400d30 	.word	0x20400d30
  402d68:	00402cad 	.word	0x00402cad
  402d6c:	004018b9 	.word	0x004018b9

00402d70 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402d70:	2201      	movs	r2, #1
  402d72:	4b01      	ldr	r3, [pc, #4]	; (402d78 <vTaskMissedYield+0x8>)
  402d74:	601a      	str	r2, [r3, #0]
  402d76:	4770      	bx	lr
  402d78:	20400d78 	.word	0x20400d78

00402d7c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402d7c:	4b05      	ldr	r3, [pc, #20]	; (402d94 <xTaskGetSchedulerState+0x18>)
  402d7e:	681b      	ldr	r3, [r3, #0]
  402d80:	b133      	cbz	r3, 402d90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402d82:	4b05      	ldr	r3, [pc, #20]	; (402d98 <xTaskGetSchedulerState+0x1c>)
  402d84:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402d86:	2b00      	cmp	r3, #0
  402d88:	bf0c      	ite	eq
  402d8a:	2002      	moveq	r0, #2
  402d8c:	2000      	movne	r0, #0
  402d8e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402d90:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402d92:	4770      	bx	lr
  402d94:	20400d48 	.word	0x20400d48
  402d98:	20400cf4 	.word	0x20400cf4

00402d9c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402d9c:	2800      	cmp	r0, #0
  402d9e:	d044      	beq.n	402e2a <vTaskPriorityInherit+0x8e>
	{
  402da0:	b538      	push	{r3, r4, r5, lr}
  402da2:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402da4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402da6:	4921      	ldr	r1, [pc, #132]	; (402e2c <vTaskPriorityInherit+0x90>)
  402da8:	6809      	ldr	r1, [r1, #0]
  402daa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402dac:	428a      	cmp	r2, r1
  402dae:	d214      	bcs.n	402dda <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402db0:	6981      	ldr	r1, [r0, #24]
  402db2:	2900      	cmp	r1, #0
  402db4:	db05      	blt.n	402dc2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402db6:	491d      	ldr	r1, [pc, #116]	; (402e2c <vTaskPriorityInherit+0x90>)
  402db8:	6809      	ldr	r1, [r1, #0]
  402dba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402dbc:	f1c1 0105 	rsb	r1, r1, #5
  402dc0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402dc2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402dc6:	491a      	ldr	r1, [pc, #104]	; (402e30 <vTaskPriorityInherit+0x94>)
  402dc8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402dcc:	6961      	ldr	r1, [r4, #20]
  402dce:	4291      	cmp	r1, r2
  402dd0:	d004      	beq.n	402ddc <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402dd2:	4a16      	ldr	r2, [pc, #88]	; (402e2c <vTaskPriorityInherit+0x90>)
  402dd4:	6812      	ldr	r2, [r2, #0]
  402dd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402dd8:	62e2      	str	r2, [r4, #44]	; 0x2c
  402dda:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402ddc:	1d25      	adds	r5, r4, #4
  402dde:	4628      	mov	r0, r5
  402de0:	4b14      	ldr	r3, [pc, #80]	; (402e34 <vTaskPriorityInherit+0x98>)
  402de2:	4798      	blx	r3
  402de4:	b970      	cbnz	r0, 402e04 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402de6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402de8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402dec:	4a10      	ldr	r2, [pc, #64]	; (402e30 <vTaskPriorityInherit+0x94>)
  402dee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402df2:	b93a      	cbnz	r2, 402e04 <vTaskPriorityInherit+0x68>
  402df4:	4810      	ldr	r0, [pc, #64]	; (402e38 <vTaskPriorityInherit+0x9c>)
  402df6:	6802      	ldr	r2, [r0, #0]
  402df8:	2101      	movs	r1, #1
  402dfa:	fa01 f303 	lsl.w	r3, r1, r3
  402dfe:	ea22 0303 	bic.w	r3, r2, r3
  402e02:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402e04:	4b09      	ldr	r3, [pc, #36]	; (402e2c <vTaskPriorityInherit+0x90>)
  402e06:	681b      	ldr	r3, [r3, #0]
  402e08:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402e0a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402e0c:	4a0a      	ldr	r2, [pc, #40]	; (402e38 <vTaskPriorityInherit+0x9c>)
  402e0e:	6811      	ldr	r1, [r2, #0]
  402e10:	2301      	movs	r3, #1
  402e12:	4083      	lsls	r3, r0
  402e14:	430b      	orrs	r3, r1
  402e16:	6013      	str	r3, [r2, #0]
  402e18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402e1c:	4629      	mov	r1, r5
  402e1e:	4b04      	ldr	r3, [pc, #16]	; (402e30 <vTaskPriorityInherit+0x94>)
  402e20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402e24:	4b05      	ldr	r3, [pc, #20]	; (402e3c <vTaskPriorityInherit+0xa0>)
  402e26:	4798      	blx	r3
  402e28:	bd38      	pop	{r3, r4, r5, pc}
  402e2a:	4770      	bx	lr
  402e2c:	20400c7c 	.word	0x20400c7c
  402e30:	20400c88 	.word	0x20400c88
  402e34:	00401789 	.word	0x00401789
  402e38:	20400d00 	.word	0x20400d00
  402e3c:	0040173d 	.word	0x0040173d

00402e40 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402e40:	2800      	cmp	r0, #0
  402e42:	d04d      	beq.n	402ee0 <xTaskPriorityDisinherit+0xa0>
	{
  402e44:	b538      	push	{r3, r4, r5, lr}
  402e46:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402e48:	4a27      	ldr	r2, [pc, #156]	; (402ee8 <xTaskPriorityDisinherit+0xa8>)
  402e4a:	6812      	ldr	r2, [r2, #0]
  402e4c:	4290      	cmp	r0, r2
  402e4e:	d00a      	beq.n	402e66 <xTaskPriorityDisinherit+0x26>
  402e50:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e54:	b672      	cpsid	i
  402e56:	f383 8811 	msr	BASEPRI, r3
  402e5a:	f3bf 8f6f 	isb	sy
  402e5e:	f3bf 8f4f 	dsb	sy
  402e62:	b662      	cpsie	i
  402e64:	e7fe      	b.n	402e64 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402e66:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402e68:	b952      	cbnz	r2, 402e80 <xTaskPriorityDisinherit+0x40>
  402e6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e6e:	b672      	cpsid	i
  402e70:	f383 8811 	msr	BASEPRI, r3
  402e74:	f3bf 8f6f 	isb	sy
  402e78:	f3bf 8f4f 	dsb	sy
  402e7c:	b662      	cpsie	i
  402e7e:	e7fe      	b.n	402e7e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402e80:	3a01      	subs	r2, #1
  402e82:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402e84:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402e86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402e88:	4288      	cmp	r0, r1
  402e8a:	d02b      	beq.n	402ee4 <xTaskPriorityDisinherit+0xa4>
  402e8c:	bb52      	cbnz	r2, 402ee4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402e8e:	1d25      	adds	r5, r4, #4
  402e90:	4628      	mov	r0, r5
  402e92:	4b16      	ldr	r3, [pc, #88]	; (402eec <xTaskPriorityDisinherit+0xac>)
  402e94:	4798      	blx	r3
  402e96:	b968      	cbnz	r0, 402eb4 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402e98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402e9a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402e9e:	4b14      	ldr	r3, [pc, #80]	; (402ef0 <xTaskPriorityDisinherit+0xb0>)
  402ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402ea4:	b933      	cbnz	r3, 402eb4 <xTaskPriorityDisinherit+0x74>
  402ea6:	4813      	ldr	r0, [pc, #76]	; (402ef4 <xTaskPriorityDisinherit+0xb4>)
  402ea8:	6803      	ldr	r3, [r0, #0]
  402eaa:	2201      	movs	r2, #1
  402eac:	408a      	lsls	r2, r1
  402eae:	ea23 0302 	bic.w	r3, r3, r2
  402eb2:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402eb4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402eb6:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402eb8:	f1c0 0305 	rsb	r3, r0, #5
  402ebc:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402ebe:	4a0d      	ldr	r2, [pc, #52]	; (402ef4 <xTaskPriorityDisinherit+0xb4>)
  402ec0:	6811      	ldr	r1, [r2, #0]
  402ec2:	2401      	movs	r4, #1
  402ec4:	fa04 f300 	lsl.w	r3, r4, r0
  402ec8:	430b      	orrs	r3, r1
  402eca:	6013      	str	r3, [r2, #0]
  402ecc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ed0:	4629      	mov	r1, r5
  402ed2:	4b07      	ldr	r3, [pc, #28]	; (402ef0 <xTaskPriorityDisinherit+0xb0>)
  402ed4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ed8:	4b07      	ldr	r3, [pc, #28]	; (402ef8 <xTaskPriorityDisinherit+0xb8>)
  402eda:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402edc:	4620      	mov	r0, r4
  402ede:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402ee0:	2000      	movs	r0, #0
  402ee2:	4770      	bx	lr
  402ee4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402ee6:	bd38      	pop	{r3, r4, r5, pc}
  402ee8:	20400c7c 	.word	0x20400c7c
  402eec:	00401789 	.word	0x00401789
  402ef0:	20400c88 	.word	0x20400c88
  402ef4:	20400d00 	.word	0x20400d00
  402ef8:	0040173d 	.word	0x0040173d

00402efc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402efc:	4b05      	ldr	r3, [pc, #20]	; (402f14 <pvTaskIncrementMutexHeldCount+0x18>)
  402efe:	681b      	ldr	r3, [r3, #0]
  402f00:	b123      	cbz	r3, 402f0c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402f02:	4b04      	ldr	r3, [pc, #16]	; (402f14 <pvTaskIncrementMutexHeldCount+0x18>)
  402f04:	681a      	ldr	r2, [r3, #0]
  402f06:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402f08:	3301      	adds	r3, #1
  402f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402f0c:	4b01      	ldr	r3, [pc, #4]	; (402f14 <pvTaskIncrementMutexHeldCount+0x18>)
  402f0e:	6818      	ldr	r0, [r3, #0]
	}
  402f10:	4770      	bx	lr
  402f12:	bf00      	nop
  402f14:	20400c7c 	.word	0x20400c7c

00402f18 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402f18:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402f1a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402f1c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402f1e:	4291      	cmp	r1, r2
  402f20:	d80c      	bhi.n	402f3c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402f22:	1ad2      	subs	r2, r2, r3
  402f24:	6983      	ldr	r3, [r0, #24]
  402f26:	429a      	cmp	r2, r3
  402f28:	d301      	bcc.n	402f2e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402f2a:	2001      	movs	r0, #1
  402f2c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402f2e:	1d01      	adds	r1, r0, #4
  402f30:	4b09      	ldr	r3, [pc, #36]	; (402f58 <prvInsertTimerInActiveList+0x40>)
  402f32:	6818      	ldr	r0, [r3, #0]
  402f34:	4b09      	ldr	r3, [pc, #36]	; (402f5c <prvInsertTimerInActiveList+0x44>)
  402f36:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402f38:	2000      	movs	r0, #0
  402f3a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402f3c:	429a      	cmp	r2, r3
  402f3e:	d203      	bcs.n	402f48 <prvInsertTimerInActiveList+0x30>
  402f40:	4299      	cmp	r1, r3
  402f42:	d301      	bcc.n	402f48 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402f44:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402f46:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402f48:	1d01      	adds	r1, r0, #4
  402f4a:	4b05      	ldr	r3, [pc, #20]	; (402f60 <prvInsertTimerInActiveList+0x48>)
  402f4c:	6818      	ldr	r0, [r3, #0]
  402f4e:	4b03      	ldr	r3, [pc, #12]	; (402f5c <prvInsertTimerInActiveList+0x44>)
  402f50:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402f52:	2000      	movs	r0, #0
  402f54:	bd08      	pop	{r3, pc}
  402f56:	bf00      	nop
  402f58:	20400d80 	.word	0x20400d80
  402f5c:	00401755 	.word	0x00401755
  402f60:	20400d7c 	.word	0x20400d7c

00402f64 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402f64:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402f66:	4b15      	ldr	r3, [pc, #84]	; (402fbc <prvCheckForValidListAndQueue+0x58>)
  402f68:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402f6a:	4b15      	ldr	r3, [pc, #84]	; (402fc0 <prvCheckForValidListAndQueue+0x5c>)
  402f6c:	681b      	ldr	r3, [r3, #0]
  402f6e:	b113      	cbz	r3, 402f76 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402f70:	4b14      	ldr	r3, [pc, #80]	; (402fc4 <prvCheckForValidListAndQueue+0x60>)
  402f72:	4798      	blx	r3
  402f74:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402f76:	4d14      	ldr	r5, [pc, #80]	; (402fc8 <prvCheckForValidListAndQueue+0x64>)
  402f78:	4628      	mov	r0, r5
  402f7a:	4e14      	ldr	r6, [pc, #80]	; (402fcc <prvCheckForValidListAndQueue+0x68>)
  402f7c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402f7e:	4c14      	ldr	r4, [pc, #80]	; (402fd0 <prvCheckForValidListAndQueue+0x6c>)
  402f80:	4620      	mov	r0, r4
  402f82:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402f84:	4b13      	ldr	r3, [pc, #76]	; (402fd4 <prvCheckForValidListAndQueue+0x70>)
  402f86:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402f88:	4b13      	ldr	r3, [pc, #76]	; (402fd8 <prvCheckForValidListAndQueue+0x74>)
  402f8a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402f8c:	2200      	movs	r2, #0
  402f8e:	2110      	movs	r1, #16
  402f90:	2005      	movs	r0, #5
  402f92:	4b12      	ldr	r3, [pc, #72]	; (402fdc <prvCheckForValidListAndQueue+0x78>)
  402f94:	4798      	blx	r3
  402f96:	4b0a      	ldr	r3, [pc, #40]	; (402fc0 <prvCheckForValidListAndQueue+0x5c>)
  402f98:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402f9a:	b118      	cbz	r0, 402fa4 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402f9c:	4910      	ldr	r1, [pc, #64]	; (402fe0 <prvCheckForValidListAndQueue+0x7c>)
  402f9e:	4b11      	ldr	r3, [pc, #68]	; (402fe4 <prvCheckForValidListAndQueue+0x80>)
  402fa0:	4798      	blx	r3
  402fa2:	e7e5      	b.n	402f70 <prvCheckForValidListAndQueue+0xc>
  402fa4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fa8:	b672      	cpsid	i
  402faa:	f383 8811 	msr	BASEPRI, r3
  402fae:	f3bf 8f6f 	isb	sy
  402fb2:	f3bf 8f4f 	dsb	sy
  402fb6:	b662      	cpsie	i
  402fb8:	e7fe      	b.n	402fb8 <prvCheckForValidListAndQueue+0x54>
  402fba:	bf00      	nop
  402fbc:	0040186d 	.word	0x0040186d
  402fc0:	20400db0 	.word	0x20400db0
  402fc4:	004018b9 	.word	0x004018b9
  402fc8:	20400d84 	.word	0x20400d84
  402fcc:	00401721 	.word	0x00401721
  402fd0:	20400d98 	.word	0x20400d98
  402fd4:	20400d7c 	.word	0x20400d7c
  402fd8:	20400d80 	.word	0x20400d80
  402fdc:	00401d8d 	.word	0x00401d8d
  402fe0:	0040aee0 	.word	0x0040aee0
  402fe4:	004022bd 	.word	0x004022bd

00402fe8 <xTimerCreateTimerTask>:
{
  402fe8:	b510      	push	{r4, lr}
  402fea:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402fec:	4b0f      	ldr	r3, [pc, #60]	; (40302c <xTimerCreateTimerTask+0x44>)
  402fee:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402ff0:	4b0f      	ldr	r3, [pc, #60]	; (403030 <xTimerCreateTimerTask+0x48>)
  402ff2:	681b      	ldr	r3, [r3, #0]
  402ff4:	b173      	cbz	r3, 403014 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402ff6:	2300      	movs	r3, #0
  402ff8:	9303      	str	r3, [sp, #12]
  402ffa:	9302      	str	r3, [sp, #8]
  402ffc:	9301      	str	r3, [sp, #4]
  402ffe:	2204      	movs	r2, #4
  403000:	9200      	str	r2, [sp, #0]
  403002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403006:	490b      	ldr	r1, [pc, #44]	; (403034 <xTimerCreateTimerTask+0x4c>)
  403008:	480b      	ldr	r0, [pc, #44]	; (403038 <xTimerCreateTimerTask+0x50>)
  40300a:	4c0c      	ldr	r4, [pc, #48]	; (40303c <xTimerCreateTimerTask+0x54>)
  40300c:	47a0      	blx	r4
	configASSERT( xReturn );
  40300e:	b108      	cbz	r0, 403014 <xTimerCreateTimerTask+0x2c>
}
  403010:	b004      	add	sp, #16
  403012:	bd10      	pop	{r4, pc}
  403014:	f04f 0380 	mov.w	r3, #128	; 0x80
  403018:	b672      	cpsid	i
  40301a:	f383 8811 	msr	BASEPRI, r3
  40301e:	f3bf 8f6f 	isb	sy
  403022:	f3bf 8f4f 	dsb	sy
  403026:	b662      	cpsie	i
  403028:	e7fe      	b.n	403028 <xTimerCreateTimerTask+0x40>
  40302a:	bf00      	nop
  40302c:	00402f65 	.word	0x00402f65
  403030:	20400db0 	.word	0x20400db0
  403034:	0040aee8 	.word	0x0040aee8
  403038:	00403169 	.word	0x00403169
  40303c:	004023cd 	.word	0x004023cd

00403040 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403040:	b1d8      	cbz	r0, 40307a <xTimerGenericCommand+0x3a>
{
  403042:	b530      	push	{r4, r5, lr}
  403044:	b085      	sub	sp, #20
  403046:	4615      	mov	r5, r2
  403048:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40304a:	4a15      	ldr	r2, [pc, #84]	; (4030a0 <xTimerGenericCommand+0x60>)
  40304c:	6810      	ldr	r0, [r2, #0]
  40304e:	b320      	cbz	r0, 40309a <xTimerGenericCommand+0x5a>
  403050:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403052:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403054:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403056:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403058:	2905      	cmp	r1, #5
  40305a:	dc19      	bgt.n	403090 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40305c:	4b11      	ldr	r3, [pc, #68]	; (4030a4 <xTimerGenericCommand+0x64>)
  40305e:	4798      	blx	r3
  403060:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403062:	f04f 0300 	mov.w	r3, #0
  403066:	bf0c      	ite	eq
  403068:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40306a:	461a      	movne	r2, r3
  40306c:	4669      	mov	r1, sp
  40306e:	480c      	ldr	r0, [pc, #48]	; (4030a0 <xTimerGenericCommand+0x60>)
  403070:	6800      	ldr	r0, [r0, #0]
  403072:	4c0d      	ldr	r4, [pc, #52]	; (4030a8 <xTimerGenericCommand+0x68>)
  403074:	47a0      	blx	r4
}
  403076:	b005      	add	sp, #20
  403078:	bd30      	pop	{r4, r5, pc}
  40307a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40307e:	b672      	cpsid	i
  403080:	f383 8811 	msr	BASEPRI, r3
  403084:	f3bf 8f6f 	isb	sy
  403088:	f3bf 8f4f 	dsb	sy
  40308c:	b662      	cpsie	i
  40308e:	e7fe      	b.n	40308e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403090:	2300      	movs	r3, #0
  403092:	4669      	mov	r1, sp
  403094:	4c05      	ldr	r4, [pc, #20]	; (4030ac <xTimerGenericCommand+0x6c>)
  403096:	47a0      	blx	r4
  403098:	e7ed      	b.n	403076 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  40309a:	2000      	movs	r0, #0
	return xReturn;
  40309c:	e7eb      	b.n	403076 <xTimerGenericCommand+0x36>
  40309e:	bf00      	nop
  4030a0:	20400db0 	.word	0x20400db0
  4030a4:	00402d7d 	.word	0x00402d7d
  4030a8:	00401e09 	.word	0x00401e09
  4030ac:	00401fed 	.word	0x00401fed

004030b0 <prvSampleTimeNow>:
{
  4030b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4030b4:	b082      	sub	sp, #8
  4030b6:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4030b8:	4b24      	ldr	r3, [pc, #144]	; (40314c <prvSampleTimeNow+0x9c>)
  4030ba:	4798      	blx	r3
  4030bc:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4030be:	4b24      	ldr	r3, [pc, #144]	; (403150 <prvSampleTimeNow+0xa0>)
  4030c0:	681b      	ldr	r3, [r3, #0]
  4030c2:	4298      	cmp	r0, r3
  4030c4:	d31b      	bcc.n	4030fe <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4030c6:	2300      	movs	r3, #0
  4030c8:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  4030cc:	4b20      	ldr	r3, [pc, #128]	; (403150 <prvSampleTimeNow+0xa0>)
  4030ce:	601f      	str	r7, [r3, #0]
}
  4030d0:	4638      	mov	r0, r7
  4030d2:	b002      	add	sp, #8
  4030d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4030d8:	2100      	movs	r1, #0
  4030da:	9100      	str	r1, [sp, #0]
  4030dc:	460b      	mov	r3, r1
  4030de:	4652      	mov	r2, sl
  4030e0:	4620      	mov	r0, r4
  4030e2:	4c1c      	ldr	r4, [pc, #112]	; (403154 <prvSampleTimeNow+0xa4>)
  4030e4:	47a0      	blx	r4
				configASSERT( xResult );
  4030e6:	b960      	cbnz	r0, 403102 <prvSampleTimeNow+0x52>
  4030e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030ec:	b672      	cpsid	i
  4030ee:	f383 8811 	msr	BASEPRI, r3
  4030f2:	f3bf 8f6f 	isb	sy
  4030f6:	f3bf 8f4f 	dsb	sy
  4030fa:	b662      	cpsie	i
  4030fc:	e7fe      	b.n	4030fc <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4030fe:	4d16      	ldr	r5, [pc, #88]	; (403158 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403100:	4e16      	ldr	r6, [pc, #88]	; (40315c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  403102:	682b      	ldr	r3, [r5, #0]
  403104:	681a      	ldr	r2, [r3, #0]
  403106:	b1c2      	cbz	r2, 40313a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403108:	68db      	ldr	r3, [r3, #12]
  40310a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40310e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403110:	f104 0904 	add.w	r9, r4, #4
  403114:	4648      	mov	r0, r9
  403116:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403118:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40311a:	4620      	mov	r0, r4
  40311c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40311e:	69e3      	ldr	r3, [r4, #28]
  403120:	2b01      	cmp	r3, #1
  403122:	d1ee      	bne.n	403102 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403124:	69a3      	ldr	r3, [r4, #24]
  403126:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403128:	459a      	cmp	sl, r3
  40312a:	d2d5      	bcs.n	4030d8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40312c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40312e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403130:	4649      	mov	r1, r9
  403132:	6828      	ldr	r0, [r5, #0]
  403134:	4b0a      	ldr	r3, [pc, #40]	; (403160 <prvSampleTimeNow+0xb0>)
  403136:	4798      	blx	r3
  403138:	e7e3      	b.n	403102 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40313a:	4a0a      	ldr	r2, [pc, #40]	; (403164 <prvSampleTimeNow+0xb4>)
  40313c:	6810      	ldr	r0, [r2, #0]
  40313e:	4906      	ldr	r1, [pc, #24]	; (403158 <prvSampleTimeNow+0xa8>)
  403140:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403142:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403144:	2301      	movs	r3, #1
  403146:	f8c8 3000 	str.w	r3, [r8]
  40314a:	e7bf      	b.n	4030cc <prvSampleTimeNow+0x1c>
  40314c:	004026a1 	.word	0x004026a1
  403150:	20400dac 	.word	0x20400dac
  403154:	00403041 	.word	0x00403041
  403158:	20400d7c 	.word	0x20400d7c
  40315c:	00401789 	.word	0x00401789
  403160:	00401755 	.word	0x00401755
  403164:	20400d80 	.word	0x20400d80

00403168 <prvTimerTask>:
{
  403168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40316c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40316e:	4e75      	ldr	r6, [pc, #468]	; (403344 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403170:	4f75      	ldr	r7, [pc, #468]	; (403348 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  403172:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403370 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403176:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403374 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40317a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  40317c:	681a      	ldr	r2, [r3, #0]
  40317e:	2a00      	cmp	r2, #0
  403180:	f000 80ce 	beq.w	403320 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403184:	68db      	ldr	r3, [r3, #12]
  403186:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403188:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40318a:	a804      	add	r0, sp, #16
  40318c:	4b6f      	ldr	r3, [pc, #444]	; (40334c <prvTimerTask+0x1e4>)
  40318e:	4798      	blx	r3
  403190:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403192:	9b04      	ldr	r3, [sp, #16]
  403194:	2b00      	cmp	r3, #0
  403196:	d144      	bne.n	403222 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403198:	42a0      	cmp	r0, r4
  40319a:	d212      	bcs.n	4031c2 <prvTimerTask+0x5a>
  40319c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40319e:	1b61      	subs	r1, r4, r5
  4031a0:	4b6b      	ldr	r3, [pc, #428]	; (403350 <prvTimerTask+0x1e8>)
  4031a2:	6818      	ldr	r0, [r3, #0]
  4031a4:	4b6b      	ldr	r3, [pc, #428]	; (403354 <prvTimerTask+0x1ec>)
  4031a6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4031a8:	4b6b      	ldr	r3, [pc, #428]	; (403358 <prvTimerTask+0x1f0>)
  4031aa:	4798      	blx	r3
  4031ac:	2800      	cmp	r0, #0
  4031ae:	d13a      	bne.n	403226 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4031b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4031b4:	f8c9 3000 	str.w	r3, [r9]
  4031b8:	f3bf 8f4f 	dsb	sy
  4031bc:	f3bf 8f6f 	isb	sy
  4031c0:	e031      	b.n	403226 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4031c2:	4b65      	ldr	r3, [pc, #404]	; (403358 <prvTimerTask+0x1f0>)
  4031c4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4031c6:	6833      	ldr	r3, [r6, #0]
  4031c8:	68db      	ldr	r3, [r3, #12]
  4031ca:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4031ce:	f10a 0004 	add.w	r0, sl, #4
  4031d2:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4031d4:	f8da 301c 	ldr.w	r3, [sl, #28]
  4031d8:	2b01      	cmp	r3, #1
  4031da:	d004      	beq.n	4031e6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4031dc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4031e0:	4650      	mov	r0, sl
  4031e2:	4798      	blx	r3
  4031e4:	e01f      	b.n	403226 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4031e6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4031ea:	4623      	mov	r3, r4
  4031ec:	462a      	mov	r2, r5
  4031ee:	4421      	add	r1, r4
  4031f0:	4650      	mov	r0, sl
  4031f2:	4d5a      	ldr	r5, [pc, #360]	; (40335c <prvTimerTask+0x1f4>)
  4031f4:	47a8      	blx	r5
  4031f6:	2801      	cmp	r0, #1
  4031f8:	d1f0      	bne.n	4031dc <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4031fa:	2100      	movs	r1, #0
  4031fc:	9100      	str	r1, [sp, #0]
  4031fe:	460b      	mov	r3, r1
  403200:	4622      	mov	r2, r4
  403202:	4650      	mov	r0, sl
  403204:	4c56      	ldr	r4, [pc, #344]	; (403360 <prvTimerTask+0x1f8>)
  403206:	47a0      	blx	r4
			configASSERT( xResult );
  403208:	2800      	cmp	r0, #0
  40320a:	d1e7      	bne.n	4031dc <prvTimerTask+0x74>
  40320c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403210:	b672      	cpsid	i
  403212:	f383 8811 	msr	BASEPRI, r3
  403216:	f3bf 8f6f 	isb	sy
  40321a:	f3bf 8f4f 	dsb	sy
  40321e:	b662      	cpsie	i
  403220:	e7fe      	b.n	403220 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403222:	4b4d      	ldr	r3, [pc, #308]	; (403358 <prvTimerTask+0x1f0>)
  403224:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403226:	4d4a      	ldr	r5, [pc, #296]	; (403350 <prvTimerTask+0x1e8>)
  403228:	4c4e      	ldr	r4, [pc, #312]	; (403364 <prvTimerTask+0x1fc>)
  40322a:	e006      	b.n	40323a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40322c:	9907      	ldr	r1, [sp, #28]
  40322e:	9806      	ldr	r0, [sp, #24]
  403230:	9b05      	ldr	r3, [sp, #20]
  403232:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403234:	9b04      	ldr	r3, [sp, #16]
  403236:	2b00      	cmp	r3, #0
  403238:	da09      	bge.n	40324e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40323a:	2300      	movs	r3, #0
  40323c:	461a      	mov	r2, r3
  40323e:	a904      	add	r1, sp, #16
  403240:	6828      	ldr	r0, [r5, #0]
  403242:	47a0      	blx	r4
  403244:	2800      	cmp	r0, #0
  403246:	d098      	beq.n	40317a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403248:	9b04      	ldr	r3, [sp, #16]
  40324a:	2b00      	cmp	r3, #0
  40324c:	dbee      	blt.n	40322c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40324e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403252:	f8da 3014 	ldr.w	r3, [sl, #20]
  403256:	b113      	cbz	r3, 40325e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403258:	f10a 0004 	add.w	r0, sl, #4
  40325c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40325e:	a803      	add	r0, sp, #12
  403260:	4b3a      	ldr	r3, [pc, #232]	; (40334c <prvTimerTask+0x1e4>)
  403262:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403264:	9b04      	ldr	r3, [sp, #16]
  403266:	2b09      	cmp	r3, #9
  403268:	d8e7      	bhi.n	40323a <prvTimerTask+0xd2>
  40326a:	a201      	add	r2, pc, #4	; (adr r2, 403270 <prvTimerTask+0x108>)
  40326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403270:	00403299 	.word	0x00403299
  403274:	00403299 	.word	0x00403299
  403278:	00403299 	.word	0x00403299
  40327c:	0040323b 	.word	0x0040323b
  403280:	004032ed 	.word	0x004032ed
  403284:	00403319 	.word	0x00403319
  403288:	00403299 	.word	0x00403299
  40328c:	00403299 	.word	0x00403299
  403290:	0040323b 	.word	0x0040323b
  403294:	004032ed 	.word	0x004032ed
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403298:	9c05      	ldr	r4, [sp, #20]
  40329a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40329e:	4623      	mov	r3, r4
  4032a0:	4602      	mov	r2, r0
  4032a2:	4421      	add	r1, r4
  4032a4:	4650      	mov	r0, sl
  4032a6:	4c2d      	ldr	r4, [pc, #180]	; (40335c <prvTimerTask+0x1f4>)
  4032a8:	47a0      	blx	r4
  4032aa:	2801      	cmp	r0, #1
  4032ac:	d1bc      	bne.n	403228 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4032ae:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4032b2:	4650      	mov	r0, sl
  4032b4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4032b6:	f8da 301c 	ldr.w	r3, [sl, #28]
  4032ba:	2b01      	cmp	r3, #1
  4032bc:	d1b4      	bne.n	403228 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4032be:	f8da 2018 	ldr.w	r2, [sl, #24]
  4032c2:	2100      	movs	r1, #0
  4032c4:	9100      	str	r1, [sp, #0]
  4032c6:	460b      	mov	r3, r1
  4032c8:	9805      	ldr	r0, [sp, #20]
  4032ca:	4402      	add	r2, r0
  4032cc:	4650      	mov	r0, sl
  4032ce:	4c24      	ldr	r4, [pc, #144]	; (403360 <prvTimerTask+0x1f8>)
  4032d0:	47a0      	blx	r4
							configASSERT( xResult );
  4032d2:	2800      	cmp	r0, #0
  4032d4:	d1a8      	bne.n	403228 <prvTimerTask+0xc0>
  4032d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032da:	b672      	cpsid	i
  4032dc:	f383 8811 	msr	BASEPRI, r3
  4032e0:	f3bf 8f6f 	isb	sy
  4032e4:	f3bf 8f4f 	dsb	sy
  4032e8:	b662      	cpsie	i
  4032ea:	e7fe      	b.n	4032ea <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4032ec:	9905      	ldr	r1, [sp, #20]
  4032ee:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4032f2:	b131      	cbz	r1, 403302 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4032f4:	4603      	mov	r3, r0
  4032f6:	4602      	mov	r2, r0
  4032f8:	4401      	add	r1, r0
  4032fa:	4650      	mov	r0, sl
  4032fc:	4c17      	ldr	r4, [pc, #92]	; (40335c <prvTimerTask+0x1f4>)
  4032fe:	47a0      	blx	r4
  403300:	e792      	b.n	403228 <prvTimerTask+0xc0>
  403302:	f04f 0380 	mov.w	r3, #128	; 0x80
  403306:	b672      	cpsid	i
  403308:	f383 8811 	msr	BASEPRI, r3
  40330c:	f3bf 8f6f 	isb	sy
  403310:	f3bf 8f4f 	dsb	sy
  403314:	b662      	cpsie	i
  403316:	e7fe      	b.n	403316 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403318:	4650      	mov	r0, sl
  40331a:	4b13      	ldr	r3, [pc, #76]	; (403368 <prvTimerTask+0x200>)
  40331c:	4798      	blx	r3
  40331e:	e783      	b.n	403228 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403320:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403322:	a804      	add	r0, sp, #16
  403324:	4b09      	ldr	r3, [pc, #36]	; (40334c <prvTimerTask+0x1e4>)
  403326:	4798      	blx	r3
  403328:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40332a:	9b04      	ldr	r3, [sp, #16]
  40332c:	2b00      	cmp	r3, #0
  40332e:	f47f af78 	bne.w	403222 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403332:	4b0e      	ldr	r3, [pc, #56]	; (40336c <prvTimerTask+0x204>)
  403334:	681b      	ldr	r3, [r3, #0]
  403336:	681a      	ldr	r2, [r3, #0]
  403338:	fab2 f282 	clz	r2, r2
  40333c:	0952      	lsrs	r2, r2, #5
  40333e:	2400      	movs	r4, #0
  403340:	e72d      	b.n	40319e <prvTimerTask+0x36>
  403342:	bf00      	nop
  403344:	20400d7c 	.word	0x20400d7c
  403348:	00402691 	.word	0x00402691
  40334c:	004030b1 	.word	0x004030b1
  403350:	20400db0 	.word	0x20400db0
  403354:	004022f1 	.word	0x004022f1
  403358:	004027f9 	.word	0x004027f9
  40335c:	00402f19 	.word	0x00402f19
  403360:	00403041 	.word	0x00403041
  403364:	004020ed 	.word	0x004020ed
  403368:	00401af9 	.word	0x00401af9
  40336c:	20400d80 	.word	0x20400d80
  403370:	e000ed04 	.word	0xe000ed04
  403374:	00401789 	.word	0x00401789

00403378 <but_callback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void but_callback(void) {
  403378:	4770      	bx	lr
	...

0040337c <task_orientacao>:
		

	}
}

static void task_orientacao(void *pvParameters) {
  40337c:	b580      	push	{r7, lr}
  40337e:	b082      	sub	sp, #8
				pio_clear(LED_2_PIO, LED_2_IDX_MASK);
			}
			if(orientacao[1] == 0){ //esquerda
				//desligando led 2 e 3 e ligando led 1
				pio_set(LED_3_PIO, LED_3_IDX_MASK);
				pio_clear(LED_1_PIO, LED_1_IDX_MASK);
  403380:	4e24      	ldr	r6, [pc, #144]	; (403414 <task_orientacao+0x98>)
				pio_clear(LED_2_PIO, LED_2_IDX_MASK);
  403382:	4f25      	ldr	r7, [pc, #148]	; (403418 <task_orientacao+0x9c>)
  403384:	e044      	b.n	403410 <task_orientacao+0x94>
  403386:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40338a:	4638      	mov	r0, r7
  40338c:	4b23      	ldr	r3, [pc, #140]	; (40341c <task_orientacao+0xa0>)
  40338e:	4798      	blx	r3
  403390:	e022      	b.n	4033d8 <task_orientacao+0x5c>
				pio_set(LED_3_PIO, LED_3_IDX_MASK);
  403392:	2104      	movs	r1, #4
  403394:	4822      	ldr	r0, [pc, #136]	; (403420 <task_orientacao+0xa4>)
  403396:	4b23      	ldr	r3, [pc, #140]	; (403424 <task_orientacao+0xa8>)
  403398:	4798      	blx	r3
				pio_clear(LED_1_PIO, LED_1_IDX_MASK);
  40339a:	2101      	movs	r1, #1
  40339c:	4630      	mov	r0, r6
  40339e:	4b1f      	ldr	r3, [pc, #124]	; (40341c <task_orientacao+0xa0>)
  4033a0:	4798      	blx	r3
  4033a2:	e01c      	b.n	4033de <task_orientacao+0x62>
			}
			if(orientacao[1] == 1){//direita
				pio_clear(LED_3_PIO, LED_3_IDX_MASK);
  4033a4:	2104      	movs	r1, #4
  4033a6:	481e      	ldr	r0, [pc, #120]	; (403420 <task_orientacao+0xa4>)
  4033a8:	4b1c      	ldr	r3, [pc, #112]	; (40341c <task_orientacao+0xa0>)
  4033aa:	4798      	blx	r3
				pio_set(LED_1_PIO, LED_1_IDX_MASK);
  4033ac:	2101      	movs	r1, #1
  4033ae:	4630      	mov	r0, r6
  4033b0:	4b1c      	ldr	r3, [pc, #112]	; (403424 <task_orientacao+0xa8>)
  4033b2:	4798      	blx	r3
  4033b4:	e016      	b.n	4033e4 <task_orientacao+0x68>
			}
			if(orientacao[0] == 0){//tras
				pio_set(LED_2_PIO, LED_2_IDX_MASK);
			}
			if(orientacao[1] == 2 ){ //parado no eixo direita esquerda
  4033b6:	9b01      	ldr	r3, [sp, #4]
  4033b8:	2b02      	cmp	r3, #2
  4033ba:	d01c      	beq.n	4033f6 <task_orientacao+0x7a>
				pio_set(LED_1_PIO, LED_1_IDX_MASK);
				pio_set(LED_3_PIO, LED_3_IDX_MASK);
			}
			if(orientacao[0] == 2 ){ //parado no eixo direita esquerda
  4033bc:	9b00      	ldr	r3, [sp, #0]
  4033be:	2b02      	cmp	r3, #2
  4033c0:	d021      	beq.n	403406 <task_orientacao+0x8a>
		if(xQueueReceive(xQueueOrientacao,&(orientacao),(TickType_t) 0)){
  4033c2:	4c19      	ldr	r4, [pc, #100]	; (403428 <task_orientacao+0xac>)
  4033c4:	2300      	movs	r3, #0
  4033c6:	461a      	mov	r2, r3
  4033c8:	4669      	mov	r1, sp
  4033ca:	6828      	ldr	r0, [r5, #0]
  4033cc:	47a0      	blx	r4
  4033ce:	2800      	cmp	r0, #0
  4033d0:	d0f8      	beq.n	4033c4 <task_orientacao+0x48>
			if(orientacao[0] == 1){//frente
  4033d2:	9b00      	ldr	r3, [sp, #0]
  4033d4:	2b01      	cmp	r3, #1
  4033d6:	d0d6      	beq.n	403386 <task_orientacao+0xa>
			if(orientacao[1] == 0){ //esquerda
  4033d8:	9b01      	ldr	r3, [sp, #4]
  4033da:	2b00      	cmp	r3, #0
  4033dc:	d0d9      	beq.n	403392 <task_orientacao+0x16>
			if(orientacao[1] == 1){//direita
  4033de:	9b01      	ldr	r3, [sp, #4]
  4033e0:	2b01      	cmp	r3, #1
  4033e2:	d0df      	beq.n	4033a4 <task_orientacao+0x28>
			if(orientacao[0] == 0){//tras
  4033e4:	9b00      	ldr	r3, [sp, #0]
  4033e6:	2b00      	cmp	r3, #0
  4033e8:	d1e5      	bne.n	4033b6 <task_orientacao+0x3a>
				pio_set(LED_2_PIO, LED_2_IDX_MASK);
  4033ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4033ee:	4638      	mov	r0, r7
  4033f0:	4b0c      	ldr	r3, [pc, #48]	; (403424 <task_orientacao+0xa8>)
  4033f2:	4798      	blx	r3
  4033f4:	e7df      	b.n	4033b6 <task_orientacao+0x3a>
				pio_set(LED_1_PIO, LED_1_IDX_MASK);
  4033f6:	2101      	movs	r1, #1
  4033f8:	4630      	mov	r0, r6
  4033fa:	4c0a      	ldr	r4, [pc, #40]	; (403424 <task_orientacao+0xa8>)
  4033fc:	47a0      	blx	r4
				pio_set(LED_3_PIO, LED_3_IDX_MASK);
  4033fe:	2104      	movs	r1, #4
  403400:	4807      	ldr	r0, [pc, #28]	; (403420 <task_orientacao+0xa4>)
  403402:	47a0      	blx	r4
  403404:	e7da      	b.n	4033bc <task_orientacao+0x40>
				pio_set(LED_2_PIO, LED_2_IDX_MASK);
  403406:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40340a:	4638      	mov	r0, r7
  40340c:	4b05      	ldr	r3, [pc, #20]	; (403424 <task_orientacao+0xa8>)
  40340e:	4798      	blx	r3
		if(xQueueReceive(xQueueOrientacao,&(orientacao),(TickType_t) 0)){
  403410:	4d06      	ldr	r5, [pc, #24]	; (40342c <task_orientacao+0xb0>)
  403412:	e7d6      	b.n	4033c2 <task_orientacao+0x46>
  403414:	400e0e00 	.word	0x400e0e00
  403418:	400e1200 	.word	0x400e1200
  40341c:	00400edb 	.word	0x00400edb
  403420:	400e1000 	.word	0x400e1000
  403424:	00400ed7 	.word	0x00400ed7
  403428:	004020ed 	.word	0x004020ed
  40342c:	20400e38 	.word	0x20400e38

00403430 <task_house_down>:

		}
	}
}

static void task_house_down(void *pvParameters) {
  403430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}


	while(1){
		if(xSemaphoreTake(xSemaphoreHouseDown,1000)){ //piscar led da placa
  403434:	f8df b070 	ldr.w	fp, [pc, #112]	; 4034a8 <task_house_down+0x78>
  403438:	f8df a070 	ldr.w	sl, [pc, #112]	; 4034ac <task_house_down+0x7c>
  40343c:	2400      	movs	r4, #0
  40343e:	4623      	mov	r3, r4
  403440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403444:	4621      	mov	r1, r4
  403446:	f8db 0000 	ldr.w	r0, [fp]
  40344a:	47d0      	blx	sl
  40344c:	2800      	cmp	r0, #0
  40344e:	d0f6      	beq.n	40343e <task_house_down+0xe>
			printf("BBBBBBBBBBB");
  403450:	4811      	ldr	r0, [pc, #68]	; (403498 <task_house_down+0x68>)
  403452:	4b12      	ldr	r3, [pc, #72]	; (40349c <task_house_down+0x6c>)
  403454:	4798      	blx	r3
  403456:	270a      	movs	r7, #10
			for(int i =0; i<10; i++){
				pio_clear(LED_PIO, LED_IDX_MASK);
  403458:	f44f 7680 	mov.w	r6, #256	; 0x100
				vTaskDelay(200);
  40345c:	25c8      	movs	r5, #200	; 0xc8
				pio_clear(LED_PIO, LED_IDX_MASK);
  40345e:	4631      	mov	r1, r6
  403460:	480f      	ldr	r0, [pc, #60]	; (4034a0 <task_house_down+0x70>)
  403462:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4034b0 <task_house_down+0x80>
  403466:	47c8      	blx	r9
				vTaskDelay(200);
  403468:	4628      	mov	r0, r5
  40346a:	4c0e      	ldr	r4, [pc, #56]	; (4034a4 <task_house_down+0x74>)
  40346c:	47a0      	blx	r4
				pio_set(LED_PIO, LED_IDX_MASK);
  40346e:	4631      	mov	r1, r6
  403470:	480b      	ldr	r0, [pc, #44]	; (4034a0 <task_house_down+0x70>)
  403472:	f8df 8040 	ldr.w	r8, [pc, #64]	; 4034b4 <task_house_down+0x84>
  403476:	47c0      	blx	r8
				vTaskDelay(200);
  403478:	4628      	mov	r0, r5
  40347a:	47a0      	blx	r4
				pio_clear(LED_PIO, LED_IDX_MASK);
  40347c:	4631      	mov	r1, r6
  40347e:	4808      	ldr	r0, [pc, #32]	; (4034a0 <task_house_down+0x70>)
  403480:	47c8      	blx	r9
				vTaskDelay(200);
  403482:	4628      	mov	r0, r5
  403484:	47a0      	blx	r4
				pio_set(LED_PIO, LED_IDX_MASK);
  403486:	4631      	mov	r1, r6
  403488:	4805      	ldr	r0, [pc, #20]	; (4034a0 <task_house_down+0x70>)
  40348a:	47c0      	blx	r8
				vTaskDelay(200);
  40348c:	4628      	mov	r0, r5
  40348e:	47a0      	blx	r4
			for(int i =0; i<10; i++){
  403490:	3f01      	subs	r7, #1
  403492:	d1e4      	bne.n	40345e <task_house_down+0x2e>
  403494:	e7d2      	b.n	40343c <task_house_down+0xc>
  403496:	bf00      	nop
  403498:	0040afdc 	.word	0x0040afdc
  40349c:	00406489 	.word	0x00406489
  4034a0:	400e1200 	.word	0x400e1200
  4034a4:	00402919 	.word	0x00402919
  4034a8:	20400e34 	.word	0x20400e34
  4034ac:	004020ed 	.word	0x004020ed
  4034b0:	00400edb 	.word	0x00400edb
  4034b4:	00400ed7 	.word	0x00400ed7

004034b8 <task_oled>:
static void task_oled(void *pvParameters) {
  4034b8:	b508      	push	{r3, lr}
	gfx_mono_ssd1306_init();
  4034ba:	4b07      	ldr	r3, [pc, #28]	; (4034d8 <task_oled+0x20>)
  4034bc:	4798      	blx	r3
	gfx_mono_draw_string("Exemplo RTOS", 0, 0, &sysfont);
  4034be:	4d07      	ldr	r5, [pc, #28]	; (4034dc <task_oled+0x24>)
  4034c0:	462b      	mov	r3, r5
  4034c2:	2200      	movs	r2, #0
  4034c4:	4611      	mov	r1, r2
  4034c6:	4806      	ldr	r0, [pc, #24]	; (4034e0 <task_oled+0x28>)
  4034c8:	4c06      	ldr	r4, [pc, #24]	; (4034e4 <task_oled+0x2c>)
  4034ca:	47a0      	blx	r4
	gfx_mono_draw_string("oii", 0, 20, &sysfont);
  4034cc:	462b      	mov	r3, r5
  4034ce:	2214      	movs	r2, #20
  4034d0:	2100      	movs	r1, #0
  4034d2:	4805      	ldr	r0, [pc, #20]	; (4034e8 <task_oled+0x30>)
  4034d4:	47a0      	blx	r4
  4034d6:	e7fe      	b.n	4034d6 <task_oled+0x1e>
  4034d8:	00400909 	.word	0x00400909
  4034dc:	2040000c 	.word	0x2040000c
  4034e0:	0040b060 	.word	0x0040b060
  4034e4:	00400871 	.word	0x00400871
  4034e8:	0040b070 	.word	0x0040b070

004034ec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034ee:	b083      	sub	sp, #12
  4034f0:	4605      	mov	r5, r0
  4034f2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4034f4:	2300      	movs	r3, #0
  4034f6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4034f8:	4b2a      	ldr	r3, [pc, #168]	; (4035a4 <usart_serial_getchar+0xb8>)
  4034fa:	4298      	cmp	r0, r3
  4034fc:	d013      	beq.n	403526 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4034fe:	4b2a      	ldr	r3, [pc, #168]	; (4035a8 <usart_serial_getchar+0xbc>)
  403500:	4298      	cmp	r0, r3
  403502:	d018      	beq.n	403536 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403504:	4b29      	ldr	r3, [pc, #164]	; (4035ac <usart_serial_getchar+0xc0>)
  403506:	4298      	cmp	r0, r3
  403508:	d01d      	beq.n	403546 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40350a:	4b29      	ldr	r3, [pc, #164]	; (4035b0 <usart_serial_getchar+0xc4>)
  40350c:	429d      	cmp	r5, r3
  40350e:	d022      	beq.n	403556 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403510:	4b28      	ldr	r3, [pc, #160]	; (4035b4 <usart_serial_getchar+0xc8>)
  403512:	429d      	cmp	r5, r3
  403514:	d027      	beq.n	403566 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403516:	4b28      	ldr	r3, [pc, #160]	; (4035b8 <usart_serial_getchar+0xcc>)
  403518:	429d      	cmp	r5, r3
  40351a:	d02e      	beq.n	40357a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40351c:	4b27      	ldr	r3, [pc, #156]	; (4035bc <usart_serial_getchar+0xd0>)
  40351e:	429d      	cmp	r5, r3
  403520:	d035      	beq.n	40358e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403522:	b003      	add	sp, #12
  403524:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403526:	461f      	mov	r7, r3
  403528:	4e25      	ldr	r6, [pc, #148]	; (4035c0 <usart_serial_getchar+0xd4>)
  40352a:	4621      	mov	r1, r4
  40352c:	4638      	mov	r0, r7
  40352e:	47b0      	blx	r6
  403530:	2800      	cmp	r0, #0
  403532:	d1fa      	bne.n	40352a <usart_serial_getchar+0x3e>
  403534:	e7e9      	b.n	40350a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403536:	461f      	mov	r7, r3
  403538:	4e21      	ldr	r6, [pc, #132]	; (4035c0 <usart_serial_getchar+0xd4>)
  40353a:	4621      	mov	r1, r4
  40353c:	4638      	mov	r0, r7
  40353e:	47b0      	blx	r6
  403540:	2800      	cmp	r0, #0
  403542:	d1fa      	bne.n	40353a <usart_serial_getchar+0x4e>
  403544:	e7e4      	b.n	403510 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403546:	461f      	mov	r7, r3
  403548:	4e1d      	ldr	r6, [pc, #116]	; (4035c0 <usart_serial_getchar+0xd4>)
  40354a:	4621      	mov	r1, r4
  40354c:	4638      	mov	r0, r7
  40354e:	47b0      	blx	r6
  403550:	2800      	cmp	r0, #0
  403552:	d1fa      	bne.n	40354a <usart_serial_getchar+0x5e>
  403554:	e7df      	b.n	403516 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403556:	461f      	mov	r7, r3
  403558:	4e19      	ldr	r6, [pc, #100]	; (4035c0 <usart_serial_getchar+0xd4>)
  40355a:	4621      	mov	r1, r4
  40355c:	4638      	mov	r0, r7
  40355e:	47b0      	blx	r6
  403560:	2800      	cmp	r0, #0
  403562:	d1fa      	bne.n	40355a <usart_serial_getchar+0x6e>
  403564:	e7da      	b.n	40351c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403566:	461e      	mov	r6, r3
  403568:	4d16      	ldr	r5, [pc, #88]	; (4035c4 <usart_serial_getchar+0xd8>)
  40356a:	a901      	add	r1, sp, #4
  40356c:	4630      	mov	r0, r6
  40356e:	47a8      	blx	r5
  403570:	2800      	cmp	r0, #0
  403572:	d1fa      	bne.n	40356a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403574:	9b01      	ldr	r3, [sp, #4]
  403576:	7023      	strb	r3, [r4, #0]
  403578:	e7d3      	b.n	403522 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40357a:	461e      	mov	r6, r3
  40357c:	4d11      	ldr	r5, [pc, #68]	; (4035c4 <usart_serial_getchar+0xd8>)
  40357e:	a901      	add	r1, sp, #4
  403580:	4630      	mov	r0, r6
  403582:	47a8      	blx	r5
  403584:	2800      	cmp	r0, #0
  403586:	d1fa      	bne.n	40357e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403588:	9b01      	ldr	r3, [sp, #4]
  40358a:	7023      	strb	r3, [r4, #0]
  40358c:	e7c9      	b.n	403522 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40358e:	461e      	mov	r6, r3
  403590:	4d0c      	ldr	r5, [pc, #48]	; (4035c4 <usart_serial_getchar+0xd8>)
  403592:	a901      	add	r1, sp, #4
  403594:	4630      	mov	r0, r6
  403596:	47a8      	blx	r5
  403598:	2800      	cmp	r0, #0
  40359a:	d1fa      	bne.n	403592 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40359c:	9b01      	ldr	r3, [sp, #4]
  40359e:	7023      	strb	r3, [r4, #0]
}
  4035a0:	e7bf      	b.n	403522 <usart_serial_getchar+0x36>
  4035a2:	bf00      	nop
  4035a4:	400e0800 	.word	0x400e0800
  4035a8:	400e0a00 	.word	0x400e0a00
  4035ac:	400e1a00 	.word	0x400e1a00
  4035b0:	400e1c00 	.word	0x400e1c00
  4035b4:	40024000 	.word	0x40024000
  4035b8:	40028000 	.word	0x40028000
  4035bc:	4002c000 	.word	0x4002c000
  4035c0:	0040134b 	.word	0x0040134b
  4035c4:	00401457 	.word	0x00401457

004035c8 <usart_serial_putchar>:
{
  4035c8:	b570      	push	{r4, r5, r6, lr}
  4035ca:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4035cc:	4b2a      	ldr	r3, [pc, #168]	; (403678 <usart_serial_putchar+0xb0>)
  4035ce:	4298      	cmp	r0, r3
  4035d0:	d013      	beq.n	4035fa <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4035d2:	4b2a      	ldr	r3, [pc, #168]	; (40367c <usart_serial_putchar+0xb4>)
  4035d4:	4298      	cmp	r0, r3
  4035d6:	d019      	beq.n	40360c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4035d8:	4b29      	ldr	r3, [pc, #164]	; (403680 <usart_serial_putchar+0xb8>)
  4035da:	4298      	cmp	r0, r3
  4035dc:	d01f      	beq.n	40361e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4035de:	4b29      	ldr	r3, [pc, #164]	; (403684 <usart_serial_putchar+0xbc>)
  4035e0:	4298      	cmp	r0, r3
  4035e2:	d025      	beq.n	403630 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4035e4:	4b28      	ldr	r3, [pc, #160]	; (403688 <usart_serial_putchar+0xc0>)
  4035e6:	4298      	cmp	r0, r3
  4035e8:	d02b      	beq.n	403642 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4035ea:	4b28      	ldr	r3, [pc, #160]	; (40368c <usart_serial_putchar+0xc4>)
  4035ec:	4298      	cmp	r0, r3
  4035ee:	d031      	beq.n	403654 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4035f0:	4b27      	ldr	r3, [pc, #156]	; (403690 <usart_serial_putchar+0xc8>)
  4035f2:	4298      	cmp	r0, r3
  4035f4:	d037      	beq.n	403666 <usart_serial_putchar+0x9e>
	return 0;
  4035f6:	2000      	movs	r0, #0
}
  4035f8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4035fa:	461e      	mov	r6, r3
  4035fc:	4d25      	ldr	r5, [pc, #148]	; (403694 <usart_serial_putchar+0xcc>)
  4035fe:	4621      	mov	r1, r4
  403600:	4630      	mov	r0, r6
  403602:	47a8      	blx	r5
  403604:	2800      	cmp	r0, #0
  403606:	d1fa      	bne.n	4035fe <usart_serial_putchar+0x36>
		return 1;
  403608:	2001      	movs	r0, #1
  40360a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40360c:	461e      	mov	r6, r3
  40360e:	4d21      	ldr	r5, [pc, #132]	; (403694 <usart_serial_putchar+0xcc>)
  403610:	4621      	mov	r1, r4
  403612:	4630      	mov	r0, r6
  403614:	47a8      	blx	r5
  403616:	2800      	cmp	r0, #0
  403618:	d1fa      	bne.n	403610 <usart_serial_putchar+0x48>
		return 1;
  40361a:	2001      	movs	r0, #1
  40361c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40361e:	461e      	mov	r6, r3
  403620:	4d1c      	ldr	r5, [pc, #112]	; (403694 <usart_serial_putchar+0xcc>)
  403622:	4621      	mov	r1, r4
  403624:	4630      	mov	r0, r6
  403626:	47a8      	blx	r5
  403628:	2800      	cmp	r0, #0
  40362a:	d1fa      	bne.n	403622 <usart_serial_putchar+0x5a>
		return 1;
  40362c:	2001      	movs	r0, #1
  40362e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403630:	461e      	mov	r6, r3
  403632:	4d18      	ldr	r5, [pc, #96]	; (403694 <usart_serial_putchar+0xcc>)
  403634:	4621      	mov	r1, r4
  403636:	4630      	mov	r0, r6
  403638:	47a8      	blx	r5
  40363a:	2800      	cmp	r0, #0
  40363c:	d1fa      	bne.n	403634 <usart_serial_putchar+0x6c>
		return 1;
  40363e:	2001      	movs	r0, #1
  403640:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403642:	461e      	mov	r6, r3
  403644:	4d14      	ldr	r5, [pc, #80]	; (403698 <usart_serial_putchar+0xd0>)
  403646:	4621      	mov	r1, r4
  403648:	4630      	mov	r0, r6
  40364a:	47a8      	blx	r5
  40364c:	2800      	cmp	r0, #0
  40364e:	d1fa      	bne.n	403646 <usart_serial_putchar+0x7e>
		return 1;
  403650:	2001      	movs	r0, #1
  403652:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403654:	461e      	mov	r6, r3
  403656:	4d10      	ldr	r5, [pc, #64]	; (403698 <usart_serial_putchar+0xd0>)
  403658:	4621      	mov	r1, r4
  40365a:	4630      	mov	r0, r6
  40365c:	47a8      	blx	r5
  40365e:	2800      	cmp	r0, #0
  403660:	d1fa      	bne.n	403658 <usart_serial_putchar+0x90>
		return 1;
  403662:	2001      	movs	r0, #1
  403664:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403666:	461e      	mov	r6, r3
  403668:	4d0b      	ldr	r5, [pc, #44]	; (403698 <usart_serial_putchar+0xd0>)
  40366a:	4621      	mov	r1, r4
  40366c:	4630      	mov	r0, r6
  40366e:	47a8      	blx	r5
  403670:	2800      	cmp	r0, #0
  403672:	d1fa      	bne.n	40366a <usart_serial_putchar+0xa2>
		return 1;
  403674:	2001      	movs	r0, #1
  403676:	bd70      	pop	{r4, r5, r6, pc}
  403678:	400e0800 	.word	0x400e0800
  40367c:	400e0a00 	.word	0x400e0a00
  403680:	400e1a00 	.word	0x400e1a00
  403684:	400e1c00 	.word	0x400e1c00
  403688:	40024000 	.word	0x40024000
  40368c:	40028000 	.word	0x40028000
  403690:	4002c000 	.word	0x4002c000
  403694:	00401339 	.word	0x00401339
  403698:	00401441 	.word	0x00401441

0040369c <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  40369c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40369e:	460a      	mov	r2, r1
  4036a0:	4601      	mov	r1, r0
  4036a2:	4802      	ldr	r0, [pc, #8]	; (4036ac <vApplicationStackOverflowHook+0x10>)
  4036a4:	4b02      	ldr	r3, [pc, #8]	; (4036b0 <vApplicationStackOverflowHook+0x14>)
  4036a6:	4798      	blx	r3
  4036a8:	e7fe      	b.n	4036a8 <vApplicationStackOverflowHook+0xc>
  4036aa:	bf00      	nop
  4036ac:	0040b074 	.word	0x0040b074
  4036b0:	00406489 	.word	0x00406489

004036b4 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  4036b4:	4770      	bx	lr

004036b6 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4036b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4036ba:	b672      	cpsid	i
  4036bc:	f383 8811 	msr	BASEPRI, r3
  4036c0:	f3bf 8f6f 	isb	sy
  4036c4:	f3bf 8f4f 	dsb	sy
  4036c8:	b662      	cpsie	i
  4036ca:	e7fe      	b.n	4036ca <vApplicationMallocFailedHook+0x14>

004036cc <mcu6050_i2c_bus_write>:
{
  4036cc:	b500      	push	{lr}
  4036ce:	b087      	sub	sp, #28
	p_packet.chip         = dev_addr;
  4036d0:	f88d 0014 	strb.w	r0, [sp, #20]
	p_packet.addr[0]      = reg_addr;
  4036d4:	f88d 1004 	strb.w	r1, [sp, #4]
	p_packet.addr_length  = 1;
  4036d8:	2101      	movs	r1, #1
  4036da:	9102      	str	r1, [sp, #8]
	p_packet.buffer       = reg_data;
  4036dc:	9203      	str	r2, [sp, #12]
	p_packet.length       = cnt;
  4036de:	9304      	str	r3, [sp, #16]
	ierror = twihs_master_write(TWIHS2, &p_packet);
  4036e0:	a901      	add	r1, sp, #4
  4036e2:	4803      	ldr	r0, [pc, #12]	; (4036f0 <mcu6050_i2c_bus_write+0x24>)
  4036e4:	4b03      	ldr	r3, [pc, #12]	; (4036f4 <mcu6050_i2c_bus_write+0x28>)
  4036e6:	4798      	blx	r3
}
  4036e8:	b240      	sxtb	r0, r0
  4036ea:	b007      	add	sp, #28
  4036ec:	f85d fb04 	ldr.w	pc, [sp], #4
  4036f0:	40060000 	.word	0x40060000
  4036f4:	00400489 	.word	0x00400489

004036f8 <mcu6050_i2c_bus_read>:
{
  4036f8:	b500      	push	{lr}
  4036fa:	b087      	sub	sp, #28
	p_packet.chip         = dev_addr;
  4036fc:	f88d 0014 	strb.w	r0, [sp, #20]
	p_packet.addr[0]      = reg_addr;
  403700:	f88d 1004 	strb.w	r1, [sp, #4]
	p_packet.addr_length  = 1;
  403704:	2101      	movs	r1, #1
  403706:	9102      	str	r1, [sp, #8]
	p_packet.buffer       = reg_data;
  403708:	9203      	str	r2, [sp, #12]
	p_packet.length       = cnt;
  40370a:	9304      	str	r3, [sp, #16]
	ierror = twihs_master_read(TWIHS2, &p_packet);
  40370c:	a901      	add	r1, sp, #4
  40370e:	4803      	ldr	r0, [pc, #12]	; (40371c <mcu6050_i2c_bus_read+0x24>)
  403710:	4b03      	ldr	r3, [pc, #12]	; (403720 <mcu6050_i2c_bus_read+0x28>)
  403712:	4798      	blx	r3
}
  403714:	b240      	sxtb	r0, r0
  403716:	b007      	add	sp, #28
  403718:	f85d fb04 	ldr.w	pc, [sp], #4
  40371c:	40060000 	.word	0x40060000
  403720:	004003dd 	.word	0x004003dd

00403724 <mcu6050_i2c_bus_init>:
{
  403724:	b530      	push	{r4, r5, lr}
  403726:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_TWIHS2);
  403728:	2029      	movs	r0, #41	; 0x29
  40372a:	4c0e      	ldr	r4, [pc, #56]	; (403764 <mcu6050_i2c_bus_init+0x40>)
  40372c:	47a0      	blx	r4
	mcu6050_option.master_clk = sysclk_get_cpu_hz();
  40372e:	4b0e      	ldr	r3, [pc, #56]	; (403768 <mcu6050_i2c_bus_init+0x44>)
  403730:	9301      	str	r3, [sp, #4]
	mcu6050_option.speed      = 40000;
  403732:	f649 4340 	movw	r3, #40000	; 0x9c40
  403736:	9302      	str	r3, [sp, #8]
	twihs_master_init(TWIHS2, &mcu6050_option);
  403738:	a901      	add	r1, sp, #4
  40373a:	480c      	ldr	r0, [pc, #48]	; (40376c <mcu6050_i2c_bus_init+0x48>)
  40373c:	4b0c      	ldr	r3, [pc, #48]	; (403770 <mcu6050_i2c_bus_init+0x4c>)
  40373e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
  403740:	2010      	movs	r0, #16
  403742:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  403744:	4d0b      	ldr	r5, [pc, #44]	; (403774 <mcu6050_i2c_bus_init+0x50>)
  403746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40374a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40374e:	4628      	mov	r0, r5
  403750:	4c09      	ldr	r4, [pc, #36]	; (403778 <mcu6050_i2c_bus_init+0x54>)
  403752:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  403754:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403758:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40375c:	4628      	mov	r0, r5
  40375e:	47a0      	blx	r4
}
  403760:	b005      	add	sp, #20
  403762:	bd30      	pop	{r4, r5, pc}
  403764:	004012e5 	.word	0x004012e5
  403768:	11e1a300 	.word	0x11e1a300
  40376c:	40060000 	.word	0x40060000
  403770:	004003a9 	.word	0x004003a9
  403774:	400e1400 	.word	0x400e1400
  403778:	00400edf 	.word	0x00400edf

0040377c <modulo>:
		}

	}
}

float modulo(float x, float y, float z){
  40377c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403780:	460e      	mov	r6, r1
  403782:	4615      	mov	r5, r2
	return sqrt(pow(x,2)+pow(y,2)+pow(z,2));
  403784:	4c18      	ldr	r4, [pc, #96]	; (4037e8 <modulo+0x6c>)
  403786:	47a0      	blx	r4
  403788:	4680      	mov	r8, r0
  40378a:	4689      	mov	r9, r1
  40378c:	4630      	mov	r0, r6
  40378e:	47a0      	blx	r4
  403790:	4606      	mov	r6, r0
  403792:	460f      	mov	r7, r1
  403794:	4628      	mov	r0, r5
  403796:	47a0      	blx	r4
  403798:	4682      	mov	sl, r0
  40379a:	468b      	mov	fp, r1
  40379c:	4c13      	ldr	r4, [pc, #76]	; (4037ec <modulo+0x70>)
  40379e:	4642      	mov	r2, r8
  4037a0:	464b      	mov	r3, r9
  4037a2:	4640      	mov	r0, r8
  4037a4:	4649      	mov	r1, r9
  4037a6:	47a0      	blx	r4
  4037a8:	4680      	mov	r8, r0
  4037aa:	4689      	mov	r9, r1
  4037ac:	4632      	mov	r2, r6
  4037ae:	463b      	mov	r3, r7
  4037b0:	4630      	mov	r0, r6
  4037b2:	4639      	mov	r1, r7
  4037b4:	47a0      	blx	r4
  4037b6:	4e0e      	ldr	r6, [pc, #56]	; (4037f0 <modulo+0x74>)
  4037b8:	4602      	mov	r2, r0
  4037ba:	460b      	mov	r3, r1
  4037bc:	4640      	mov	r0, r8
  4037be:	4649      	mov	r1, r9
  4037c0:	47b0      	blx	r6
  4037c2:	4680      	mov	r8, r0
  4037c4:	4689      	mov	r9, r1
  4037c6:	4652      	mov	r2, sl
  4037c8:	465b      	mov	r3, fp
  4037ca:	4650      	mov	r0, sl
  4037cc:	4659      	mov	r1, fp
  4037ce:	47a0      	blx	r4
  4037d0:	4602      	mov	r2, r0
  4037d2:	460b      	mov	r3, r1
  4037d4:	4640      	mov	r0, r8
  4037d6:	4649      	mov	r1, r9
  4037d8:	47b0      	blx	r6
  4037da:	4b06      	ldr	r3, [pc, #24]	; (4037f4 <modulo+0x78>)
  4037dc:	4798      	blx	r3
  4037de:	4b06      	ldr	r3, [pc, #24]	; (4037f8 <modulo+0x7c>)
  4037e0:	4798      	blx	r3
}
  4037e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037e6:	bf00      	nop
  4037e8:	00405029 	.word	0x00405029
  4037ec:	004050d1 	.word	0x004050d1
  4037f0:	00404d6d 	.word	0x00404d6d
  4037f4:	00403d7d 	.word	0x00403d7d
  4037f8:	00405631 	.word	0x00405631
  4037fc:	00000000 	.word	0x00000000

00403800 <task_imu>:

static void task_imu(void *pvParameters) {
  403800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403804:	ed2d 8b06 	vpush	{d8-d10}
  403808:	b0a7      	sub	sp, #156	; 0x9c
	mcu6050_i2c_bus_init();
  40380a:	4b91      	ldr	r3, [pc, #580]	; (403a50 <task_imu+0x250>)
  40380c:	4798      	blx	r3
	uint8_t bufferTX[10];

	/* resultado da função */
	uint8_t rtn;

	rtn = twihs_probe(TWIHS2, MPU6050_DEFAULT_ADDRESS);
  40380e:	2168      	movs	r1, #104	; 0x68
  403810:	4890      	ldr	r0, [pc, #576]	; (403a54 <task_imu+0x254>)
  403812:	4b91      	ldr	r3, [pc, #580]	; (403a58 <task_imu+0x258>)
  403814:	4798      	blx	r3
	if(rtn != TWIHS_SUCCESS){
  403816:	b2c0      	uxtb	r0, r0
  403818:	2800      	cmp	r0, #0
  40381a:	d038      	beq.n	40388e <task_imu+0x8e>
		printf("[ERRO] [i2c] [probe] \n");
  40381c:	488f      	ldr	r0, [pc, #572]	; (403a5c <task_imu+0x25c>)
  40381e:	4b90      	ldr	r3, [pc, #576]	; (403a60 <task_imu+0x260>)
  403820:	4798      	blx	r3
		} else {
		printf("[DADO] [i2c] probe OK\n" );
	}
	rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  403822:	2301      	movs	r3, #1
  403824:	aa20      	add	r2, sp, #128	; 0x80
  403826:	2175      	movs	r1, #117	; 0x75
  403828:	2068      	movs	r0, #104	; 0x68
  40382a:	4c8e      	ldr	r4, [pc, #568]	; (403a64 <task_imu+0x264>)
  40382c:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS){
  40382e:	2800      	cmp	r0, #0
  403830:	d031      	beq.n	403896 <task_imu+0x96>
		printf("[ERRO] [i2c] [read] \n");
  403832:	488d      	ldr	r0, [pc, #564]	; (403a68 <task_imu+0x268>)
  403834:	4b8a      	ldr	r3, [pc, #552]	; (403a60 <task_imu+0x260>)
  403836:	4798      	blx	r3
		} else {
		printf("[DADO] [i2c] %x:%x", MPU6050_RA_WHO_AM_I, bufferRX[0]);
	}

	// Set Clock source
	bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  403838:	2301      	movs	r3, #1
  40383a:	aa26      	add	r2, sp, #152	; 0x98
  40383c:	f802 3d24 	strb.w	r3, [r2, #-36]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  403840:	216b      	movs	r1, #107	; 0x6b
  403842:	2068      	movs	r0, #104	; 0x68
  403844:	4c89      	ldr	r4, [pc, #548]	; (403a6c <task_imu+0x26c>)
  403846:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403848:	bb60      	cbnz	r0, 4038a4 <task_imu+0xa4>
	printf("[ERRO] [i2c] [write] \n");

	// Aceletromtro em 2G
	bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT;
  40384a:	aa26      	add	r2, sp, #152	; 0x98
  40384c:	2300      	movs	r3, #0
  40384e:	f802 3d24 	strb.w	r3, [r2, #-36]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  403852:	2301      	movs	r3, #1
  403854:	211c      	movs	r1, #28
  403856:	2068      	movs	r0, #104	; 0x68
  403858:	4c84      	ldr	r4, [pc, #528]	; (403a6c <task_imu+0x26c>)
  40385a:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  40385c:	bb30      	cbnz	r0, 4038ac <task_imu+0xac>
	printf("[ERRO] [i2c] [write] \n");

	// Configura range giroscopio para operar com 250 °/s
	bufferTX[0] = 0x00; // 250 °/s
  40385e:	aa26      	add	r2, sp, #152	; 0x98
  403860:	2300      	movs	r3, #0
  403862:	f802 3d24 	strb.w	r3, [r2, #-36]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  403866:	2301      	movs	r3, #1
  403868:	211b      	movs	r1, #27
  40386a:	2068      	movs	r0, #104	; 0x68
  40386c:	4c7f      	ldr	r4, [pc, #508]	; (403a6c <task_imu+0x26c>)
  40386e:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403870:	bb00      	cbnz	r0, 4038b4 <task_imu+0xb4>
	printf("[ERRO] [i2c] [write] \n");

	/* Inicializa Função de fusão */
	FusionAhrs ahrs;
	FusionAhrsInitialise(&ahrs);
  403872:	a803      	add	r0, sp, #12
  403874:	4b7e      	ldr	r3, [pc, #504]	; (403a70 <task_imu+0x270>)
  403876:	4798      	blx	r3
	int orientacao[2];
	float lastAcc = 0;
	int em_queda = 0;
	int passos = 0;
  403878:	2300      	movs	r3, #0
  40387a:	9301      	str	r3, [sp, #4]
	float lastAcc = 0;
  40387c:	ed9f aa7d 	vldr	s20, [pc, #500]	; 403a74 <task_imu+0x274>

	while(1) {
		// Le valor do acc X High e Low
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  403880:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 403a64 <task_imu+0x264>
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);

		// Dados em escala real
		proc_acc_x = (float)raw_acc_x/16384;
		proc_acc_y = (float)raw_acc_y/16384;
		proc_acc_z = (float)raw_acc_z/16384;
  403884:	eddf 9a7c 	vldr	s19, [pc, #496]	; 403a78 <task_imu+0x278>

		proc_gyr_x = (float)raw_gyr_x/131;
		proc_gyr_y = (float)raw_gyr_y/131;
		proc_gyr_z = (float)raw_gyr_z/131;
  403888:	ed9f 9a7c 	vldr	s18, [pc, #496]	; 403a7c <task_imu+0x27c>
  40388c:	e018      	b.n	4038c0 <task_imu+0xc0>
		printf("[DADO] [i2c] probe OK\n" );
  40388e:	487c      	ldr	r0, [pc, #496]	; (403a80 <task_imu+0x280>)
  403890:	4b73      	ldr	r3, [pc, #460]	; (403a60 <task_imu+0x260>)
  403892:	4798      	blx	r3
  403894:	e7c5      	b.n	403822 <task_imu+0x22>
		printf("[DADO] [i2c] %x:%x", MPU6050_RA_WHO_AM_I, bufferRX[0]);
  403896:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
  40389a:	2175      	movs	r1, #117	; 0x75
  40389c:	4879      	ldr	r0, [pc, #484]	; (403a84 <task_imu+0x284>)
  40389e:	4b7a      	ldr	r3, [pc, #488]	; (403a88 <task_imu+0x288>)
  4038a0:	4798      	blx	r3
  4038a2:	e7c9      	b.n	403838 <task_imu+0x38>
	printf("[ERRO] [i2c] [write] \n");
  4038a4:	4879      	ldr	r0, [pc, #484]	; (403a8c <task_imu+0x28c>)
  4038a6:	4b6e      	ldr	r3, [pc, #440]	; (403a60 <task_imu+0x260>)
  4038a8:	4798      	blx	r3
  4038aa:	e7ce      	b.n	40384a <task_imu+0x4a>
	printf("[ERRO] [i2c] [write] \n");
  4038ac:	4877      	ldr	r0, [pc, #476]	; (403a8c <task_imu+0x28c>)
  4038ae:	4b6c      	ldr	r3, [pc, #432]	; (403a60 <task_imu+0x260>)
  4038b0:	4798      	blx	r3
  4038b2:	e7d4      	b.n	40385e <task_imu+0x5e>
	printf("[ERRO] [i2c] [write] \n");
  4038b4:	4875      	ldr	r0, [pc, #468]	; (403a8c <task_imu+0x28c>)
  4038b6:	4b6a      	ldr	r3, [pc, #424]	; (403a60 <task_imu+0x260>)
  4038b8:	4798      	blx	r3
  4038ba:	e7da      	b.n	403872 <task_imu+0x72>
static void task_imu(void *pvParameters) {
  4038bc:	eeb0 aa48 	vmov.f32	s20, s16
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  4038c0:	2301      	movs	r3, #1
  4038c2:	f10d 0297 	add.w	r2, sp, #151	; 0x97
  4038c6:	213b      	movs	r1, #59	; 0x3b
  4038c8:	2068      	movs	r0, #104	; 0x68
  4038ca:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  4038cc:	2301      	movs	r3, #1
  4038ce:	aa25      	add	r2, sp, #148	; 0x94
  4038d0:	213c      	movs	r1, #60	; 0x3c
  4038d2:	2068      	movs	r0, #104	; 0x68
  4038d4:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  4038d6:	2301      	movs	r3, #1
  4038d8:	f10d 0296 	add.w	r2, sp, #150	; 0x96
  4038dc:	213d      	movs	r1, #61	; 0x3d
  4038de:	2068      	movs	r0, #104	; 0x68
  4038e0:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  4038e2:	2301      	movs	r3, #1
  4038e4:	f10d 0293 	add.w	r2, sp, #147	; 0x93
  4038e8:	2140      	movs	r1, #64	; 0x40
  4038ea:	2068      	movs	r0, #104	; 0x68
  4038ec:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  4038ee:	2301      	movs	r3, #1
  4038f0:	f10d 0295 	add.w	r2, sp, #149	; 0x95
  4038f4:	213f      	movs	r1, #63	; 0x3f
  4038f6:	2068      	movs	r0, #104	; 0x68
  4038f8:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  4038fa:	2301      	movs	r3, #1
  4038fc:	f10d 0292 	add.w	r2, sp, #146	; 0x92
  403900:	2140      	movs	r1, #64	; 0x40
  403902:	2068      	movs	r0, #104	; 0x68
  403904:	47d0      	blx	sl
		raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  403906:	f89d 2097 	ldrb.w	r2, [sp, #151]	; 0x97
  40390a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
  40390e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403912:	fa0f fb83 	sxth.w	fp, r3
		raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  403916:	f89d 2096 	ldrb.w	r2, [sp, #150]	; 0x96
  40391a:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
  40391e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403922:	b21b      	sxth	r3, r3
  403924:	ee08 3a10 	vmov	s16, r3
		raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  403928:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
  40392c:	f89d 3092 	ldrb.w	r3, [sp, #146]	; 0x92
  403930:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403934:	b21b      	sxth	r3, r3
  403936:	ee08 3a90 	vmov	s17, r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  40393a:	2301      	movs	r3, #1
  40393c:	f10d 0291 	add.w	r2, sp, #145	; 0x91
  403940:	2143      	movs	r1, #67	; 0x43
  403942:	2068      	movs	r0, #104	; 0x68
  403944:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  403946:	2301      	movs	r3, #1
  403948:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
  40394c:	2144      	movs	r1, #68	; 0x44
  40394e:	2068      	movs	r0, #104	; 0x68
  403950:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  403952:	2301      	movs	r3, #1
  403954:	aa24      	add	r2, sp, #144	; 0x90
  403956:	2145      	movs	r1, #69	; 0x45
  403958:	2068      	movs	r0, #104	; 0x68
  40395a:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  40395c:	2301      	movs	r3, #1
  40395e:	f10d 028d 	add.w	r2, sp, #141	; 0x8d
  403962:	2148      	movs	r1, #72	; 0x48
  403964:	2068      	movs	r0, #104	; 0x68
  403966:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  403968:	2301      	movs	r3, #1
  40396a:	f10d 028f 	add.w	r2, sp, #143	; 0x8f
  40396e:	2147      	movs	r1, #71	; 0x47
  403970:	2068      	movs	r0, #104	; 0x68
  403972:	47d0      	blx	sl
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  403974:	2301      	movs	r3, #1
  403976:	aa23      	add	r2, sp, #140	; 0x8c
  403978:	2148      	movs	r1, #72	; 0x48
  40397a:	2068      	movs	r0, #104	; 0x68
  40397c:	47d0      	blx	sl
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  40397e:	f89d 7091 	ldrb.w	r7, [sp, #145]	; 0x91
  403982:	b2ff      	uxtb	r7, r7
  403984:	f89d 408e 	ldrb.w	r4, [sp, #142]	; 0x8e
  403988:	b2e4      	uxtb	r4, r4
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  40398a:	f89d 8090 	ldrb.w	r8, [sp, #144]	; 0x90
  40398e:	fa5f f888 	uxtb.w	r8, r8
  403992:	f89d 508d 	ldrb.w	r5, [sp, #141]	; 0x8d
  403996:	b2ed      	uxtb	r5, r5
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  403998:	f89d 908f 	ldrb.w	r9, [sp, #143]	; 0x8f
  40399c:	fa5f f989 	uxtb.w	r9, r9
  4039a0:	f89d 608c 	ldrb.w	r6, [sp, #140]	; 0x8c
  4039a4:	b2f6      	uxtb	r6, r6
		proc_acc_z = (float)raw_acc_z/16384;
  4039a6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
		proc_acc_y = (float)raw_acc_y/16384;
  4039aa:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		proc_acc_x = (float)raw_acc_x/16384;
  4039ae:	ee07 ba90 	vmov	s15, fp
  4039b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15

		// printf("acc = (%f,%f,%f) \n",proc_acc_x,proc_acc_y,proc_acc_z);
		// printf("gyr = (%f,%f,%f) \n",proc_gyr_x,proc_gyr_y,proc_gyr_z);

		float acc = modulo(proc_acc_x,proc_acc_y,proc_acc_z);
  4039b6:	ee28 7aa9 	vmul.f32	s14, s17, s19
  4039ba:	ee17 2a10 	vmov	r2, s14
  4039be:	ee28 7a29 	vmul.f32	s14, s16, s19
  4039c2:	ee17 1a10 	vmov	r1, s14
  4039c6:	ee67 7aa9 	vmul.f32	s15, s15, s19
  4039ca:	ee17 0a90 	vmov	r0, s15
  4039ce:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 403a9c <task_imu+0x29c>
  4039d2:	47d8      	blx	fp
  4039d4:	ee08 0a10 	vmov	s16, r0
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  4039d8:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
		proc_gyr_z = (float)raw_gyr_z/131;
  4039dc:	b236      	sxth	r6, r6
  4039de:	ee07 6a90 	vmov	s15, r6
  4039e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  4039e6:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		proc_gyr_y = (float)raw_gyr_y/131;
  4039ea:	b22d      	sxth	r5, r5
  4039ec:	ee07 5a90 	vmov	s15, r5
  4039f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  4039f4:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
		proc_gyr_x = (float)raw_gyr_x/131;
  4039f8:	b224      	sxth	r4, r4
  4039fa:	ee07 4a90 	vmov	s15, r4
  4039fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		float gyr = modulo(proc_gyr_x,proc_gyr_y,proc_gyr_z);
  403a02:	ee86 6a89 	vdiv.f32	s12, s13, s18
  403a06:	ee16 2a10 	vmov	r2, s12
  403a0a:	eec7 6a09 	vdiv.f32	s13, s14, s18
  403a0e:	ee16 1a90 	vmov	r1, s13
  403a12:	ee87 7a89 	vdiv.f32	s14, s15, s18
  403a16:	ee17 0a10 	vmov	r0, s14
  403a1a:	47d8      	blx	fp
		float valor_queda = 0.5 ;
		
 		//printf("%f",acc);
		//printf("%d",em_queda);
		if(acc-lastAcc > 0.9){
  403a1c:	ee78 7a4a 	vsub.f32	s15, s16, s20
  403a20:	ee17 0a90 	vmov	r0, s15
  403a24:	4b1a      	ldr	r3, [pc, #104]	; (403a90 <task_imu+0x290>)
  403a26:	4798      	blx	r3
  403a28:	a307      	add	r3, pc, #28	; (adr r3, 403a48 <task_imu+0x248>)
  403a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a2e:	4c19      	ldr	r4, [pc, #100]	; (403a94 <task_imu+0x294>)
  403a30:	47a0      	blx	r4
  403a32:	2800      	cmp	r0, #0
  403a34:	f43f af42 	beq.w	4038bc <task_imu+0xbc>
			
			//printf("%d",1);
			passos++;
  403a38:	9b01      	ldr	r3, [sp, #4]
  403a3a:	3301      	adds	r3, #1
  403a3c:	9301      	str	r3, [sp, #4]
			printf("%d",passos);
  403a3e:	4619      	mov	r1, r3
  403a40:	4815      	ldr	r0, [pc, #84]	; (403a98 <task_imu+0x298>)
  403a42:	4b11      	ldr	r3, [pc, #68]	; (403a88 <task_imu+0x288>)
  403a44:	4798      	blx	r3
  403a46:	e739      	b.n	4038bc <task_imu+0xbc>
  403a48:	cccccccd 	.word	0xcccccccd
  403a4c:	3feccccc 	.word	0x3feccccc
  403a50:	00403725 	.word	0x00403725
  403a54:	40060000 	.word	0x40060000
  403a58:	00400529 	.word	0x00400529
  403a5c:	0040afe8 	.word	0x0040afe8
  403a60:	0040654d 	.word	0x0040654d
  403a64:	004036f9 	.word	0x004036f9
  403a68:	0040b018 	.word	0x0040b018
  403a6c:	004036cd 	.word	0x004036cd
  403a70:	00400661 	.word	0x00400661
  403a74:	00000000 	.word	0x00000000
  403a78:	38800000 	.word	0x38800000
  403a7c:	43030000 	.word	0x43030000
  403a80:	0040b000 	.word	0x0040b000
  403a84:	0040b030 	.word	0x0040b030
  403a88:	00406489 	.word	0x00406489
  403a8c:	0040b044 	.word	0x0040b044
  403a90:	00405029 	.word	0x00405029
  403a94:	004055f1 	.word	0x004055f1
  403a98:	0040b05c 	.word	0x0040b05c
  403a9c:	0040377d 	.word	0x0040377d

00403aa0 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/


int main(void) {
  403aa0:	b580      	push	{r7, lr}
  403aa2:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the SAM system */
	sysclk_init();
  403aa4:	4b6a      	ldr	r3, [pc, #424]	; (403c50 <main+0x1b0>)
  403aa6:	4798      	blx	r3
	board_init();
  403aa8:	4b6a      	ldr	r3, [pc, #424]	; (403c54 <main+0x1b4>)
  403aaa:	4798      	blx	r3
	pmc_enable_periph_clk(LED_PIO_ID);
  403aac:	200c      	movs	r0, #12
  403aae:	4d6a      	ldr	r5, [pc, #424]	; (403c58 <main+0x1b8>)
  403ab0:	47a8      	blx	r5
	pio_configure(LED_PIO, PIO_OUTPUT_1, LED_IDX_MASK, PIO_DEFAULT);
  403ab2:	4f6a      	ldr	r7, [pc, #424]	; (403c5c <main+0x1bc>)
  403ab4:	2300      	movs	r3, #0
  403ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
  403aba:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403abe:	4638      	mov	r0, r7
  403ac0:	4e67      	ldr	r6, [pc, #412]	; (403c60 <main+0x1c0>)
  403ac2:	47b0      	blx	r6
	pmc_enable_periph_clk(LED_1_PIO_ID);
  403ac4:	200a      	movs	r0, #10
  403ac6:	47a8      	blx	r5
	pio_configure(LED_1_PIO, PIO_OUTPUT_1, LED_1_IDX_MASK, PIO_DEFAULT);
  403ac8:	4c66      	ldr	r4, [pc, #408]	; (403c64 <main+0x1c4>)
  403aca:	2300      	movs	r3, #0
  403acc:	2201      	movs	r2, #1
  403ace:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403ad2:	4620      	mov	r0, r4
  403ad4:	47b0      	blx	r6
	pmc_enable_periph_clk(LED_2_PIO_ID);
  403ad6:	200c      	movs	r0, #12
  403ad8:	47a8      	blx	r5
	pio_configure(LED_2_PIO, PIO_OUTPUT_1, LED_2_IDX_MASK, PIO_DEFAULT);
  403ada:	2300      	movs	r3, #0
  403adc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403ae0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403ae4:	4638      	mov	r0, r7
  403ae6:	47b0      	blx	r6
	pmc_enable_periph_clk(LED_3_PIO_ID);
  403ae8:	200b      	movs	r0, #11
  403aea:	47a8      	blx	r5
	pio_configure(LED_3_PIO, PIO_OUTPUT_1, LED_3_IDX_MASK, PIO_DEFAULT);
  403aec:	2300      	movs	r3, #0
  403aee:	2204      	movs	r2, #4
  403af0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403af4:	485c      	ldr	r0, [pc, #368]	; (403c68 <main+0x1c8>)
  403af6:	47b0      	blx	r6
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403af8:	4b5c      	ldr	r3, [pc, #368]	; (403c6c <main+0x1cc>)
  403afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403afe:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403b00:	2280      	movs	r2, #128	; 0x80
  403b02:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	pio_configure(BUT_PIO, PIO_INPUT, BUT_PIO_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403b06:	2309      	movs	r3, #9
  403b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403b0c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403b10:	4620      	mov	r0, r4
  403b12:	47b0      	blx	r6
	pio_set_debounce_filter(BUT_PIO, BUT_PIO_PIN_MASK, 60);
  403b14:	223c      	movs	r2, #60	; 0x3c
  403b16:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403b1a:	4620      	mov	r0, r4
  403b1c:	4b54      	ldr	r3, [pc, #336]	; (403c70 <main+0x1d0>)
  403b1e:	4798      	blx	r3
	pio_enable_interrupt(BUT_PIO, BUT_PIO_PIN_MASK);
  403b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403b24:	4620      	mov	r0, r4
  403b26:	4b53      	ldr	r3, [pc, #332]	; (403c74 <main+0x1d4>)
  403b28:	4798      	blx	r3
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIO_PIN_MASK, PIO_IT_FALL_EDGE , but_callback);
  403b2a:	4b53      	ldr	r3, [pc, #332]	; (403c78 <main+0x1d8>)
  403b2c:	9300      	str	r3, [sp, #0]
  403b2e:	2350      	movs	r3, #80	; 0x50
  403b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403b34:	210a      	movs	r1, #10
  403b36:	4620      	mov	r0, r4
  403b38:	4c50      	ldr	r4, [pc, #320]	; (403c7c <main+0x1dc>)
  403b3a:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403b3c:	4e50      	ldr	r6, [pc, #320]	; (403c80 <main+0x1e0>)
  403b3e:	4b51      	ldr	r3, [pc, #324]	; (403c84 <main+0x1e4>)
  403b40:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403b42:	4a51      	ldr	r2, [pc, #324]	; (403c88 <main+0x1e8>)
  403b44:	4b51      	ldr	r3, [pc, #324]	; (403c8c <main+0x1ec>)
  403b46:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403b48:	4a51      	ldr	r2, [pc, #324]	; (403c90 <main+0x1f0>)
  403b4a:	4b52      	ldr	r3, [pc, #328]	; (403c94 <main+0x1f4>)
  403b4c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403b4e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403b52:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403b54:	23c0      	movs	r3, #192	; 0xc0
  403b56:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403b58:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403b5c:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403b5e:	2400      	movs	r4, #0
  403b60:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403b62:	9408      	str	r4, [sp, #32]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  403b64:	200e      	movs	r0, #14
  403b66:	47a8      	blx	r5
		usart_init_rs232(p_usart, &usart_settings,
  403b68:	4a4b      	ldr	r2, [pc, #300]	; (403c98 <main+0x1f8>)
  403b6a:	a904      	add	r1, sp, #16
  403b6c:	4630      	mov	r0, r6
  403b6e:	4b4b      	ldr	r3, [pc, #300]	; (403c9c <main+0x1fc>)
  403b70:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403b72:	4630      	mov	r0, r6
  403b74:	4b4a      	ldr	r3, [pc, #296]	; (403ca0 <main+0x200>)
  403b76:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403b78:	4630      	mov	r0, r6
  403b7a:	4b4a      	ldr	r3, [pc, #296]	; (403ca4 <main+0x204>)
  403b7c:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403b7e:	4e4a      	ldr	r6, [pc, #296]	; (403ca8 <main+0x208>)
  403b80:	6833      	ldr	r3, [r6, #0]
  403b82:	4621      	mov	r1, r4
  403b84:	6898      	ldr	r0, [r3, #8]
  403b86:	4d49      	ldr	r5, [pc, #292]	; (403cac <main+0x20c>)
  403b88:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403b8a:	6833      	ldr	r3, [r6, #0]
  403b8c:	4621      	mov	r1, r4
  403b8e:	6858      	ldr	r0, [r3, #4]
  403b90:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403b92:	6833      	ldr	r3, [r6, #0]
  403b94:	4621      	mov	r1, r4
  403b96:	6898      	ldr	r0, [r3, #8]
  403b98:	47a8      	blx	r5
	BUT_init(); //talvez comentar o init
	/* Initialize the console uart */
	configure_console();

	/* Create task to control oled */
	if (xTaskCreate(task_oled, "oled", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  403b9a:	9403      	str	r4, [sp, #12]
  403b9c:	9402      	str	r4, [sp, #8]
  403b9e:	9401      	str	r4, [sp, #4]
  403ba0:	9400      	str	r4, [sp, #0]
  403ba2:	4623      	mov	r3, r4
  403ba4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403ba8:	4941      	ldr	r1, [pc, #260]	; (403cb0 <main+0x210>)
  403baa:	4842      	ldr	r0, [pc, #264]	; (403cb4 <main+0x214>)
  403bac:	4c42      	ldr	r4, [pc, #264]	; (403cb8 <main+0x218>)
  403bae:	47a0      	blx	r4
  403bb0:	2801      	cmp	r0, #1
  403bb2:	d002      	beq.n	403bba <main+0x11a>
		printf("Failed to create oled task\r\n");
  403bb4:	4841      	ldr	r0, [pc, #260]	; (403cbc <main+0x21c>)
  403bb6:	4b42      	ldr	r3, [pc, #264]	; (403cc0 <main+0x220>)
  403bb8:	4798      	blx	r3
	}

	if (xTaskCreate(task_imu, "imu", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  403bba:	2300      	movs	r3, #0
  403bbc:	9303      	str	r3, [sp, #12]
  403bbe:	9302      	str	r3, [sp, #8]
  403bc0:	9301      	str	r3, [sp, #4]
  403bc2:	9300      	str	r3, [sp, #0]
  403bc4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403bc8:	493e      	ldr	r1, [pc, #248]	; (403cc4 <main+0x224>)
  403bca:	483f      	ldr	r0, [pc, #252]	; (403cc8 <main+0x228>)
  403bcc:	4c3a      	ldr	r4, [pc, #232]	; (403cb8 <main+0x218>)
  403bce:	47a0      	blx	r4
  403bd0:	2801      	cmp	r0, #1
  403bd2:	d002      	beq.n	403bda <main+0x13a>
		printf("Failed to create imu task\r\n");
  403bd4:	483d      	ldr	r0, [pc, #244]	; (403ccc <main+0x22c>)
  403bd6:	4b3a      	ldr	r3, [pc, #232]	; (403cc0 <main+0x220>)
  403bd8:	4798      	blx	r3
	}

	if (xTaskCreate(task_house_down, "house_down", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  403bda:	2300      	movs	r3, #0
  403bdc:	9303      	str	r3, [sp, #12]
  403bde:	9302      	str	r3, [sp, #8]
  403be0:	9301      	str	r3, [sp, #4]
  403be2:	9300      	str	r3, [sp, #0]
  403be4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403be8:	4939      	ldr	r1, [pc, #228]	; (403cd0 <main+0x230>)
  403bea:	483a      	ldr	r0, [pc, #232]	; (403cd4 <main+0x234>)
  403bec:	4c32      	ldr	r4, [pc, #200]	; (403cb8 <main+0x218>)
  403bee:	47a0      	blx	r4
  403bf0:	2801      	cmp	r0, #1
  403bf2:	d002      	beq.n	403bfa <main+0x15a>
		printf("Failed to create house_down task\r\n");
  403bf4:	4838      	ldr	r0, [pc, #224]	; (403cd8 <main+0x238>)
  403bf6:	4b32      	ldr	r3, [pc, #200]	; (403cc0 <main+0x220>)
  403bf8:	4798      	blx	r3
	}

	if (xTaskCreate(task_orientacao, "orientacao", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  403bfa:	2300      	movs	r3, #0
  403bfc:	9303      	str	r3, [sp, #12]
  403bfe:	9302      	str	r3, [sp, #8]
  403c00:	9301      	str	r3, [sp, #4]
  403c02:	9300      	str	r3, [sp, #0]
  403c04:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403c08:	4934      	ldr	r1, [pc, #208]	; (403cdc <main+0x23c>)
  403c0a:	4835      	ldr	r0, [pc, #212]	; (403ce0 <main+0x240>)
  403c0c:	4c2a      	ldr	r4, [pc, #168]	; (403cb8 <main+0x218>)
  403c0e:	47a0      	blx	r4
  403c10:	2801      	cmp	r0, #1
  403c12:	d002      	beq.n	403c1a <main+0x17a>
		printf("Failed to create orientacao task\r\n");
  403c14:	4833      	ldr	r0, [pc, #204]	; (403ce4 <main+0x244>)
  403c16:	4b2a      	ldr	r3, [pc, #168]	; (403cc0 <main+0x220>)
  403c18:	4798      	blx	r3
	}
	
	xSemaphoreHouseDown = xSemaphoreCreateBinary();
  403c1a:	2203      	movs	r2, #3
  403c1c:	2100      	movs	r1, #0
  403c1e:	2001      	movs	r0, #1
  403c20:	4b31      	ldr	r3, [pc, #196]	; (403ce8 <main+0x248>)
  403c22:	4798      	blx	r3
  403c24:	4b31      	ldr	r3, [pc, #196]	; (403cec <main+0x24c>)
  403c26:	6018      	str	r0, [r3, #0]
	if (xSemaphoreHouseDown == NULL)
  403c28:	b150      	cbz	r0, 403c40 <main+0x1a0>
	printf("falha em criar o semaforo \n");

	int vec[2] = {0,0};
	xQueueOrientacao = xQueueCreate(100, sizeof(vec));
  403c2a:	2200      	movs	r2, #0
  403c2c:	2108      	movs	r1, #8
  403c2e:	2064      	movs	r0, #100	; 0x64
  403c30:	4b2d      	ldr	r3, [pc, #180]	; (403ce8 <main+0x248>)
  403c32:	4798      	blx	r3
  403c34:	4b2e      	ldr	r3, [pc, #184]	; (403cf0 <main+0x250>)
  403c36:	6018      	str	r0, [r3, #0]
	if (xQueueOrientacao == NULL)
  403c38:	b130      	cbz	r0, 403c48 <main+0x1a8>
	printf("falha em criar a queue xQueueOrientacao \n");

	/* Start the scheduler. */
	vTaskStartScheduler();
  403c3a:	4b2e      	ldr	r3, [pc, #184]	; (403cf4 <main+0x254>)
  403c3c:	4798      	blx	r3
  403c3e:	e7fe      	b.n	403c3e <main+0x19e>
	printf("falha em criar o semaforo \n");
  403c40:	482d      	ldr	r0, [pc, #180]	; (403cf8 <main+0x258>)
  403c42:	4b1f      	ldr	r3, [pc, #124]	; (403cc0 <main+0x220>)
  403c44:	4798      	blx	r3
  403c46:	e7f0      	b.n	403c2a <main+0x18a>
	printf("falha em criar a queue xQueueOrientacao \n");
  403c48:	482c      	ldr	r0, [pc, #176]	; (403cfc <main+0x25c>)
  403c4a:	4b1d      	ldr	r3, [pc, #116]	; (403cc0 <main+0x220>)
  403c4c:	4798      	blx	r3
  403c4e:	e7f4      	b.n	403c3a <main+0x19a>
  403c50:	00400c29 	.word	0x00400c29
  403c54:	00400d25 	.word	0x00400d25
  403c58:	004012e5 	.word	0x004012e5
  403c5c:	400e1200 	.word	0x400e1200
  403c60:	00400fd1 	.word	0x00400fd1
  403c64:	400e0e00 	.word	0x400e0e00
  403c68:	400e1000 	.word	0x400e1000
  403c6c:	e000e100 	.word	0xe000e100
  403c70:	00400ebd 	.word	0x00400ebd
  403c74:	00401093 	.word	0x00401093
  403c78:	00403379 	.word	0x00403379
  403c7c:	004010f1 	.word	0x004010f1
  403c80:	40028000 	.word	0x40028000
  403c84:	20400df0 	.word	0x20400df0
  403c88:	004035c9 	.word	0x004035c9
  403c8c:	20400dec 	.word	0x20400dec
  403c90:	004034ed 	.word	0x004034ed
  403c94:	20400de8 	.word	0x20400de8
  403c98:	08f0d180 	.word	0x08f0d180
  403c9c:	004013e1 	.word	0x004013e1
  403ca0:	00401435 	.word	0x00401435
  403ca4:	0040143b 	.word	0x0040143b
  403ca8:	20400028 	.word	0x20400028
  403cac:	00406581 	.word	0x00406581
  403cb0:	0040aef0 	.word	0x0040aef0
  403cb4:	004034b9 	.word	0x004034b9
  403cb8:	004023cd 	.word	0x004023cd
  403cbc:	0040aef8 	.word	0x0040aef8
  403cc0:	0040654d 	.word	0x0040654d
  403cc4:	0040af14 	.word	0x0040af14
  403cc8:	00403801 	.word	0x00403801
  403ccc:	0040af18 	.word	0x0040af18
  403cd0:	0040af34 	.word	0x0040af34
  403cd4:	00403431 	.word	0x00403431
  403cd8:	0040af40 	.word	0x0040af40
  403cdc:	0040af64 	.word	0x0040af64
  403ce0:	0040337d 	.word	0x0040337d
  403ce4:	0040af70 	.word	0x0040af70
  403ce8:	00401d8d 	.word	0x00401d8d
  403cec:	20400e34 	.word	0x20400e34
  403cf0:	20400e38 	.word	0x20400e38
  403cf4:	00402601 	.word	0x00402601
  403cf8:	0040af94 	.word	0x0040af94
  403cfc:	0040afb0 	.word	0x0040afb0

00403d00 <sinf>:
  403d00:	b500      	push	{lr}
  403d02:	4a1d      	ldr	r2, [pc, #116]	; (403d78 <sinf+0x78>)
  403d04:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  403d08:	4293      	cmp	r3, r2
  403d0a:	b083      	sub	sp, #12
  403d0c:	dd19      	ble.n	403d42 <sinf+0x42>
  403d0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  403d12:	db05      	blt.n	403d20 <sinf+0x20>
  403d14:	4601      	mov	r1, r0
  403d16:	f001 fcdf 	bl	4056d8 <__aeabi_fsub>
  403d1a:	b003      	add	sp, #12
  403d1c:	f85d fb04 	ldr.w	pc, [sp], #4
  403d20:	4669      	mov	r1, sp
  403d22:	f000 f945 	bl	403fb0 <__ieee754_rem_pio2f>
  403d26:	f000 0003 	and.w	r0, r0, #3
  403d2a:	2801      	cmp	r0, #1
  403d2c:	d018      	beq.n	403d60 <sinf+0x60>
  403d2e:	2802      	cmp	r0, #2
  403d30:	d00e      	beq.n	403d50 <sinf+0x50>
  403d32:	b1d0      	cbz	r0, 403d6a <sinf+0x6a>
  403d34:	9901      	ldr	r1, [sp, #4]
  403d36:	9800      	ldr	r0, [sp, #0]
  403d38:	f000 faa8 	bl	40428c <__kernel_cosf>
  403d3c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403d40:	e7eb      	b.n	403d1a <sinf+0x1a>
  403d42:	2200      	movs	r2, #0
  403d44:	2100      	movs	r1, #0
  403d46:	f000 feeb 	bl	404b20 <__kernel_sinf>
  403d4a:	b003      	add	sp, #12
  403d4c:	f85d fb04 	ldr.w	pc, [sp], #4
  403d50:	2201      	movs	r2, #1
  403d52:	9901      	ldr	r1, [sp, #4]
  403d54:	9800      	ldr	r0, [sp, #0]
  403d56:	f000 fee3 	bl	404b20 <__kernel_sinf>
  403d5a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403d5e:	e7dc      	b.n	403d1a <sinf+0x1a>
  403d60:	9901      	ldr	r1, [sp, #4]
  403d62:	9800      	ldr	r0, [sp, #0]
  403d64:	f000 fa92 	bl	40428c <__kernel_cosf>
  403d68:	e7d7      	b.n	403d1a <sinf+0x1a>
  403d6a:	2201      	movs	r2, #1
  403d6c:	9901      	ldr	r1, [sp, #4]
  403d6e:	9800      	ldr	r0, [sp, #0]
  403d70:	f000 fed6 	bl	404b20 <__kernel_sinf>
  403d74:	e7d1      	b.n	403d1a <sinf+0x1a>
  403d76:	bf00      	nop
  403d78:	3f490fd8 	.word	0x3f490fd8

00403d7c <sqrt>:
  403d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d80:	b08b      	sub	sp, #44	; 0x2c
  403d82:	4604      	mov	r4, r0
  403d84:	460d      	mov	r5, r1
  403d86:	f000 f857 	bl	403e38 <__ieee754_sqrt>
  403d8a:	4b29      	ldr	r3, [pc, #164]	; (403e30 <sqrt+0xb4>)
  403d8c:	f993 a000 	ldrsb.w	sl, [r3]
  403d90:	f1ba 3fff 	cmp.w	sl, #4294967295
  403d94:	4606      	mov	r6, r0
  403d96:	460f      	mov	r7, r1
  403d98:	d012      	beq.n	403dc0 <sqrt+0x44>
  403d9a:	4622      	mov	r2, r4
  403d9c:	462b      	mov	r3, r5
  403d9e:	4620      	mov	r0, r4
  403da0:	4629      	mov	r1, r5
  403da2:	f001 fc2f 	bl	405604 <__aeabi_dcmpun>
  403da6:	4683      	mov	fp, r0
  403da8:	b950      	cbnz	r0, 403dc0 <sqrt+0x44>
  403daa:	f04f 0800 	mov.w	r8, #0
  403dae:	f04f 0900 	mov.w	r9, #0
  403db2:	4642      	mov	r2, r8
  403db4:	464b      	mov	r3, r9
  403db6:	4620      	mov	r0, r4
  403db8:	4629      	mov	r1, r5
  403dba:	f001 fbfb 	bl	4055b4 <__aeabi_dcmplt>
  403dbe:	b920      	cbnz	r0, 403dca <sqrt+0x4e>
  403dc0:	4630      	mov	r0, r6
  403dc2:	4639      	mov	r1, r7
  403dc4:	b00b      	add	sp, #44	; 0x2c
  403dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dca:	4b1a      	ldr	r3, [pc, #104]	; (403e34 <sqrt+0xb8>)
  403dcc:	f8cd b020 	str.w	fp, [sp, #32]
  403dd0:	2201      	movs	r2, #1
  403dd2:	e9cd 4504 	strd	r4, r5, [sp, #16]
  403dd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
  403dda:	e88d 000c 	stmia.w	sp, {r2, r3}
  403dde:	f1ba 0f00 	cmp.w	sl, #0
  403de2:	d017      	beq.n	403e14 <sqrt+0x98>
  403de4:	4642      	mov	r2, r8
  403de6:	464b      	mov	r3, r9
  403de8:	4640      	mov	r0, r8
  403dea:	4649      	mov	r1, r9
  403dec:	f001 fa9a 	bl	405324 <__aeabi_ddiv>
  403df0:	f1ba 0f02 	cmp.w	sl, #2
  403df4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403df8:	d10e      	bne.n	403e18 <sqrt+0x9c>
  403dfa:	f001 ff63 	bl	405cc4 <__errno>
  403dfe:	2321      	movs	r3, #33	; 0x21
  403e00:	6003      	str	r3, [r0, #0]
  403e02:	9b08      	ldr	r3, [sp, #32]
  403e04:	b973      	cbnz	r3, 403e24 <sqrt+0xa8>
  403e06:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  403e0a:	4630      	mov	r0, r6
  403e0c:	4639      	mov	r1, r7
  403e0e:	b00b      	add	sp, #44	; 0x2c
  403e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e14:	e9cd 8906 	strd	r8, r9, [sp, #24]
  403e18:	4668      	mov	r0, sp
  403e1a:	f000 fef7 	bl	404c0c <matherr>
  403e1e:	2800      	cmp	r0, #0
  403e20:	d1ef      	bne.n	403e02 <sqrt+0x86>
  403e22:	e7ea      	b.n	403dfa <sqrt+0x7e>
  403e24:	f001 ff4e 	bl	405cc4 <__errno>
  403e28:	9b08      	ldr	r3, [sp, #32]
  403e2a:	6003      	str	r3, [r0, #0]
  403e2c:	e7eb      	b.n	403e06 <sqrt+0x8a>
  403e2e:	bf00      	nop
  403e30:	20400024 	.word	0x20400024
  403e34:	0040b08c 	.word	0x0040b08c

00403e38 <__ieee754_sqrt>:
  403e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403e3c:	4f5b      	ldr	r7, [pc, #364]	; (403fac <__ieee754_sqrt+0x174>)
  403e3e:	438f      	bics	r7, r1
  403e40:	4605      	mov	r5, r0
  403e42:	460c      	mov	r4, r1
  403e44:	f000 8092 	beq.w	403f6c <__ieee754_sqrt+0x134>
  403e48:	2900      	cmp	r1, #0
  403e4a:	460b      	mov	r3, r1
  403e4c:	4602      	mov	r2, r0
  403e4e:	dd6f      	ble.n	403f30 <__ieee754_sqrt+0xf8>
  403e50:	150f      	asrs	r7, r1, #20
  403e52:	d07b      	beq.n	403f4c <__ieee754_sqrt+0x114>
  403e54:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  403e58:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403e5c:	07f8      	lsls	r0, r7, #31
  403e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403e62:	d45c      	bmi.n	403f1e <__ieee754_sqrt+0xe6>
  403e64:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  403e68:	2600      	movs	r6, #0
  403e6a:	440b      	add	r3, r1
  403e6c:	107f      	asrs	r7, r7, #1
  403e6e:	0052      	lsls	r2, r2, #1
  403e70:	46b6      	mov	lr, r6
  403e72:	2016      	movs	r0, #22
  403e74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  403e78:	eb0e 0401 	add.w	r4, lr, r1
  403e7c:	429c      	cmp	r4, r3
  403e7e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  403e82:	ea4f 0242 	mov.w	r2, r2, lsl #1
  403e86:	dc03      	bgt.n	403e90 <__ieee754_sqrt+0x58>
  403e88:	1b1b      	subs	r3, r3, r4
  403e8a:	eb04 0e01 	add.w	lr, r4, r1
  403e8e:	440e      	add	r6, r1
  403e90:	3801      	subs	r0, #1
  403e92:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  403e96:	ea4f 0151 	mov.w	r1, r1, lsr #1
  403e9a:	d1ed      	bne.n	403e78 <__ieee754_sqrt+0x40>
  403e9c:	4684      	mov	ip, r0
  403e9e:	2420      	movs	r4, #32
  403ea0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403ea4:	e009      	b.n	403eba <__ieee754_sqrt+0x82>
  403ea6:	d020      	beq.n	403eea <__ieee754_sqrt+0xb2>
  403ea8:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  403eac:	3c01      	subs	r4, #1
  403eae:	ea4f 0151 	mov.w	r1, r1, lsr #1
  403eb2:	442b      	add	r3, r5
  403eb4:	ea4f 0242 	mov.w	r2, r2, lsl #1
  403eb8:	d020      	beq.n	403efc <__ieee754_sqrt+0xc4>
  403eba:	4573      	cmp	r3, lr
  403ebc:	eb01 050c 	add.w	r5, r1, ip
  403ec0:	ddf1      	ble.n	403ea6 <__ieee754_sqrt+0x6e>
  403ec2:	2d00      	cmp	r5, #0
  403ec4:	eb05 0c01 	add.w	ip, r5, r1
  403ec8:	db09      	blt.n	403ede <__ieee754_sqrt+0xa6>
  403eca:	46f0      	mov	r8, lr
  403ecc:	4295      	cmp	r5, r2
  403ece:	eba3 030e 	sub.w	r3, r3, lr
  403ed2:	d900      	bls.n	403ed6 <__ieee754_sqrt+0x9e>
  403ed4:	3b01      	subs	r3, #1
  403ed6:	1b52      	subs	r2, r2, r5
  403ed8:	4408      	add	r0, r1
  403eda:	46c6      	mov	lr, r8
  403edc:	e7e4      	b.n	403ea8 <__ieee754_sqrt+0x70>
  403ede:	f1bc 0f00 	cmp.w	ip, #0
  403ee2:	dbf2      	blt.n	403eca <__ieee754_sqrt+0x92>
  403ee4:	f10e 0801 	add.w	r8, lr, #1
  403ee8:	e7f0      	b.n	403ecc <__ieee754_sqrt+0x94>
  403eea:	4295      	cmp	r5, r2
  403eec:	d8dc      	bhi.n	403ea8 <__ieee754_sqrt+0x70>
  403eee:	2d00      	cmp	r5, #0
  403ef0:	eb05 0c01 	add.w	ip, r5, r1
  403ef4:	db44      	blt.n	403f80 <__ieee754_sqrt+0x148>
  403ef6:	4698      	mov	r8, r3
  403ef8:	2300      	movs	r3, #0
  403efa:	e7ec      	b.n	403ed6 <__ieee754_sqrt+0x9e>
  403efc:	4313      	orrs	r3, r2
  403efe:	d113      	bne.n	403f28 <__ieee754_sqrt+0xf0>
  403f00:	0840      	lsrs	r0, r0, #1
  403f02:	1073      	asrs	r3, r6, #1
  403f04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  403f08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403f0c:	07f2      	lsls	r2, r6, #31
  403f0e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  403f12:	bf48      	it	mi
  403f14:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  403f18:	4649      	mov	r1, r9
  403f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f1e:	005b      	lsls	r3, r3, #1
  403f20:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  403f24:	0052      	lsls	r2, r2, #1
  403f26:	e79d      	b.n	403e64 <__ieee754_sqrt+0x2c>
  403f28:	1c41      	adds	r1, r0, #1
  403f2a:	d02d      	beq.n	403f88 <__ieee754_sqrt+0x150>
  403f2c:	3001      	adds	r0, #1
  403f2e:	e7e7      	b.n	403f00 <__ieee754_sqrt+0xc8>
  403f30:	4606      	mov	r6, r0
  403f32:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  403f36:	433e      	orrs	r6, r7
  403f38:	d0ef      	beq.n	403f1a <__ieee754_sqrt+0xe2>
  403f3a:	bb69      	cbnz	r1, 403f98 <__ieee754_sqrt+0x160>
  403f3c:	460f      	mov	r7, r1
  403f3e:	0ad3      	lsrs	r3, r2, #11
  403f40:	3f15      	subs	r7, #21
  403f42:	0552      	lsls	r2, r2, #21
  403f44:	2b00      	cmp	r3, #0
  403f46:	d0fa      	beq.n	403f3e <__ieee754_sqrt+0x106>
  403f48:	02de      	lsls	r6, r3, #11
  403f4a:	d420      	bmi.n	403f8e <__ieee754_sqrt+0x156>
  403f4c:	2400      	movs	r4, #0
  403f4e:	e000      	b.n	403f52 <__ieee754_sqrt+0x11a>
  403f50:	4604      	mov	r4, r0
  403f52:	005b      	lsls	r3, r3, #1
  403f54:	02dd      	lsls	r5, r3, #11
  403f56:	f104 0001 	add.w	r0, r4, #1
  403f5a:	d5f9      	bpl.n	403f50 <__ieee754_sqrt+0x118>
  403f5c:	f1c0 0120 	rsb	r1, r0, #32
  403f60:	fa22 f101 	lsr.w	r1, r2, r1
  403f64:	430b      	orrs	r3, r1
  403f66:	1b3f      	subs	r7, r7, r4
  403f68:	4082      	lsls	r2, r0
  403f6a:	e773      	b.n	403e54 <__ieee754_sqrt+0x1c>
  403f6c:	4602      	mov	r2, r0
  403f6e:	460b      	mov	r3, r1
  403f70:	f001 f8ae 	bl	4050d0 <__aeabi_dmul>
  403f74:	462a      	mov	r2, r5
  403f76:	4623      	mov	r3, r4
  403f78:	f000 fef8 	bl	404d6c <__adddf3>
  403f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f80:	f1bc 0f00 	cmp.w	ip, #0
  403f84:	daae      	bge.n	403ee4 <__ieee754_sqrt+0xac>
  403f86:	e7b6      	b.n	403ef6 <__ieee754_sqrt+0xbe>
  403f88:	3601      	adds	r6, #1
  403f8a:	4620      	mov	r0, r4
  403f8c:	e7b9      	b.n	403f02 <__ieee754_sqrt+0xca>
  403f8e:	2000      	movs	r0, #0
  403f90:	2120      	movs	r1, #32
  403f92:	f04f 34ff 	mov.w	r4, #4294967295
  403f96:	e7e3      	b.n	403f60 <__ieee754_sqrt+0x128>
  403f98:	4602      	mov	r2, r0
  403f9a:	460b      	mov	r3, r1
  403f9c:	f000 fee4 	bl	404d68 <__aeabi_dsub>
  403fa0:	4602      	mov	r2, r0
  403fa2:	460b      	mov	r3, r1
  403fa4:	f001 f9be 	bl	405324 <__aeabi_ddiv>
  403fa8:	e7b7      	b.n	403f1a <__ieee754_sqrt+0xe2>
  403faa:	bf00      	nop
  403fac:	7ff00000 	.word	0x7ff00000

00403fb0 <__ieee754_rem_pio2f>:
  403fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403fb4:	4aa8      	ldr	r2, [pc, #672]	; (404258 <__ieee754_rem_pio2f+0x2a8>)
  403fb6:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  403fba:	4294      	cmp	r4, r2
  403fbc:	b089      	sub	sp, #36	; 0x24
  403fbe:	dd6e      	ble.n	40409e <__ieee754_rem_pio2f+0xee>
  403fc0:	4aa6      	ldr	r2, [pc, #664]	; (40425c <__ieee754_rem_pio2f+0x2ac>)
  403fc2:	4294      	cmp	r4, r2
  403fc4:	4606      	mov	r6, r0
  403fc6:	460d      	mov	r5, r1
  403fc8:	dc1c      	bgt.n	404004 <__ieee754_rem_pio2f+0x54>
  403fca:	2800      	cmp	r0, #0
  403fcc:	49a4      	ldr	r1, [pc, #656]	; (404260 <__ieee754_rem_pio2f+0x2b0>)
  403fce:	f340 80fc 	ble.w	4041ca <__ieee754_rem_pio2f+0x21a>
  403fd2:	f001 fb81 	bl	4056d8 <__aeabi_fsub>
  403fd6:	4ba3      	ldr	r3, [pc, #652]	; (404264 <__ieee754_rem_pio2f+0x2b4>)
  403fd8:	f024 040f 	bic.w	r4, r4, #15
  403fdc:	429c      	cmp	r4, r3
  403fde:	4606      	mov	r6, r0
  403fe0:	d06c      	beq.n	4040bc <__ieee754_rem_pio2f+0x10c>
  403fe2:	49a1      	ldr	r1, [pc, #644]	; (404268 <__ieee754_rem_pio2f+0x2b8>)
  403fe4:	f001 fb78 	bl	4056d8 <__aeabi_fsub>
  403fe8:	4601      	mov	r1, r0
  403fea:	6028      	str	r0, [r5, #0]
  403fec:	4630      	mov	r0, r6
  403fee:	f001 fb73 	bl	4056d8 <__aeabi_fsub>
  403ff2:	499d      	ldr	r1, [pc, #628]	; (404268 <__ieee754_rem_pio2f+0x2b8>)
  403ff4:	f001 fb70 	bl	4056d8 <__aeabi_fsub>
  403ff8:	2701      	movs	r7, #1
  403ffa:	6068      	str	r0, [r5, #4]
  403ffc:	4638      	mov	r0, r7
  403ffe:	b009      	add	sp, #36	; 0x24
  404000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404004:	4a99      	ldr	r2, [pc, #612]	; (40426c <__ieee754_rem_pio2f+0x2bc>)
  404006:	4294      	cmp	r4, r2
  404008:	dd6a      	ble.n	4040e0 <__ieee754_rem_pio2f+0x130>
  40400a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  40400e:	da4e      	bge.n	4040ae <__ieee754_rem_pio2f+0xfe>
  404010:	15e7      	asrs	r7, r4, #23
  404012:	3f86      	subs	r7, #134	; 0x86
  404014:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
  404018:	4620      	mov	r0, r4
  40401a:	f001 fe2d 	bl	405c78 <__aeabi_f2iz>
  40401e:	f001 fc11 	bl	405844 <__aeabi_i2f>
  404022:	4603      	mov	r3, r0
  404024:	4601      	mov	r1, r0
  404026:	4620      	mov	r0, r4
  404028:	9305      	str	r3, [sp, #20]
  40402a:	f001 fb55 	bl	4056d8 <__aeabi_fsub>
  40402e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404032:	f001 fc5b 	bl	4058ec <__aeabi_fmul>
  404036:	4680      	mov	r8, r0
  404038:	f001 fe1e 	bl	405c78 <__aeabi_f2iz>
  40403c:	f001 fc02 	bl	405844 <__aeabi_i2f>
  404040:	4601      	mov	r1, r0
  404042:	4604      	mov	r4, r0
  404044:	4640      	mov	r0, r8
  404046:	9406      	str	r4, [sp, #24]
  404048:	f001 fb46 	bl	4056d8 <__aeabi_fsub>
  40404c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404050:	f001 fc4c 	bl	4058ec <__aeabi_fmul>
  404054:	2100      	movs	r1, #0
  404056:	9007      	str	r0, [sp, #28]
  404058:	f001 fddc 	bl	405c14 <__aeabi_fcmpeq>
  40405c:	2800      	cmp	r0, #0
  40405e:	f000 80cb 	beq.w	4041f8 <__ieee754_rem_pio2f+0x248>
  404062:	4620      	mov	r0, r4
  404064:	2100      	movs	r1, #0
  404066:	f001 fdd5 	bl	405c14 <__aeabi_fcmpeq>
  40406a:	2800      	cmp	r0, #0
  40406c:	bf14      	ite	ne
  40406e:	2301      	movne	r3, #1
  404070:	2302      	moveq	r3, #2
  404072:	4a7f      	ldr	r2, [pc, #508]	; (404270 <__ieee754_rem_pio2f+0x2c0>)
  404074:	9201      	str	r2, [sp, #4]
  404076:	2102      	movs	r1, #2
  404078:	463a      	mov	r2, r7
  40407a:	9100      	str	r1, [sp, #0]
  40407c:	a805      	add	r0, sp, #20
  40407e:	4629      	mov	r1, r5
  404080:	f000 f9c8 	bl	404414 <__kernel_rem_pio2f>
  404084:	2e00      	cmp	r6, #0
  404086:	4607      	mov	r7, r0
  404088:	da0d      	bge.n	4040a6 <__ieee754_rem_pio2f+0xf6>
  40408a:	e895 000c 	ldmia.w	r5, {r2, r3}
  40408e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404092:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404096:	4247      	negs	r7, r0
  404098:	602a      	str	r2, [r5, #0]
  40409a:	606b      	str	r3, [r5, #4]
  40409c:	e003      	b.n	4040a6 <__ieee754_rem_pio2f+0xf6>
  40409e:	2200      	movs	r2, #0
  4040a0:	6008      	str	r0, [r1, #0]
  4040a2:	604a      	str	r2, [r1, #4]
  4040a4:	2700      	movs	r7, #0
  4040a6:	4638      	mov	r0, r7
  4040a8:	b009      	add	sp, #36	; 0x24
  4040aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040ae:	4601      	mov	r1, r0
  4040b0:	f001 fb12 	bl	4056d8 <__aeabi_fsub>
  4040b4:	2700      	movs	r7, #0
  4040b6:	6068      	str	r0, [r5, #4]
  4040b8:	6028      	str	r0, [r5, #0]
  4040ba:	e7f4      	b.n	4040a6 <__ieee754_rem_pio2f+0xf6>
  4040bc:	496d      	ldr	r1, [pc, #436]	; (404274 <__ieee754_rem_pio2f+0x2c4>)
  4040be:	f001 fb0b 	bl	4056d8 <__aeabi_fsub>
  4040c2:	496d      	ldr	r1, [pc, #436]	; (404278 <__ieee754_rem_pio2f+0x2c8>)
  4040c4:	4604      	mov	r4, r0
  4040c6:	f001 fb07 	bl	4056d8 <__aeabi_fsub>
  4040ca:	4601      	mov	r1, r0
  4040cc:	6028      	str	r0, [r5, #0]
  4040ce:	4620      	mov	r0, r4
  4040d0:	f001 fb02 	bl	4056d8 <__aeabi_fsub>
  4040d4:	4968      	ldr	r1, [pc, #416]	; (404278 <__ieee754_rem_pio2f+0x2c8>)
  4040d6:	f001 faff 	bl	4056d8 <__aeabi_fsub>
  4040da:	2701      	movs	r7, #1
  4040dc:	6068      	str	r0, [r5, #4]
  4040de:	e7e2      	b.n	4040a6 <__ieee754_rem_pio2f+0xf6>
  4040e0:	f000 fd96 	bl	404c10 <fabsf>
  4040e4:	4965      	ldr	r1, [pc, #404]	; (40427c <__ieee754_rem_pio2f+0x2cc>)
  4040e6:	4680      	mov	r8, r0
  4040e8:	f001 fc00 	bl	4058ec <__aeabi_fmul>
  4040ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4040f0:	f001 faf4 	bl	4056dc <__addsf3>
  4040f4:	f001 fdc0 	bl	405c78 <__aeabi_f2iz>
  4040f8:	4607      	mov	r7, r0
  4040fa:	f001 fba3 	bl	405844 <__aeabi_i2f>
  4040fe:	4958      	ldr	r1, [pc, #352]	; (404260 <__ieee754_rem_pio2f+0x2b0>)
  404100:	4683      	mov	fp, r0
  404102:	f001 fbf3 	bl	4058ec <__aeabi_fmul>
  404106:	4601      	mov	r1, r0
  404108:	4640      	mov	r0, r8
  40410a:	f001 fae5 	bl	4056d8 <__aeabi_fsub>
  40410e:	4956      	ldr	r1, [pc, #344]	; (404268 <__ieee754_rem_pio2f+0x2b8>)
  404110:	4681      	mov	r9, r0
  404112:	4658      	mov	r0, fp
  404114:	f001 fbea 	bl	4058ec <__aeabi_fmul>
  404118:	2f1f      	cmp	r7, #31
  40411a:	4682      	mov	sl, r0
  40411c:	dc21      	bgt.n	404162 <__ieee754_rem_pio2f+0x1b2>
  40411e:	4a58      	ldr	r2, [pc, #352]	; (404280 <__ieee754_rem_pio2f+0x2d0>)
  404120:	1e79      	subs	r1, r7, #1
  404122:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
  404126:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40412a:	4293      	cmp	r3, r2
  40412c:	d019      	beq.n	404162 <__ieee754_rem_pio2f+0x1b2>
  40412e:	4651      	mov	r1, sl
  404130:	4648      	mov	r0, r9
  404132:	f001 fad1 	bl	4056d8 <__aeabi_fsub>
  404136:	4680      	mov	r8, r0
  404138:	f8c5 8000 	str.w	r8, [r5]
  40413c:	4641      	mov	r1, r8
  40413e:	4648      	mov	r0, r9
  404140:	f001 faca 	bl	4056d8 <__aeabi_fsub>
  404144:	4651      	mov	r1, sl
  404146:	f001 fac7 	bl	4056d8 <__aeabi_fsub>
  40414a:	2e00      	cmp	r6, #0
  40414c:	6068      	str	r0, [r5, #4]
  40414e:	daaa      	bge.n	4040a6 <__ieee754_rem_pio2f+0xf6>
  404150:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  404154:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404158:	f8c5 8000 	str.w	r8, [r5]
  40415c:	6068      	str	r0, [r5, #4]
  40415e:	427f      	negs	r7, r7
  404160:	e7a1      	b.n	4040a6 <__ieee754_rem_pio2f+0xf6>
  404162:	4651      	mov	r1, sl
  404164:	4648      	mov	r0, r9
  404166:	f001 fab7 	bl	4056d8 <__aeabi_fsub>
  40416a:	15e2      	asrs	r2, r4, #23
  40416c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  404170:	1ad3      	subs	r3, r2, r3
  404172:	2b08      	cmp	r3, #8
  404174:	4680      	mov	r8, r0
  404176:	dddf      	ble.n	404138 <__ieee754_rem_pio2f+0x188>
  404178:	493e      	ldr	r1, [pc, #248]	; (404274 <__ieee754_rem_pio2f+0x2c4>)
  40417a:	9203      	str	r2, [sp, #12]
  40417c:	4658      	mov	r0, fp
  40417e:	f001 fbb5 	bl	4058ec <__aeabi_fmul>
  404182:	4680      	mov	r8, r0
  404184:	4601      	mov	r1, r0
  404186:	4648      	mov	r0, r9
  404188:	f001 faa6 	bl	4056d8 <__aeabi_fsub>
  40418c:	4601      	mov	r1, r0
  40418e:	4604      	mov	r4, r0
  404190:	4648      	mov	r0, r9
  404192:	f001 faa1 	bl	4056d8 <__aeabi_fsub>
  404196:	4641      	mov	r1, r8
  404198:	f001 fa9e 	bl	4056d8 <__aeabi_fsub>
  40419c:	4936      	ldr	r1, [pc, #216]	; (404278 <__ieee754_rem_pio2f+0x2c8>)
  40419e:	4680      	mov	r8, r0
  4041a0:	4658      	mov	r0, fp
  4041a2:	f001 fba3 	bl	4058ec <__aeabi_fmul>
  4041a6:	4641      	mov	r1, r8
  4041a8:	f001 fa96 	bl	4056d8 <__aeabi_fsub>
  4041ac:	4601      	mov	r1, r0
  4041ae:	4682      	mov	sl, r0
  4041b0:	4620      	mov	r0, r4
  4041b2:	f001 fa91 	bl	4056d8 <__aeabi_fsub>
  4041b6:	9a03      	ldr	r2, [sp, #12]
  4041b8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  4041bc:	1ad2      	subs	r2, r2, r3
  4041be:	2a19      	cmp	r2, #25
  4041c0:	4680      	mov	r8, r0
  4041c2:	dc2e      	bgt.n	404222 <__ieee754_rem_pio2f+0x272>
  4041c4:	6028      	str	r0, [r5, #0]
  4041c6:	46a1      	mov	r9, r4
  4041c8:	e7b8      	b.n	40413c <__ieee754_rem_pio2f+0x18c>
  4041ca:	f001 fa87 	bl	4056dc <__addsf3>
  4041ce:	4b25      	ldr	r3, [pc, #148]	; (404264 <__ieee754_rem_pio2f+0x2b4>)
  4041d0:	f024 040f 	bic.w	r4, r4, #15
  4041d4:	429c      	cmp	r4, r3
  4041d6:	4606      	mov	r6, r0
  4041d8:	d010      	beq.n	4041fc <__ieee754_rem_pio2f+0x24c>
  4041da:	4923      	ldr	r1, [pc, #140]	; (404268 <__ieee754_rem_pio2f+0x2b8>)
  4041dc:	f001 fa7e 	bl	4056dc <__addsf3>
  4041e0:	4601      	mov	r1, r0
  4041e2:	6028      	str	r0, [r5, #0]
  4041e4:	4630      	mov	r0, r6
  4041e6:	f001 fa77 	bl	4056d8 <__aeabi_fsub>
  4041ea:	491f      	ldr	r1, [pc, #124]	; (404268 <__ieee754_rem_pio2f+0x2b8>)
  4041ec:	f001 fa76 	bl	4056dc <__addsf3>
  4041f0:	f04f 37ff 	mov.w	r7, #4294967295
  4041f4:	6068      	str	r0, [r5, #4]
  4041f6:	e756      	b.n	4040a6 <__ieee754_rem_pio2f+0xf6>
  4041f8:	2303      	movs	r3, #3
  4041fa:	e73a      	b.n	404072 <__ieee754_rem_pio2f+0xc2>
  4041fc:	491d      	ldr	r1, [pc, #116]	; (404274 <__ieee754_rem_pio2f+0x2c4>)
  4041fe:	f001 fa6d 	bl	4056dc <__addsf3>
  404202:	491d      	ldr	r1, [pc, #116]	; (404278 <__ieee754_rem_pio2f+0x2c8>)
  404204:	4604      	mov	r4, r0
  404206:	f001 fa69 	bl	4056dc <__addsf3>
  40420a:	4601      	mov	r1, r0
  40420c:	6028      	str	r0, [r5, #0]
  40420e:	4620      	mov	r0, r4
  404210:	f001 fa62 	bl	4056d8 <__aeabi_fsub>
  404214:	4918      	ldr	r1, [pc, #96]	; (404278 <__ieee754_rem_pio2f+0x2c8>)
  404216:	f001 fa61 	bl	4056dc <__addsf3>
  40421a:	f04f 37ff 	mov.w	r7, #4294967295
  40421e:	6068      	str	r0, [r5, #4]
  404220:	e741      	b.n	4040a6 <__ieee754_rem_pio2f+0xf6>
  404222:	4918      	ldr	r1, [pc, #96]	; (404284 <__ieee754_rem_pio2f+0x2d4>)
  404224:	4658      	mov	r0, fp
  404226:	f001 fb61 	bl	4058ec <__aeabi_fmul>
  40422a:	4601      	mov	r1, r0
  40422c:	4680      	mov	r8, r0
  40422e:	4620      	mov	r0, r4
  404230:	f001 fa52 	bl	4056d8 <__aeabi_fsub>
  404234:	4601      	mov	r1, r0
  404236:	4681      	mov	r9, r0
  404238:	4620      	mov	r0, r4
  40423a:	f001 fa4d 	bl	4056d8 <__aeabi_fsub>
  40423e:	4641      	mov	r1, r8
  404240:	f001 fa4a 	bl	4056d8 <__aeabi_fsub>
  404244:	4910      	ldr	r1, [pc, #64]	; (404288 <__ieee754_rem_pio2f+0x2d8>)
  404246:	4604      	mov	r4, r0
  404248:	4658      	mov	r0, fp
  40424a:	f001 fb4f 	bl	4058ec <__aeabi_fmul>
  40424e:	4621      	mov	r1, r4
  404250:	f001 fa42 	bl	4056d8 <__aeabi_fsub>
  404254:	4682      	mov	sl, r0
  404256:	e76a      	b.n	40412e <__ieee754_rem_pio2f+0x17e>
  404258:	3f490fd8 	.word	0x3f490fd8
  40425c:	4016cbe3 	.word	0x4016cbe3
  404260:	3fc90f80 	.word	0x3fc90f80
  404264:	3fc90fd0 	.word	0x3fc90fd0
  404268:	37354443 	.word	0x37354443
  40426c:	43490f80 	.word	0x43490f80
  404270:	0040b114 	.word	0x0040b114
  404274:	37354400 	.word	0x37354400
  404278:	2e85a308 	.word	0x2e85a308
  40427c:	3f22f984 	.word	0x3f22f984
  404280:	0040b094 	.word	0x0040b094
  404284:	2e85a300 	.word	0x2e85a300
  404288:	248d3132 	.word	0x248d3132

0040428c <__kernel_cosf>:
  40428c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404290:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  404294:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
  404298:	4606      	mov	r6, r0
  40429a:	460f      	mov	r7, r1
  40429c:	da49      	bge.n	404332 <__kernel_cosf+0xa6>
  40429e:	f001 fceb 	bl	405c78 <__aeabi_f2iz>
  4042a2:	2800      	cmp	r0, #0
  4042a4:	f000 809d 	beq.w	4043e2 <__kernel_cosf+0x156>
  4042a8:	4631      	mov	r1, r6
  4042aa:	4630      	mov	r0, r6
  4042ac:	f001 fb1e 	bl	4058ec <__aeabi_fmul>
  4042b0:	494e      	ldr	r1, [pc, #312]	; (4043ec <__kernel_cosf+0x160>)
  4042b2:	4605      	mov	r5, r0
  4042b4:	f001 fb1a 	bl	4058ec <__aeabi_fmul>
  4042b8:	494d      	ldr	r1, [pc, #308]	; (4043f0 <__kernel_cosf+0x164>)
  4042ba:	f001 fa0f 	bl	4056dc <__addsf3>
  4042be:	4629      	mov	r1, r5
  4042c0:	f001 fb14 	bl	4058ec <__aeabi_fmul>
  4042c4:	494b      	ldr	r1, [pc, #300]	; (4043f4 <__kernel_cosf+0x168>)
  4042c6:	f001 fa07 	bl	4056d8 <__aeabi_fsub>
  4042ca:	4629      	mov	r1, r5
  4042cc:	f001 fb0e 	bl	4058ec <__aeabi_fmul>
  4042d0:	4949      	ldr	r1, [pc, #292]	; (4043f8 <__kernel_cosf+0x16c>)
  4042d2:	f001 fa03 	bl	4056dc <__addsf3>
  4042d6:	4629      	mov	r1, r5
  4042d8:	f001 fb08 	bl	4058ec <__aeabi_fmul>
  4042dc:	4947      	ldr	r1, [pc, #284]	; (4043fc <__kernel_cosf+0x170>)
  4042de:	f001 f9fb 	bl	4056d8 <__aeabi_fsub>
  4042e2:	4629      	mov	r1, r5
  4042e4:	f001 fb02 	bl	4058ec <__aeabi_fmul>
  4042e8:	4945      	ldr	r1, [pc, #276]	; (404400 <__kernel_cosf+0x174>)
  4042ea:	f001 f9f7 	bl	4056dc <__addsf3>
  4042ee:	4629      	mov	r1, r5
  4042f0:	f001 fafc 	bl	4058ec <__aeabi_fmul>
  4042f4:	4680      	mov	r8, r0
  4042f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4042fa:	4628      	mov	r0, r5
  4042fc:	f001 faf6 	bl	4058ec <__aeabi_fmul>
  404300:	4641      	mov	r1, r8
  404302:	4604      	mov	r4, r0
  404304:	4628      	mov	r0, r5
  404306:	f001 faf1 	bl	4058ec <__aeabi_fmul>
  40430a:	4639      	mov	r1, r7
  40430c:	4605      	mov	r5, r0
  40430e:	4630      	mov	r0, r6
  404310:	f001 faec 	bl	4058ec <__aeabi_fmul>
  404314:	4601      	mov	r1, r0
  404316:	4628      	mov	r0, r5
  404318:	f001 f9de 	bl	4056d8 <__aeabi_fsub>
  40431c:	4601      	mov	r1, r0
  40431e:	4620      	mov	r0, r4
  404320:	f001 f9da 	bl	4056d8 <__aeabi_fsub>
  404324:	4601      	mov	r1, r0
  404326:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40432a:	f001 f9d5 	bl	4056d8 <__aeabi_fsub>
  40432e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404332:	4601      	mov	r1, r0
  404334:	f001 fada 	bl	4058ec <__aeabi_fmul>
  404338:	492c      	ldr	r1, [pc, #176]	; (4043ec <__kernel_cosf+0x160>)
  40433a:	4605      	mov	r5, r0
  40433c:	f001 fad6 	bl	4058ec <__aeabi_fmul>
  404340:	492b      	ldr	r1, [pc, #172]	; (4043f0 <__kernel_cosf+0x164>)
  404342:	f001 f9cb 	bl	4056dc <__addsf3>
  404346:	4629      	mov	r1, r5
  404348:	f001 fad0 	bl	4058ec <__aeabi_fmul>
  40434c:	4929      	ldr	r1, [pc, #164]	; (4043f4 <__kernel_cosf+0x168>)
  40434e:	f001 f9c3 	bl	4056d8 <__aeabi_fsub>
  404352:	4629      	mov	r1, r5
  404354:	f001 faca 	bl	4058ec <__aeabi_fmul>
  404358:	4927      	ldr	r1, [pc, #156]	; (4043f8 <__kernel_cosf+0x16c>)
  40435a:	f001 f9bf 	bl	4056dc <__addsf3>
  40435e:	4629      	mov	r1, r5
  404360:	f001 fac4 	bl	4058ec <__aeabi_fmul>
  404364:	4925      	ldr	r1, [pc, #148]	; (4043fc <__kernel_cosf+0x170>)
  404366:	f001 f9b7 	bl	4056d8 <__aeabi_fsub>
  40436a:	4629      	mov	r1, r5
  40436c:	f001 fabe 	bl	4058ec <__aeabi_fmul>
  404370:	4923      	ldr	r1, [pc, #140]	; (404400 <__kernel_cosf+0x174>)
  404372:	f001 f9b3 	bl	4056dc <__addsf3>
  404376:	4629      	mov	r1, r5
  404378:	f001 fab8 	bl	4058ec <__aeabi_fmul>
  40437c:	4b21      	ldr	r3, [pc, #132]	; (404404 <__kernel_cosf+0x178>)
  40437e:	429c      	cmp	r4, r3
  404380:	4680      	mov	r8, r0
  404382:	ddb8      	ble.n	4042f6 <__kernel_cosf+0x6a>
  404384:	4b20      	ldr	r3, [pc, #128]	; (404408 <__kernel_cosf+0x17c>)
  404386:	429c      	cmp	r4, r3
  404388:	dc27      	bgt.n	4043da <__kernel_cosf+0x14e>
  40438a:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
  40438e:	4621      	mov	r1, r4
  404390:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404394:	f001 f9a0 	bl	4056d8 <__aeabi_fsub>
  404398:	4681      	mov	r9, r0
  40439a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40439e:	4628      	mov	r0, r5
  4043a0:	f001 faa4 	bl	4058ec <__aeabi_fmul>
  4043a4:	4621      	mov	r1, r4
  4043a6:	f001 f997 	bl	4056d8 <__aeabi_fsub>
  4043aa:	4641      	mov	r1, r8
  4043ac:	4604      	mov	r4, r0
  4043ae:	4628      	mov	r0, r5
  4043b0:	f001 fa9c 	bl	4058ec <__aeabi_fmul>
  4043b4:	4639      	mov	r1, r7
  4043b6:	4605      	mov	r5, r0
  4043b8:	4630      	mov	r0, r6
  4043ba:	f001 fa97 	bl	4058ec <__aeabi_fmul>
  4043be:	4601      	mov	r1, r0
  4043c0:	4628      	mov	r0, r5
  4043c2:	f001 f989 	bl	4056d8 <__aeabi_fsub>
  4043c6:	4601      	mov	r1, r0
  4043c8:	4620      	mov	r0, r4
  4043ca:	f001 f985 	bl	4056d8 <__aeabi_fsub>
  4043ce:	4601      	mov	r1, r0
  4043d0:	4648      	mov	r0, r9
  4043d2:	f001 f981 	bl	4056d8 <__aeabi_fsub>
  4043d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043da:	f8df 9034 	ldr.w	r9, [pc, #52]	; 404410 <__kernel_cosf+0x184>
  4043de:	4c0b      	ldr	r4, [pc, #44]	; (40440c <__kernel_cosf+0x180>)
  4043e0:	e7db      	b.n	40439a <__kernel_cosf+0x10e>
  4043e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4043e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4043ea:	bf00      	nop
  4043ec:	ad47d74e 	.word	0xad47d74e
  4043f0:	310f74f6 	.word	0x310f74f6
  4043f4:	3493f27c 	.word	0x3493f27c
  4043f8:	37d00d01 	.word	0x37d00d01
  4043fc:	3ab60b61 	.word	0x3ab60b61
  404400:	3d2aaaab 	.word	0x3d2aaaab
  404404:	3e999999 	.word	0x3e999999
  404408:	3f480000 	.word	0x3f480000
  40440c:	3e900000 	.word	0x3e900000
  404410:	3f380000 	.word	0x3f380000

00404414 <__kernel_rem_pio2f>:
  404414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404418:	b0dd      	sub	sp, #372	; 0x174
  40441a:	4c90      	ldr	r4, [pc, #576]	; (40465c <__kernel_rem_pio2f+0x248>)
  40441c:	9308      	str	r3, [sp, #32]
  40441e:	3b01      	subs	r3, #1
  404420:	9301      	str	r3, [sp, #4]
  404422:	1ed3      	subs	r3, r2, #3
  404424:	bf48      	it	mi
  404426:	1d13      	addmi	r3, r2, #4
  404428:	9d66      	ldr	r5, [sp, #408]	; 0x198
  40442a:	9107      	str	r1, [sp, #28]
  40442c:	10db      	asrs	r3, r3, #3
  40442e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404432:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
  404436:	9309      	str	r3, [sp, #36]	; 0x24
  404438:	4619      	mov	r1, r3
  40443a:	3301      	adds	r3, #1
  40443c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
  404440:	9405      	str	r4, [sp, #20]
  404442:	9a01      	ldr	r2, [sp, #4]
  404444:	9304      	str	r3, [sp, #16]
  404446:	9b05      	ldr	r3, [sp, #20]
  404448:	9002      	str	r0, [sp, #8]
  40444a:	189c      	adds	r4, r3, r2
  40444c:	eba1 0602 	sub.w	r6, r1, r2
  404450:	d417      	bmi.n	404482 <__kernel_rem_pio2f+0x6e>
  404452:	4434      	add	r4, r6
  404454:	2500      	movs	r5, #0
  404456:	3401      	adds	r4, #1
  404458:	af1f      	add	r7, sp, #124	; 0x7c
  40445a:	f8dd 819c 	ldr.w	r8, [sp, #412]	; 0x19c
  40445e:	e008      	b.n	404472 <__kernel_rem_pio2f+0x5e>
  404460:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
  404464:	f001 f9ee 	bl	405844 <__aeabi_i2f>
  404468:	3601      	adds	r6, #1
  40446a:	42a6      	cmp	r6, r4
  40446c:	f847 0f04 	str.w	r0, [r7, #4]!
  404470:	d007      	beq.n	404482 <__kernel_rem_pio2f+0x6e>
  404472:	2e00      	cmp	r6, #0
  404474:	daf4      	bge.n	404460 <__kernel_rem_pio2f+0x4c>
  404476:	3601      	adds	r6, #1
  404478:	4628      	mov	r0, r5
  40447a:	42a6      	cmp	r6, r4
  40447c:	f847 0f04 	str.w	r0, [r7, #4]!
  404480:	d1f7      	bne.n	404472 <__kernel_rem_pio2f+0x5e>
  404482:	9b05      	ldr	r3, [sp, #20]
  404484:	2b00      	cmp	r3, #0
  404486:	db28      	blt.n	4044da <__kernel_rem_pio2f+0xc6>
  404488:	9b08      	ldr	r3, [sp, #32]
  40448a:	009e      	lsls	r6, r3, #2
  40448c:	9b02      	ldr	r3, [sp, #8]
  40448e:	1f35      	subs	r5, r6, #4
  404490:	441d      	add	r5, r3
  404492:	ab20      	add	r3, sp, #128	; 0x80
  404494:	441e      	add	r6, r3
  404496:	9b05      	ldr	r3, [sp, #20]
  404498:	aa48      	add	r2, sp, #288	; 0x120
  40449a:	f04f 0900 	mov.w	r9, #0
  40449e:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  4044a2:	af47      	add	r7, sp, #284	; 0x11c
  4044a4:	9b01      	ldr	r3, [sp, #4]
  4044a6:	2b00      	cmp	r3, #0
  4044a8:	f2c0 82b9 	blt.w	404a1e <__kernel_rem_pio2f+0x60a>
  4044ac:	9b02      	ldr	r3, [sp, #8]
  4044ae:	46b3      	mov	fp, r6
  4044b0:	1f1c      	subs	r4, r3, #4
  4044b2:	46ca      	mov	sl, r9
  4044b4:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  4044b8:	f854 0f04 	ldr.w	r0, [r4, #4]!
  4044bc:	f001 fa16 	bl	4058ec <__aeabi_fmul>
  4044c0:	4601      	mov	r1, r0
  4044c2:	4650      	mov	r0, sl
  4044c4:	f001 f90a 	bl	4056dc <__addsf3>
  4044c8:	42ac      	cmp	r4, r5
  4044ca:	4682      	mov	sl, r0
  4044cc:	d1f2      	bne.n	4044b4 <__kernel_rem_pio2f+0xa0>
  4044ce:	f847 af04 	str.w	sl, [r7, #4]!
  4044d2:	4547      	cmp	r7, r8
  4044d4:	f106 0604 	add.w	r6, r6, #4
  4044d8:	d1e4      	bne.n	4044a4 <__kernel_rem_pio2f+0x90>
  4044da:	9805      	ldr	r0, [sp, #20]
  4044dc:	9908      	ldr	r1, [sp, #32]
  4044de:	9c02      	ldr	r4, [sp, #8]
  4044e0:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  4044e4:	4603      	mov	r3, r0
  4044e6:	4413      	add	r3, r2
  4044e8:	009b      	lsls	r3, r3, #2
  4044ea:	440a      	add	r2, r1
  4044ec:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  4044f0:	1f19      	subs	r1, r3, #4
  4044f2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
  4044f6:	4453      	add	r3, sl
  4044f8:	eb0a 0201 	add.w	r2, sl, r1
  4044fc:	920a      	str	r2, [sp, #40]	; 0x28
  4044fe:	930b      	str	r3, [sp, #44]	; 0x2c
  404500:	4680      	mov	r8, r0
  404502:	ea4f 0388 	mov.w	r3, r8, lsl #2
  404506:	aa5c      	add	r2, sp, #368	; 0x170
  404508:	9303      	str	r3, [sp, #12]
  40450a:	18d3      	adds	r3, r2, r3
  40450c:	f1b8 0f00 	cmp.w	r8, #0
  404510:	f853 9c50 	ldr.w	r9, [r3, #-80]
  404514:	dd22      	ble.n	40455c <__kernel_rem_pio2f+0x148>
  404516:	eb02 0488 	add.w	r4, r2, r8, lsl #2
  40451a:	3c54      	subs	r4, #84	; 0x54
  40451c:	ae0b      	add	r6, sp, #44	; 0x2c
  40451e:	af47      	add	r7, sp, #284	; 0x11c
  404520:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  404524:	4648      	mov	r0, r9
  404526:	f001 f9e1 	bl	4058ec <__aeabi_fmul>
  40452a:	f001 fba5 	bl	405c78 <__aeabi_f2iz>
  40452e:	f001 f989 	bl	405844 <__aeabi_i2f>
  404532:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404536:	4683      	mov	fp, r0
  404538:	f001 f9d8 	bl	4058ec <__aeabi_fmul>
  40453c:	4601      	mov	r1, r0
  40453e:	4648      	mov	r0, r9
  404540:	f001 f8ca 	bl	4056d8 <__aeabi_fsub>
  404544:	f001 fb98 	bl	405c78 <__aeabi_f2iz>
  404548:	f854 1904 	ldr.w	r1, [r4], #-4
  40454c:	f846 0f04 	str.w	r0, [r6, #4]!
  404550:	4658      	mov	r0, fp
  404552:	f001 f8c3 	bl	4056dc <__addsf3>
  404556:	42bc      	cmp	r4, r7
  404558:	4681      	mov	r9, r0
  40455a:	d1e1      	bne.n	404520 <__kernel_rem_pio2f+0x10c>
  40455c:	9e04      	ldr	r6, [sp, #16]
  40455e:	4648      	mov	r0, r9
  404560:	4631      	mov	r1, r6
  404562:	f000 fb9f 	bl	404ca4 <scalbnf>
  404566:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
  40456a:	4604      	mov	r4, r0
  40456c:	f001 f9be 	bl	4058ec <__aeabi_fmul>
  404570:	f000 fb52 	bl	404c18 <floorf>
  404574:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
  404578:	f001 f9b8 	bl	4058ec <__aeabi_fmul>
  40457c:	4601      	mov	r1, r0
  40457e:	4620      	mov	r0, r4
  404580:	f001 f8aa 	bl	4056d8 <__aeabi_fsub>
  404584:	4604      	mov	r4, r0
  404586:	f001 fb77 	bl	405c78 <__aeabi_f2iz>
  40458a:	4681      	mov	r9, r0
  40458c:	9006      	str	r0, [sp, #24]
  40458e:	f001 f959 	bl	405844 <__aeabi_i2f>
  404592:	4601      	mov	r1, r0
  404594:	4620      	mov	r0, r4
  404596:	f001 f89f 	bl	4056d8 <__aeabi_fsub>
  40459a:	2e00      	cmp	r6, #0
  40459c:	4607      	mov	r7, r0
  40459e:	f340 80e6 	ble.w	40476e <__kernel_rem_pio2f+0x35a>
  4045a2:	f108 31ff 	add.w	r1, r8, #4294967295
  4045a6:	f1c6 0308 	rsb	r3, r6, #8
  4045aa:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  4045ae:	fa42 f003 	asr.w	r0, r2, r3
  4045b2:	fa00 f303 	lsl.w	r3, r0, r3
  4045b6:	1ad3      	subs	r3, r2, r3
  4045b8:	464a      	mov	r2, r9
  4045ba:	f1c6 0407 	rsb	r4, r6, #7
  4045be:	4402      	add	r2, r0
  4045c0:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
  4045c4:	9206      	str	r2, [sp, #24]
  4045c6:	fa43 f404 	asr.w	r4, r3, r4
  4045ca:	2c00      	cmp	r4, #0
  4045cc:	dd5b      	ble.n	404686 <__kernel_rem_pio2f+0x272>
  4045ce:	9b06      	ldr	r3, [sp, #24]
  4045d0:	f1b8 0f00 	cmp.w	r8, #0
  4045d4:	f103 0301 	add.w	r3, r3, #1
  4045d8:	9306      	str	r3, [sp, #24]
  4045da:	f340 823b 	ble.w	404a54 <__kernel_rem_pio2f+0x640>
  4045de:	f8da 6000 	ldr.w	r6, [sl]
  4045e2:	2e00      	cmp	r6, #0
  4045e4:	f040 8294 	bne.w	404b10 <__kernel_rem_pio2f+0x6fc>
  4045e8:	f1b8 0f01 	cmp.w	r8, #1
  4045ec:	f340 8255 	ble.w	404a9a <__kernel_rem_pio2f+0x686>
  4045f0:	4652      	mov	r2, sl
  4045f2:	2301      	movs	r3, #1
  4045f4:	f852 6f04 	ldr.w	r6, [r2, #4]!
  4045f8:	2e00      	cmp	r6, #0
  4045fa:	f000 824a 	beq.w	404a92 <__kernel_rem_pio2f+0x67e>
  4045fe:	1c59      	adds	r1, r3, #1
  404600:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
  404604:	4588      	cmp	r8, r1
  404606:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
  40460a:	dd14      	ble.n	404636 <__kernel_rem_pio2f+0x222>
  40460c:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  404610:	3302      	adds	r3, #2
  404612:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  404616:	4598      	cmp	r8, r3
  404618:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
  40461c:	dd0b      	ble.n	404636 <__kernel_rem_pio2f+0x222>
  40461e:	9a03      	ldr	r2, [sp, #12]
  404620:	4452      	add	r2, sl
  404622:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404626:	4691      	mov	r9, r2
  404628:	681a      	ldr	r2, [r3, #0]
  40462a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40462e:	f843 2b04 	str.w	r2, [r3], #4
  404632:	454b      	cmp	r3, r9
  404634:	d1f8      	bne.n	404628 <__kernel_rem_pio2f+0x214>
  404636:	9b04      	ldr	r3, [sp, #16]
  404638:	2b00      	cmp	r3, #0
  40463a:	dd11      	ble.n	404660 <__kernel_rem_pio2f+0x24c>
  40463c:	9b04      	ldr	r3, [sp, #16]
  40463e:	2b01      	cmp	r3, #1
  404640:	f04f 0601 	mov.w	r6, #1
  404644:	f040 820e 	bne.w	404a64 <__kernel_rem_pio2f+0x650>
  404648:	f108 32ff 	add.w	r2, r8, #4294967295
  40464c:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  404650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404654:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  404658:	e20e      	b.n	404a78 <__kernel_rem_pio2f+0x664>
  40465a:	bf00      	nop
  40465c:	0040b458 	.word	0x0040b458
  404660:	2c02      	cmp	r4, #2
  404662:	d110      	bne.n	404686 <__kernel_rem_pio2f+0x272>
  404664:	4639      	mov	r1, r7
  404666:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40466a:	f001 f835 	bl	4056d8 <__aeabi_fsub>
  40466e:	4607      	mov	r7, r0
  404670:	9904      	ldr	r1, [sp, #16]
  404672:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404676:	f000 fb15 	bl	404ca4 <scalbnf>
  40467a:	4601      	mov	r1, r0
  40467c:	4638      	mov	r0, r7
  40467e:	f001 f82b 	bl	4056d8 <__aeabi_fsub>
  404682:	2402      	movs	r4, #2
  404684:	4607      	mov	r7, r0
  404686:	2100      	movs	r1, #0
  404688:	4638      	mov	r0, r7
  40468a:	f001 fac3 	bl	405c14 <__aeabi_fcmpeq>
  40468e:	2800      	cmp	r0, #0
  404690:	f000 8083 	beq.w	40479a <__kernel_rem_pio2f+0x386>
  404694:	9b05      	ldr	r3, [sp, #20]
  404696:	f108 37ff 	add.w	r7, r8, #4294967295
  40469a:	42bb      	cmp	r3, r7
  40469c:	dc0f      	bgt.n	4046be <__kernel_rem_pio2f+0x2aa>
  40469e:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
  4046a2:	3b01      	subs	r3, #1
  4046a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4046a6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  4046aa:	2200      	movs	r2, #0
  4046ac:	f853 1904 	ldr.w	r1, [r3], #-4
  4046b0:	4283      	cmp	r3, r0
  4046b2:	ea42 0201 	orr.w	r2, r2, r1
  4046b6:	d1f9      	bne.n	4046ac <__kernel_rem_pio2f+0x298>
  4046b8:	2a00      	cmp	r2, #0
  4046ba:	f040 809d 	bne.w	4047f8 <__kernel_rem_pio2f+0x3e4>
  4046be:	9b05      	ldr	r3, [sp, #20]
  4046c0:	3b01      	subs	r3, #1
  4046c2:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
  4046c6:	2b00      	cmp	r3, #0
  4046c8:	f040 81f4 	bne.w	404ab4 <__kernel_rem_pio2f+0x6a0>
  4046cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4046ce:	2301      	movs	r3, #1
  4046d0:	f852 1904 	ldr.w	r1, [r2], #-4
  4046d4:	3301      	adds	r3, #1
  4046d6:	2900      	cmp	r1, #0
  4046d8:	d0fa      	beq.n	4046d0 <__kernel_rem_pio2f+0x2bc>
  4046da:	4443      	add	r3, r8
  4046dc:	461a      	mov	r2, r3
  4046de:	9306      	str	r3, [sp, #24]
  4046e0:	f108 0301 	add.w	r3, r8, #1
  4046e4:	4293      	cmp	r3, r2
  4046e6:	dc37      	bgt.n	404758 <__kernel_rem_pio2f+0x344>
  4046e8:	9908      	ldr	r1, [sp, #32]
  4046ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4046ec:	eb01 0708 	add.w	r7, r1, r8
  4046f0:	a920      	add	r1, sp, #128	; 0x80
  4046f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4046f6:	9906      	ldr	r1, [sp, #24]
  4046f8:	189e      	adds	r6, r3, r2
  4046fa:	eb01 0902 	add.w	r9, r1, r2
  4046fe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
  404702:	9a67      	ldr	r2, [sp, #412]	; 0x19c
  404704:	3e01      	subs	r6, #1
  404706:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  40470a:	aa48      	add	r2, sp, #288	; 0x120
  40470c:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  404710:	9b67      	ldr	r3, [sp, #412]	; 0x19c
  404712:	eb03 0389 	add.w	r3, r3, r9, lsl #2
  404716:	9303      	str	r3, [sp, #12]
  404718:	f856 0f04 	ldr.w	r0, [r6, #4]!
  40471c:	f001 f892 	bl	405844 <__aeabi_i2f>
  404720:	9b01      	ldr	r3, [sp, #4]
  404722:	f847 0b04 	str.w	r0, [r7], #4
  404726:	2b00      	cmp	r3, #0
  404728:	db19      	blt.n	40475e <__kernel_rem_pio2f+0x34a>
  40472a:	9b02      	ldr	r3, [sp, #8]
  40472c:	46bb      	mov	fp, r7
  40472e:	1f1c      	subs	r4, r3, #4
  404730:	f04f 0900 	mov.w	r9, #0
  404734:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  404738:	f854 0f04 	ldr.w	r0, [r4, #4]!
  40473c:	f001 f8d6 	bl	4058ec <__aeabi_fmul>
  404740:	4601      	mov	r1, r0
  404742:	4648      	mov	r0, r9
  404744:	f000 ffca 	bl	4056dc <__addsf3>
  404748:	42ac      	cmp	r4, r5
  40474a:	4681      	mov	r9, r0
  40474c:	d1f2      	bne.n	404734 <__kernel_rem_pio2f+0x320>
  40474e:	9b03      	ldr	r3, [sp, #12]
  404750:	f848 9b04 	str.w	r9, [r8], #4
  404754:	429e      	cmp	r6, r3
  404756:	d1df      	bne.n	404718 <__kernel_rem_pio2f+0x304>
  404758:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40475c:	e6d1      	b.n	404502 <__kernel_rem_pio2f+0xee>
  40475e:	9b03      	ldr	r3, [sp, #12]
  404760:	f04f 0900 	mov.w	r9, #0
  404764:	429e      	cmp	r6, r3
  404766:	f848 9b04 	str.w	r9, [r8], #4
  40476a:	d1d5      	bne.n	404718 <__kernel_rem_pio2f+0x304>
  40476c:	e7f4      	b.n	404758 <__kernel_rem_pio2f+0x344>
  40476e:	d105      	bne.n	40477c <__kernel_rem_pio2f+0x368>
  404770:	f108 33ff 	add.w	r3, r8, #4294967295
  404774:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
  404778:	1224      	asrs	r4, r4, #8
  40477a:	e726      	b.n	4045ca <__kernel_rem_pio2f+0x1b6>
  40477c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404780:	f001 fa66 	bl	405c50 <__aeabi_fcmpge>
  404784:	2800      	cmp	r0, #0
  404786:	f040 8153 	bne.w	404a30 <__kernel_rem_pio2f+0x61c>
  40478a:	4604      	mov	r4, r0
  40478c:	2100      	movs	r1, #0
  40478e:	4638      	mov	r0, r7
  404790:	f001 fa40 	bl	405c14 <__aeabi_fcmpeq>
  404794:	2800      	cmp	r0, #0
  404796:	f47f af7d 	bne.w	404694 <__kernel_rem_pio2f+0x280>
  40479a:	9e04      	ldr	r6, [sp, #16]
  40479c:	4638      	mov	r0, r7
  40479e:	4271      	negs	r1, r6
  4047a0:	f000 fa80 	bl	404ca4 <scalbnf>
  4047a4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  4047a8:	46a1      	mov	r9, r4
  4047aa:	4604      	mov	r4, r0
  4047ac:	f001 fa50 	bl	405c50 <__aeabi_fcmpge>
  4047b0:	2800      	cmp	r0, #0
  4047b2:	f000 818d 	beq.w	404ad0 <__kernel_rem_pio2f+0x6bc>
  4047b6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  4047ba:	4620      	mov	r0, r4
  4047bc:	f001 f896 	bl	4058ec <__aeabi_fmul>
  4047c0:	f001 fa5a 	bl	405c78 <__aeabi_f2iz>
  4047c4:	f001 f83e 	bl	405844 <__aeabi_i2f>
  4047c8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  4047cc:	4605      	mov	r5, r0
  4047ce:	f001 f88d 	bl	4058ec <__aeabi_fmul>
  4047d2:	4601      	mov	r1, r0
  4047d4:	4620      	mov	r0, r4
  4047d6:	f000 ff7f 	bl	4056d8 <__aeabi_fsub>
  4047da:	f001 fa4d 	bl	405c78 <__aeabi_f2iz>
  4047de:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  4047e2:	4628      	mov	r0, r5
  4047e4:	f001 fa48 	bl	405c78 <__aeabi_f2iz>
  4047e8:	f108 0701 	add.w	r7, r8, #1
  4047ec:	4633      	mov	r3, r6
  4047ee:	3308      	adds	r3, #8
  4047f0:	9304      	str	r3, [sp, #16]
  4047f2:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
  4047f6:	e012      	b.n	40481e <__kernel_rem_pio2f+0x40a>
  4047f8:	9a04      	ldr	r2, [sp, #16]
  4047fa:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  4047fe:	3a08      	subs	r2, #8
  404800:	46a1      	mov	r9, r4
  404802:	9204      	str	r2, [sp, #16]
  404804:	b95b      	cbnz	r3, 40481e <__kernel_rem_pio2f+0x40a>
  404806:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
  40480a:	3b01      	subs	r3, #1
  40480c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404810:	f853 1904 	ldr.w	r1, [r3], #-4
  404814:	3f01      	subs	r7, #1
  404816:	3a08      	subs	r2, #8
  404818:	2900      	cmp	r1, #0
  40481a:	d0f9      	beq.n	404810 <__kernel_rem_pio2f+0x3fc>
  40481c:	9204      	str	r2, [sp, #16]
  40481e:	9904      	ldr	r1, [sp, #16]
  404820:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404824:	f000 fa3e 	bl	404ca4 <scalbnf>
  404828:	2f00      	cmp	r7, #0
  40482a:	4604      	mov	r4, r0
  40482c:	f2c0 815c 	blt.w	404ae8 <__kernel_rem_pio2f+0x6d4>
  404830:	00bb      	lsls	r3, r7, #2
  404832:	a948      	add	r1, sp, #288	; 0x120
  404834:	1d1a      	adds	r2, r3, #4
  404836:	eb01 0803 	add.w	r8, r1, r3
  40483a:	9301      	str	r3, [sp, #4]
  40483c:	9202      	str	r2, [sp, #8]
  40483e:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
  404842:	eb0a 0b02 	add.w	fp, sl, r2
  404846:	f108 0504 	add.w	r5, r8, #4
  40484a:	f85b 0d04 	ldr.w	r0, [fp, #-4]!
  40484e:	f000 fff9 	bl	405844 <__aeabi_i2f>
  404852:	4621      	mov	r1, r4
  404854:	f001 f84a 	bl	4058ec <__aeabi_fmul>
  404858:	4631      	mov	r1, r6
  40485a:	f845 0d04 	str.w	r0, [r5, #-4]!
  40485e:	4620      	mov	r0, r4
  404860:	f001 f844 	bl	4058ec <__aeabi_fmul>
  404864:	45d3      	cmp	fp, sl
  404866:	4604      	mov	r4, r0
  404868:	d1ef      	bne.n	40484a <__kernel_rem_pio2f+0x436>
  40486a:	2600      	movs	r6, #0
  40486c:	f8dd b014 	ldr.w	fp, [sp, #20]
  404870:	9703      	str	r7, [sp, #12]
  404872:	f1a8 0804 	sub.w	r8, r8, #4
  404876:	46b2      	mov	sl, r6
  404878:	f1bb 0f00 	cmp.w	fp, #0
  40487c:	bfb8      	it	lt
  40487e:	2500      	movlt	r5, #0
  404880:	db15      	blt.n	4048ae <__kernel_rem_pio2f+0x49a>
  404882:	4ea5      	ldr	r6, [pc, #660]	; (404b18 <__kernel_rem_pio2f+0x704>)
  404884:	48a5      	ldr	r0, [pc, #660]	; (404b1c <__kernel_rem_pio2f+0x708>)
  404886:	4647      	mov	r7, r8
  404888:	2500      	movs	r5, #0
  40488a:	2400      	movs	r4, #0
  40488c:	e003      	b.n	404896 <__kernel_rem_pio2f+0x482>
  40488e:	4554      	cmp	r4, sl
  404890:	dc0d      	bgt.n	4048ae <__kernel_rem_pio2f+0x49a>
  404892:	f856 0f04 	ldr.w	r0, [r6, #4]!
  404896:	f857 1f04 	ldr.w	r1, [r7, #4]!
  40489a:	f001 f827 	bl	4058ec <__aeabi_fmul>
  40489e:	4601      	mov	r1, r0
  4048a0:	4628      	mov	r0, r5
  4048a2:	f000 ff1b 	bl	4056dc <__addsf3>
  4048a6:	3401      	adds	r4, #1
  4048a8:	45a3      	cmp	fp, r4
  4048aa:	4605      	mov	r5, r0
  4048ac:	daef      	bge.n	40488e <__kernel_rem_pio2f+0x47a>
  4048ae:	ab5c      	add	r3, sp, #368	; 0x170
  4048b0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  4048b4:	f1a8 0804 	sub.w	r8, r8, #4
  4048b8:	f843 5ca0 	str.w	r5, [r3, #-160]
  4048bc:	ab46      	add	r3, sp, #280	; 0x118
  4048be:	4543      	cmp	r3, r8
  4048c0:	f10a 0a01 	add.w	sl, sl, #1
  4048c4:	d1d8      	bne.n	404878 <__kernel_rem_pio2f+0x464>
  4048c6:	9b66      	ldr	r3, [sp, #408]	; 0x198
  4048c8:	9f03      	ldr	r7, [sp, #12]
  4048ca:	2b03      	cmp	r3, #3
  4048cc:	d85a      	bhi.n	404984 <__kernel_rem_pio2f+0x570>
  4048ce:	e8df f003 	tbb	[pc, r3]
  4048d2:	5f8e      	.short	0x5f8e
  4048d4:	025f      	.short	0x025f
  4048d6:	2f00      	cmp	r7, #0
  4048d8:	f340 8104 	ble.w	404ae4 <__kernel_rem_pio2f+0x6d0>
  4048dc:	9a01      	ldr	r2, [sp, #4]
  4048de:	a95c      	add	r1, sp, #368	; 0x170
  4048e0:	188b      	adds	r3, r1, r2
  4048e2:	ac34      	add	r4, sp, #208	; 0xd0
  4048e4:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  4048e8:	18a5      	adds	r5, r4, r2
  4048ea:	f855 ac04 	ldr.w	sl, [r5, #-4]
  4048ee:	4631      	mov	r1, r6
  4048f0:	4650      	mov	r0, sl
  4048f2:	f000 fef3 	bl	4056dc <__addsf3>
  4048f6:	4680      	mov	r8, r0
  4048f8:	4601      	mov	r1, r0
  4048fa:	4650      	mov	r0, sl
  4048fc:	f000 feec 	bl	4056d8 <__aeabi_fsub>
  404900:	4631      	mov	r1, r6
  404902:	f000 feeb 	bl	4056dc <__addsf3>
  404906:	6028      	str	r0, [r5, #0]
  404908:	f845 8d04 	str.w	r8, [r5, #-4]!
  40490c:	42ac      	cmp	r4, r5
  40490e:	4646      	mov	r6, r8
  404910:	d1eb      	bne.n	4048ea <__kernel_rem_pio2f+0x4d6>
  404912:	2f01      	cmp	r7, #1
  404914:	f340 80e6 	ble.w	404ae4 <__kernel_rem_pio2f+0x6d0>
  404918:	9a01      	ldr	r2, [sp, #4]
  40491a:	a95c      	add	r1, sp, #368	; 0x170
  40491c:	188b      	adds	r3, r1, r2
  40491e:	4414      	add	r4, r2
  404920:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  404924:	4625      	mov	r5, r4
  404926:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
  40492a:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40492e:	4631      	mov	r1, r6
  404930:	4640      	mov	r0, r8
  404932:	f000 fed3 	bl	4056dc <__addsf3>
  404936:	4607      	mov	r7, r0
  404938:	4601      	mov	r1, r0
  40493a:	4640      	mov	r0, r8
  40493c:	f000 fecc 	bl	4056d8 <__aeabi_fsub>
  404940:	4631      	mov	r1, r6
  404942:	f000 fecb 	bl	4056dc <__addsf3>
  404946:	6028      	str	r0, [r5, #0]
  404948:	f845 7d04 	str.w	r7, [r5, #-4]!
  40494c:	45aa      	cmp	sl, r5
  40494e:	463e      	mov	r6, r7
  404950:	d1eb      	bne.n	40492a <__kernel_rem_pio2f+0x516>
  404952:	2000      	movs	r0, #0
  404954:	3404      	adds	r4, #4
  404956:	ad36      	add	r5, sp, #216	; 0xd8
  404958:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  40495c:	f000 febe 	bl	4056dc <__addsf3>
  404960:	42a5      	cmp	r5, r4
  404962:	d1f9      	bne.n	404958 <__kernel_rem_pio2f+0x544>
  404964:	f1b9 0f00 	cmp.w	r9, #0
  404968:	f000 80b9 	beq.w	404ade <__kernel_rem_pio2f+0x6ca>
  40496c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  40496e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  404970:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404974:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404978:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40497c:	9c07      	ldr	r4, [sp, #28]
  40497e:	60a0      	str	r0, [r4, #8]
  404980:	6022      	str	r2, [r4, #0]
  404982:	6063      	str	r3, [r4, #4]
  404984:	9b06      	ldr	r3, [sp, #24]
  404986:	f003 0007 	and.w	r0, r3, #7
  40498a:	b05d      	add	sp, #372	; 0x174
  40498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404990:	9c01      	ldr	r4, [sp, #4]
  404992:	ad34      	add	r5, sp, #208	; 0xd0
  404994:	3404      	adds	r4, #4
  404996:	442c      	add	r4, r5
  404998:	2000      	movs	r0, #0
  40499a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  40499e:	f000 fe9d 	bl	4056dc <__addsf3>
  4049a2:	42ac      	cmp	r4, r5
  4049a4:	d1f9      	bne.n	40499a <__kernel_rem_pio2f+0x586>
  4049a6:	f1b9 0f00 	cmp.w	r9, #0
  4049aa:	f000 8085 	beq.w	404ab8 <__kernel_rem_pio2f+0x6a4>
  4049ae:	9a07      	ldr	r2, [sp, #28]
  4049b0:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
  4049b4:	4601      	mov	r1, r0
  4049b6:	6013      	str	r3, [r2, #0]
  4049b8:	9834      	ldr	r0, [sp, #208]	; 0xd0
  4049ba:	f000 fe8d 	bl	4056d8 <__aeabi_fsub>
  4049be:	2f00      	cmp	r7, #0
  4049c0:	dd0b      	ble.n	4049da <__kernel_rem_pio2f+0x5c6>
  4049c2:	ad34      	add	r5, sp, #208	; 0xd0
  4049c4:	2401      	movs	r4, #1
  4049c6:	3401      	adds	r4, #1
  4049c8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4049cc:	f000 fe86 	bl	4056dc <__addsf3>
  4049d0:	42a7      	cmp	r7, r4
  4049d2:	daf8      	bge.n	4049c6 <__kernel_rem_pio2f+0x5b2>
  4049d4:	f1b9 0f00 	cmp.w	r9, #0
  4049d8:	d001      	beq.n	4049de <__kernel_rem_pio2f+0x5ca>
  4049da:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4049de:	9b07      	ldr	r3, [sp, #28]
  4049e0:	6058      	str	r0, [r3, #4]
  4049e2:	9b06      	ldr	r3, [sp, #24]
  4049e4:	f003 0007 	and.w	r0, r3, #7
  4049e8:	b05d      	add	sp, #372	; 0x174
  4049ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049ee:	9b02      	ldr	r3, [sp, #8]
  4049f0:	ad34      	add	r5, sp, #208	; 0xd0
  4049f2:	442b      	add	r3, r5
  4049f4:	2000      	movs	r0, #0
  4049f6:	461c      	mov	r4, r3
  4049f8:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  4049fc:	f000 fe6e 	bl	4056dc <__addsf3>
  404a00:	42a5      	cmp	r5, r4
  404a02:	d1f9      	bne.n	4049f8 <__kernel_rem_pio2f+0x5e4>
  404a04:	f1b9 0f00 	cmp.w	r9, #0
  404a08:	d001      	beq.n	404a0e <__kernel_rem_pio2f+0x5fa>
  404a0a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404a0e:	9b07      	ldr	r3, [sp, #28]
  404a10:	6018      	str	r0, [r3, #0]
  404a12:	9b06      	ldr	r3, [sp, #24]
  404a14:	f003 0007 	and.w	r0, r3, #7
  404a18:	b05d      	add	sp, #372	; 0x174
  404a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a1e:	46ca      	mov	sl, r9
  404a20:	f847 af04 	str.w	sl, [r7, #4]!
  404a24:	4547      	cmp	r7, r8
  404a26:	f106 0604 	add.w	r6, r6, #4
  404a2a:	f47f ad3b 	bne.w	4044a4 <__kernel_rem_pio2f+0x90>
  404a2e:	e554      	b.n	4044da <__kernel_rem_pio2f+0xc6>
  404a30:	9b06      	ldr	r3, [sp, #24]
  404a32:	f1b8 0f00 	cmp.w	r8, #0
  404a36:	f103 0301 	add.w	r3, r3, #1
  404a3a:	9306      	str	r3, [sp, #24]
  404a3c:	bfc8      	it	gt
  404a3e:	2402      	movgt	r4, #2
  404a40:	f73f adcd 	bgt.w	4045de <__kernel_rem_pio2f+0x1ca>
  404a44:	4639      	mov	r1, r7
  404a46:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404a4a:	f000 fe45 	bl	4056d8 <__aeabi_fsub>
  404a4e:	2402      	movs	r4, #2
  404a50:	4607      	mov	r7, r0
  404a52:	e618      	b.n	404686 <__kernel_rem_pio2f+0x272>
  404a54:	9b04      	ldr	r3, [sp, #16]
  404a56:	2b00      	cmp	r3, #0
  404a58:	dd22      	ble.n	404aa0 <__kernel_rem_pio2f+0x68c>
  404a5a:	2600      	movs	r6, #0
  404a5c:	9b04      	ldr	r3, [sp, #16]
  404a5e:	2b01      	cmp	r3, #1
  404a60:	f43f adf2 	beq.w	404648 <__kernel_rem_pio2f+0x234>
  404a64:	2b02      	cmp	r3, #2
  404a66:	d107      	bne.n	404a78 <__kernel_rem_pio2f+0x664>
  404a68:	f108 32ff 	add.w	r2, r8, #4294967295
  404a6c:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  404a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  404a74:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  404a78:	2c02      	cmp	r4, #2
  404a7a:	f47f ae04 	bne.w	404686 <__kernel_rem_pio2f+0x272>
  404a7e:	4639      	mov	r1, r7
  404a80:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404a84:	f000 fe28 	bl	4056d8 <__aeabi_fsub>
  404a88:	4607      	mov	r7, r0
  404a8a:	2e00      	cmp	r6, #0
  404a8c:	f43f adfb 	beq.w	404686 <__kernel_rem_pio2f+0x272>
  404a90:	e5ee      	b.n	404670 <__kernel_rem_pio2f+0x25c>
  404a92:	3301      	adds	r3, #1
  404a94:	4598      	cmp	r8, r3
  404a96:	f47f adad 	bne.w	4045f4 <__kernel_rem_pio2f+0x1e0>
  404a9a:	9b04      	ldr	r3, [sp, #16]
  404a9c:	2b00      	cmp	r3, #0
  404a9e:	dcdd      	bgt.n	404a5c <__kernel_rem_pio2f+0x648>
  404aa0:	2c02      	cmp	r4, #2
  404aa2:	f47f adf0 	bne.w	404686 <__kernel_rem_pio2f+0x272>
  404aa6:	4639      	mov	r1, r7
  404aa8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404aac:	f000 fe14 	bl	4056d8 <__aeabi_fsub>
  404ab0:	4607      	mov	r7, r0
  404ab2:	e5e8      	b.n	404686 <__kernel_rem_pio2f+0x272>
  404ab4:	2301      	movs	r3, #1
  404ab6:	e610      	b.n	4046da <__kernel_rem_pio2f+0x2c6>
  404ab8:	9b07      	ldr	r3, [sp, #28]
  404aba:	4601      	mov	r1, r0
  404abc:	6018      	str	r0, [r3, #0]
  404abe:	9834      	ldr	r0, [sp, #208]	; 0xd0
  404ac0:	f000 fe0a 	bl	4056d8 <__aeabi_fsub>
  404ac4:	2f00      	cmp	r7, #0
  404ac6:	f73f af7c 	bgt.w	4049c2 <__kernel_rem_pio2f+0x5ae>
  404aca:	9b07      	ldr	r3, [sp, #28]
  404acc:	6058      	str	r0, [r3, #4]
  404ace:	e788      	b.n	4049e2 <__kernel_rem_pio2f+0x5ce>
  404ad0:	4620      	mov	r0, r4
  404ad2:	f001 f8d1 	bl	405c78 <__aeabi_f2iz>
  404ad6:	4647      	mov	r7, r8
  404ad8:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  404adc:	e69f      	b.n	40481e <__kernel_rem_pio2f+0x40a>
  404ade:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  404ae0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  404ae2:	e74b      	b.n	40497c <__kernel_rem_pio2f+0x568>
  404ae4:	2000      	movs	r0, #0
  404ae6:	e73d      	b.n	404964 <__kernel_rem_pio2f+0x550>
  404ae8:	9b66      	ldr	r3, [sp, #408]	; 0x198
  404aea:	2b03      	cmp	r3, #3
  404aec:	f63f af4a 	bhi.w	404984 <__kernel_rem_pio2f+0x570>
  404af0:	a201      	add	r2, pc, #4	; (adr r2, 404af8 <__kernel_rem_pio2f+0x6e4>)
  404af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404af6:	bf00      	nop
  404af8:	00404b0d 	.word	0x00404b0d
  404afc:	00404b09 	.word	0x00404b09
  404b00:	00404b09 	.word	0x00404b09
  404b04:	00404ae5 	.word	0x00404ae5
  404b08:	2000      	movs	r0, #0
  404b0a:	e74c      	b.n	4049a6 <__kernel_rem_pio2f+0x592>
  404b0c:	2000      	movs	r0, #0
  404b0e:	e779      	b.n	404a04 <__kernel_rem_pio2f+0x5f0>
  404b10:	2101      	movs	r1, #1
  404b12:	2300      	movs	r3, #0
  404b14:	e574      	b.n	404600 <__kernel_rem_pio2f+0x1ec>
  404b16:	bf00      	nop
  404b18:	0040b42c 	.word	0x0040b42c
  404b1c:	3fc90000 	.word	0x3fc90000

00404b20 <__kernel_sinf>:
  404b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404b24:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  404b28:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
  404b2c:	4604      	mov	r4, r0
  404b2e:	460f      	mov	r7, r1
  404b30:	4690      	mov	r8, r2
  404b32:	da03      	bge.n	404b3c <__kernel_sinf+0x1c>
  404b34:	f001 f8a0 	bl	405c78 <__aeabi_f2iz>
  404b38:	2800      	cmp	r0, #0
  404b3a:	d058      	beq.n	404bee <__kernel_sinf+0xce>
  404b3c:	4621      	mov	r1, r4
  404b3e:	4620      	mov	r0, r4
  404b40:	f000 fed4 	bl	4058ec <__aeabi_fmul>
  404b44:	4605      	mov	r5, r0
  404b46:	4601      	mov	r1, r0
  404b48:	4620      	mov	r0, r4
  404b4a:	f000 fecf 	bl	4058ec <__aeabi_fmul>
  404b4e:	4929      	ldr	r1, [pc, #164]	; (404bf4 <__kernel_sinf+0xd4>)
  404b50:	4606      	mov	r6, r0
  404b52:	4628      	mov	r0, r5
  404b54:	f000 feca 	bl	4058ec <__aeabi_fmul>
  404b58:	4927      	ldr	r1, [pc, #156]	; (404bf8 <__kernel_sinf+0xd8>)
  404b5a:	f000 fdbd 	bl	4056d8 <__aeabi_fsub>
  404b5e:	4629      	mov	r1, r5
  404b60:	f000 fec4 	bl	4058ec <__aeabi_fmul>
  404b64:	4925      	ldr	r1, [pc, #148]	; (404bfc <__kernel_sinf+0xdc>)
  404b66:	f000 fdb9 	bl	4056dc <__addsf3>
  404b6a:	4629      	mov	r1, r5
  404b6c:	f000 febe 	bl	4058ec <__aeabi_fmul>
  404b70:	4923      	ldr	r1, [pc, #140]	; (404c00 <__kernel_sinf+0xe0>)
  404b72:	f000 fdb1 	bl	4056d8 <__aeabi_fsub>
  404b76:	4629      	mov	r1, r5
  404b78:	f000 feb8 	bl	4058ec <__aeabi_fmul>
  404b7c:	4921      	ldr	r1, [pc, #132]	; (404c04 <__kernel_sinf+0xe4>)
  404b7e:	f000 fdad 	bl	4056dc <__addsf3>
  404b82:	4681      	mov	r9, r0
  404b84:	f1b8 0f00 	cmp.w	r8, #0
  404b88:	d022      	beq.n	404bd0 <__kernel_sinf+0xb0>
  404b8a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404b8e:	4638      	mov	r0, r7
  404b90:	f000 feac 	bl	4058ec <__aeabi_fmul>
  404b94:	4649      	mov	r1, r9
  404b96:	4680      	mov	r8, r0
  404b98:	4630      	mov	r0, r6
  404b9a:	f000 fea7 	bl	4058ec <__aeabi_fmul>
  404b9e:	4601      	mov	r1, r0
  404ba0:	4640      	mov	r0, r8
  404ba2:	f000 fd99 	bl	4056d8 <__aeabi_fsub>
  404ba6:	4629      	mov	r1, r5
  404ba8:	f000 fea0 	bl	4058ec <__aeabi_fmul>
  404bac:	4639      	mov	r1, r7
  404bae:	f000 fd93 	bl	4056d8 <__aeabi_fsub>
  404bb2:	4915      	ldr	r1, [pc, #84]	; (404c08 <__kernel_sinf+0xe8>)
  404bb4:	4605      	mov	r5, r0
  404bb6:	4630      	mov	r0, r6
  404bb8:	f000 fe98 	bl	4058ec <__aeabi_fmul>
  404bbc:	4601      	mov	r1, r0
  404bbe:	4628      	mov	r0, r5
  404bc0:	f000 fd8c 	bl	4056dc <__addsf3>
  404bc4:	4601      	mov	r1, r0
  404bc6:	4620      	mov	r0, r4
  404bc8:	f000 fd86 	bl	4056d8 <__aeabi_fsub>
  404bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404bd0:	4601      	mov	r1, r0
  404bd2:	4628      	mov	r0, r5
  404bd4:	f000 fe8a 	bl	4058ec <__aeabi_fmul>
  404bd8:	490b      	ldr	r1, [pc, #44]	; (404c08 <__kernel_sinf+0xe8>)
  404bda:	f000 fd7d 	bl	4056d8 <__aeabi_fsub>
  404bde:	4631      	mov	r1, r6
  404be0:	f000 fe84 	bl	4058ec <__aeabi_fmul>
  404be4:	4621      	mov	r1, r4
  404be6:	f000 fd79 	bl	4056dc <__addsf3>
  404bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404bee:	4620      	mov	r0, r4
  404bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404bf4:	2f2ec9d3 	.word	0x2f2ec9d3
  404bf8:	32d72f34 	.word	0x32d72f34
  404bfc:	3638ef1b 	.word	0x3638ef1b
  404c00:	39500d01 	.word	0x39500d01
  404c04:	3c088889 	.word	0x3c088889
  404c08:	3e2aaaab 	.word	0x3e2aaaab

00404c0c <matherr>:
  404c0c:	2000      	movs	r0, #0
  404c0e:	4770      	bx	lr

00404c10 <fabsf>:
  404c10:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  404c14:	4770      	bx	lr
  404c16:	bf00      	nop

00404c18 <floorf>:
  404c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404c1c:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
  404c20:	0dfc      	lsrs	r4, r7, #23
  404c22:	3c7f      	subs	r4, #127	; 0x7f
  404c24:	2c16      	cmp	r4, #22
  404c26:	4605      	mov	r5, r0
  404c28:	dc13      	bgt.n	404c52 <floorf+0x3a>
  404c2a:	2c00      	cmp	r4, #0
  404c2c:	4680      	mov	r8, r0
  404c2e:	db1b      	blt.n	404c68 <floorf+0x50>
  404c30:	4f19      	ldr	r7, [pc, #100]	; (404c98 <floorf+0x80>)
  404c32:	4127      	asrs	r7, r4
  404c34:	4238      	tst	r0, r7
  404c36:	d014      	beq.n	404c62 <floorf+0x4a>
  404c38:	4918      	ldr	r1, [pc, #96]	; (404c9c <floorf+0x84>)
  404c3a:	f000 fd4f 	bl	4056dc <__addsf3>
  404c3e:	2100      	movs	r1, #0
  404c40:	f001 f810 	bl	405c64 <__aeabi_fcmpgt>
  404c44:	b168      	cbz	r0, 404c62 <floorf+0x4a>
  404c46:	2d00      	cmp	r5, #0
  404c48:	db1b      	blt.n	404c82 <floorf+0x6a>
  404c4a:	ea28 0007 	bic.w	r0, r8, r7
  404c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c52:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  404c56:	d304      	bcc.n	404c62 <floorf+0x4a>
  404c58:	4601      	mov	r1, r0
  404c5a:	f000 fd3f 	bl	4056dc <__addsf3>
  404c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c62:	4628      	mov	r0, r5
  404c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c68:	490c      	ldr	r1, [pc, #48]	; (404c9c <floorf+0x84>)
  404c6a:	f000 fd37 	bl	4056dc <__addsf3>
  404c6e:	2100      	movs	r1, #0
  404c70:	f000 fff8 	bl	405c64 <__aeabi_fcmpgt>
  404c74:	2800      	cmp	r0, #0
  404c76:	d0f4      	beq.n	404c62 <floorf+0x4a>
  404c78:	2d00      	cmp	r5, #0
  404c7a:	db08      	blt.n	404c8e <floorf+0x76>
  404c7c:	2000      	movs	r0, #0
  404c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c82:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  404c86:	fa43 f404 	asr.w	r4, r3, r4
  404c8a:	44a0      	add	r8, r4
  404c8c:	e7dd      	b.n	404c4a <floorf+0x32>
  404c8e:	2f00      	cmp	r7, #0
  404c90:	d0e7      	beq.n	404c62 <floorf+0x4a>
  404c92:	4803      	ldr	r0, [pc, #12]	; (404ca0 <floorf+0x88>)
  404c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404c98:	007fffff 	.word	0x007fffff
  404c9c:	7149f2ca 	.word	0x7149f2ca
  404ca0:	bf800000 	.word	0xbf800000

00404ca4 <scalbnf>:
  404ca4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  404ca8:	b538      	push	{r3, r4, r5, lr}
  404caa:	4603      	mov	r3, r0
  404cac:	d016      	beq.n	404cdc <scalbnf+0x38>
  404cae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  404cb2:	d20f      	bcs.n	404cd4 <scalbnf+0x30>
  404cb4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  404cb8:	460d      	mov	r5, r1
  404cba:	d310      	bcc.n	404cde <scalbnf+0x3a>
  404cbc:	4604      	mov	r4, r0
  404cbe:	0dd0      	lsrs	r0, r2, #23
  404cc0:	4428      	add	r0, r5
  404cc2:	28fe      	cmp	r0, #254	; 0xfe
  404cc4:	dc2e      	bgt.n	404d24 <scalbnf+0x80>
  404cc6:	2800      	cmp	r0, #0
  404cc8:	dd1d      	ble.n	404d06 <scalbnf+0x62>
  404cca:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  404cce:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  404cd2:	bd38      	pop	{r3, r4, r5, pc}
  404cd4:	4601      	mov	r1, r0
  404cd6:	f000 fd01 	bl	4056dc <__addsf3>
  404cda:	bd38      	pop	{r3, r4, r5, pc}
  404cdc:	bd38      	pop	{r3, r4, r5, pc}
  404cde:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
  404ce2:	f000 fe03 	bl	4058ec <__aeabi_fmul>
  404ce6:	4a18      	ldr	r2, [pc, #96]	; (404d48 <scalbnf+0xa4>)
  404ce8:	4295      	cmp	r5, r2
  404cea:	4603      	mov	r3, r0
  404cec:	db07      	blt.n	404cfe <scalbnf+0x5a>
  404cee:	4604      	mov	r4, r0
  404cf0:	f3c0 50c7 	ubfx	r0, r0, #23, #8
  404cf4:	3819      	subs	r0, #25
  404cf6:	e7e3      	b.n	404cc0 <scalbnf+0x1c>
  404cf8:	4814      	ldr	r0, [pc, #80]	; (404d4c <scalbnf+0xa8>)
  404cfa:	f000 f82b 	bl	404d54 <copysignf>
  404cfe:	4913      	ldr	r1, [pc, #76]	; (404d4c <scalbnf+0xa8>)
  404d00:	f000 fdf4 	bl	4058ec <__aeabi_fmul>
  404d04:	bd38      	pop	{r3, r4, r5, pc}
  404d06:	f110 0f16 	cmn.w	r0, #22
  404d0a:	da13      	bge.n	404d34 <scalbnf+0x90>
  404d0c:	f24c 3250 	movw	r2, #50000	; 0xc350
  404d10:	4295      	cmp	r5, r2
  404d12:	4619      	mov	r1, r3
  404d14:	ddf0      	ble.n	404cf8 <scalbnf+0x54>
  404d16:	480e      	ldr	r0, [pc, #56]	; (404d50 <scalbnf+0xac>)
  404d18:	f000 f81c 	bl	404d54 <copysignf>
  404d1c:	490c      	ldr	r1, [pc, #48]	; (404d50 <scalbnf+0xac>)
  404d1e:	f000 fde5 	bl	4058ec <__aeabi_fmul>
  404d22:	bd38      	pop	{r3, r4, r5, pc}
  404d24:	4619      	mov	r1, r3
  404d26:	480a      	ldr	r0, [pc, #40]	; (404d50 <scalbnf+0xac>)
  404d28:	f000 f814 	bl	404d54 <copysignf>
  404d2c:	4908      	ldr	r1, [pc, #32]	; (404d50 <scalbnf+0xac>)
  404d2e:	f000 fddd 	bl	4058ec <__aeabi_fmul>
  404d32:	bd38      	pop	{r3, r4, r5, pc}
  404d34:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  404d38:	3019      	adds	r0, #25
  404d3a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  404d3e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
  404d42:	f000 fdd3 	bl	4058ec <__aeabi_fmul>
  404d46:	bd38      	pop	{r3, r4, r5, pc}
  404d48:	ffff3cb0 	.word	0xffff3cb0
  404d4c:	0da24260 	.word	0x0da24260
  404d50:	7149f2ca 	.word	0x7149f2ca

00404d54 <copysignf>:
  404d54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404d58:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  404d5c:	4308      	orrs	r0, r1
  404d5e:	4770      	bx	lr

00404d60 <__aeabi_drsub>:
  404d60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  404d64:	e002      	b.n	404d6c <__adddf3>
  404d66:	bf00      	nop

00404d68 <__aeabi_dsub>:
  404d68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00404d6c <__adddf3>:
  404d6c:	b530      	push	{r4, r5, lr}
  404d6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  404d72:	ea4f 0543 	mov.w	r5, r3, lsl #1
  404d76:	ea94 0f05 	teq	r4, r5
  404d7a:	bf08      	it	eq
  404d7c:	ea90 0f02 	teqeq	r0, r2
  404d80:	bf1f      	itttt	ne
  404d82:	ea54 0c00 	orrsne.w	ip, r4, r0
  404d86:	ea55 0c02 	orrsne.w	ip, r5, r2
  404d8a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404d8e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404d92:	f000 80e2 	beq.w	404f5a <__adddf3+0x1ee>
  404d96:	ea4f 5454 	mov.w	r4, r4, lsr #21
  404d9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404d9e:	bfb8      	it	lt
  404da0:	426d      	neglt	r5, r5
  404da2:	dd0c      	ble.n	404dbe <__adddf3+0x52>
  404da4:	442c      	add	r4, r5
  404da6:	ea80 0202 	eor.w	r2, r0, r2
  404daa:	ea81 0303 	eor.w	r3, r1, r3
  404dae:	ea82 0000 	eor.w	r0, r2, r0
  404db2:	ea83 0101 	eor.w	r1, r3, r1
  404db6:	ea80 0202 	eor.w	r2, r0, r2
  404dba:	ea81 0303 	eor.w	r3, r1, r3
  404dbe:	2d36      	cmp	r5, #54	; 0x36
  404dc0:	bf88      	it	hi
  404dc2:	bd30      	pophi	{r4, r5, pc}
  404dc4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404dc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404dcc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404dd0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404dd4:	d002      	beq.n	404ddc <__adddf3+0x70>
  404dd6:	4240      	negs	r0, r0
  404dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404ddc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404de0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404de4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404de8:	d002      	beq.n	404df0 <__adddf3+0x84>
  404dea:	4252      	negs	r2, r2
  404dec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404df0:	ea94 0f05 	teq	r4, r5
  404df4:	f000 80a7 	beq.w	404f46 <__adddf3+0x1da>
  404df8:	f1a4 0401 	sub.w	r4, r4, #1
  404dfc:	f1d5 0e20 	rsbs	lr, r5, #32
  404e00:	db0d      	blt.n	404e1e <__adddf3+0xb2>
  404e02:	fa02 fc0e 	lsl.w	ip, r2, lr
  404e06:	fa22 f205 	lsr.w	r2, r2, r5
  404e0a:	1880      	adds	r0, r0, r2
  404e0c:	f141 0100 	adc.w	r1, r1, #0
  404e10:	fa03 f20e 	lsl.w	r2, r3, lr
  404e14:	1880      	adds	r0, r0, r2
  404e16:	fa43 f305 	asr.w	r3, r3, r5
  404e1a:	4159      	adcs	r1, r3
  404e1c:	e00e      	b.n	404e3c <__adddf3+0xd0>
  404e1e:	f1a5 0520 	sub.w	r5, r5, #32
  404e22:	f10e 0e20 	add.w	lr, lr, #32
  404e26:	2a01      	cmp	r2, #1
  404e28:	fa03 fc0e 	lsl.w	ip, r3, lr
  404e2c:	bf28      	it	cs
  404e2e:	f04c 0c02 	orrcs.w	ip, ip, #2
  404e32:	fa43 f305 	asr.w	r3, r3, r5
  404e36:	18c0      	adds	r0, r0, r3
  404e38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404e3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404e40:	d507      	bpl.n	404e52 <__adddf3+0xe6>
  404e42:	f04f 0e00 	mov.w	lr, #0
  404e46:	f1dc 0c00 	rsbs	ip, ip, #0
  404e4a:	eb7e 0000 	sbcs.w	r0, lr, r0
  404e4e:	eb6e 0101 	sbc.w	r1, lr, r1
  404e52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  404e56:	d31b      	bcc.n	404e90 <__adddf3+0x124>
  404e58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404e5c:	d30c      	bcc.n	404e78 <__adddf3+0x10c>
  404e5e:	0849      	lsrs	r1, r1, #1
  404e60:	ea5f 0030 	movs.w	r0, r0, rrx
  404e64:	ea4f 0c3c 	mov.w	ip, ip, rrx
  404e68:	f104 0401 	add.w	r4, r4, #1
  404e6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  404e70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  404e74:	f080 809a 	bcs.w	404fac <__adddf3+0x240>
  404e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404e7c:	bf08      	it	eq
  404e7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404e82:	f150 0000 	adcs.w	r0, r0, #0
  404e86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404e8a:	ea41 0105 	orr.w	r1, r1, r5
  404e8e:	bd30      	pop	{r4, r5, pc}
  404e90:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404e94:	4140      	adcs	r0, r0
  404e96:	eb41 0101 	adc.w	r1, r1, r1
  404e9a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404e9e:	f1a4 0401 	sub.w	r4, r4, #1
  404ea2:	d1e9      	bne.n	404e78 <__adddf3+0x10c>
  404ea4:	f091 0f00 	teq	r1, #0
  404ea8:	bf04      	itt	eq
  404eaa:	4601      	moveq	r1, r0
  404eac:	2000      	moveq	r0, #0
  404eae:	fab1 f381 	clz	r3, r1
  404eb2:	bf08      	it	eq
  404eb4:	3320      	addeq	r3, #32
  404eb6:	f1a3 030b 	sub.w	r3, r3, #11
  404eba:	f1b3 0220 	subs.w	r2, r3, #32
  404ebe:	da0c      	bge.n	404eda <__adddf3+0x16e>
  404ec0:	320c      	adds	r2, #12
  404ec2:	dd08      	ble.n	404ed6 <__adddf3+0x16a>
  404ec4:	f102 0c14 	add.w	ip, r2, #20
  404ec8:	f1c2 020c 	rsb	r2, r2, #12
  404ecc:	fa01 f00c 	lsl.w	r0, r1, ip
  404ed0:	fa21 f102 	lsr.w	r1, r1, r2
  404ed4:	e00c      	b.n	404ef0 <__adddf3+0x184>
  404ed6:	f102 0214 	add.w	r2, r2, #20
  404eda:	bfd8      	it	le
  404edc:	f1c2 0c20 	rsble	ip, r2, #32
  404ee0:	fa01 f102 	lsl.w	r1, r1, r2
  404ee4:	fa20 fc0c 	lsr.w	ip, r0, ip
  404ee8:	bfdc      	itt	le
  404eea:	ea41 010c 	orrle.w	r1, r1, ip
  404eee:	4090      	lslle	r0, r2
  404ef0:	1ae4      	subs	r4, r4, r3
  404ef2:	bfa2      	ittt	ge
  404ef4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404ef8:	4329      	orrge	r1, r5
  404efa:	bd30      	popge	{r4, r5, pc}
  404efc:	ea6f 0404 	mvn.w	r4, r4
  404f00:	3c1f      	subs	r4, #31
  404f02:	da1c      	bge.n	404f3e <__adddf3+0x1d2>
  404f04:	340c      	adds	r4, #12
  404f06:	dc0e      	bgt.n	404f26 <__adddf3+0x1ba>
  404f08:	f104 0414 	add.w	r4, r4, #20
  404f0c:	f1c4 0220 	rsb	r2, r4, #32
  404f10:	fa20 f004 	lsr.w	r0, r0, r4
  404f14:	fa01 f302 	lsl.w	r3, r1, r2
  404f18:	ea40 0003 	orr.w	r0, r0, r3
  404f1c:	fa21 f304 	lsr.w	r3, r1, r4
  404f20:	ea45 0103 	orr.w	r1, r5, r3
  404f24:	bd30      	pop	{r4, r5, pc}
  404f26:	f1c4 040c 	rsb	r4, r4, #12
  404f2a:	f1c4 0220 	rsb	r2, r4, #32
  404f2e:	fa20 f002 	lsr.w	r0, r0, r2
  404f32:	fa01 f304 	lsl.w	r3, r1, r4
  404f36:	ea40 0003 	orr.w	r0, r0, r3
  404f3a:	4629      	mov	r1, r5
  404f3c:	bd30      	pop	{r4, r5, pc}
  404f3e:	fa21 f004 	lsr.w	r0, r1, r4
  404f42:	4629      	mov	r1, r5
  404f44:	bd30      	pop	{r4, r5, pc}
  404f46:	f094 0f00 	teq	r4, #0
  404f4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404f4e:	bf06      	itte	eq
  404f50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404f54:	3401      	addeq	r4, #1
  404f56:	3d01      	subne	r5, #1
  404f58:	e74e      	b.n	404df8 <__adddf3+0x8c>
  404f5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404f5e:	bf18      	it	ne
  404f60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404f64:	d029      	beq.n	404fba <__adddf3+0x24e>
  404f66:	ea94 0f05 	teq	r4, r5
  404f6a:	bf08      	it	eq
  404f6c:	ea90 0f02 	teqeq	r0, r2
  404f70:	d005      	beq.n	404f7e <__adddf3+0x212>
  404f72:	ea54 0c00 	orrs.w	ip, r4, r0
  404f76:	bf04      	itt	eq
  404f78:	4619      	moveq	r1, r3
  404f7a:	4610      	moveq	r0, r2
  404f7c:	bd30      	pop	{r4, r5, pc}
  404f7e:	ea91 0f03 	teq	r1, r3
  404f82:	bf1e      	ittt	ne
  404f84:	2100      	movne	r1, #0
  404f86:	2000      	movne	r0, #0
  404f88:	bd30      	popne	{r4, r5, pc}
  404f8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  404f8e:	d105      	bne.n	404f9c <__adddf3+0x230>
  404f90:	0040      	lsls	r0, r0, #1
  404f92:	4149      	adcs	r1, r1
  404f94:	bf28      	it	cs
  404f96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  404f9a:	bd30      	pop	{r4, r5, pc}
  404f9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404fa0:	bf3c      	itt	cc
  404fa2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404fa6:	bd30      	popcc	{r4, r5, pc}
  404fa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404fac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404fb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404fb4:	f04f 0000 	mov.w	r0, #0
  404fb8:	bd30      	pop	{r4, r5, pc}
  404fba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404fbe:	bf1a      	itte	ne
  404fc0:	4619      	movne	r1, r3
  404fc2:	4610      	movne	r0, r2
  404fc4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404fc8:	bf1c      	itt	ne
  404fca:	460b      	movne	r3, r1
  404fcc:	4602      	movne	r2, r0
  404fce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404fd2:	bf06      	itte	eq
  404fd4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404fd8:	ea91 0f03 	teqeq	r1, r3
  404fdc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404fe0:	bd30      	pop	{r4, r5, pc}
  404fe2:	bf00      	nop

00404fe4 <__aeabi_ui2d>:
  404fe4:	f090 0f00 	teq	r0, #0
  404fe8:	bf04      	itt	eq
  404fea:	2100      	moveq	r1, #0
  404fec:	4770      	bxeq	lr
  404fee:	b530      	push	{r4, r5, lr}
  404ff0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404ff4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404ff8:	f04f 0500 	mov.w	r5, #0
  404ffc:	f04f 0100 	mov.w	r1, #0
  405000:	e750      	b.n	404ea4 <__adddf3+0x138>
  405002:	bf00      	nop

00405004 <__aeabi_i2d>:
  405004:	f090 0f00 	teq	r0, #0
  405008:	bf04      	itt	eq
  40500a:	2100      	moveq	r1, #0
  40500c:	4770      	bxeq	lr
  40500e:	b530      	push	{r4, r5, lr}
  405010:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405014:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405018:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40501c:	bf48      	it	mi
  40501e:	4240      	negmi	r0, r0
  405020:	f04f 0100 	mov.w	r1, #0
  405024:	e73e      	b.n	404ea4 <__adddf3+0x138>
  405026:	bf00      	nop

00405028 <__aeabi_f2d>:
  405028:	0042      	lsls	r2, r0, #1
  40502a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40502e:	ea4f 0131 	mov.w	r1, r1, rrx
  405032:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405036:	bf1f      	itttt	ne
  405038:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40503c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405040:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405044:	4770      	bxne	lr
  405046:	f092 0f00 	teq	r2, #0
  40504a:	bf14      	ite	ne
  40504c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405050:	4770      	bxeq	lr
  405052:	b530      	push	{r4, r5, lr}
  405054:	f44f 7460 	mov.w	r4, #896	; 0x380
  405058:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40505c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405060:	e720      	b.n	404ea4 <__adddf3+0x138>
  405062:	bf00      	nop

00405064 <__aeabi_ul2d>:
  405064:	ea50 0201 	orrs.w	r2, r0, r1
  405068:	bf08      	it	eq
  40506a:	4770      	bxeq	lr
  40506c:	b530      	push	{r4, r5, lr}
  40506e:	f04f 0500 	mov.w	r5, #0
  405072:	e00a      	b.n	40508a <__aeabi_l2d+0x16>

00405074 <__aeabi_l2d>:
  405074:	ea50 0201 	orrs.w	r2, r0, r1
  405078:	bf08      	it	eq
  40507a:	4770      	bxeq	lr
  40507c:	b530      	push	{r4, r5, lr}
  40507e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405082:	d502      	bpl.n	40508a <__aeabi_l2d+0x16>
  405084:	4240      	negs	r0, r0
  405086:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40508a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40508e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405092:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405096:	f43f aedc 	beq.w	404e52 <__adddf3+0xe6>
  40509a:	f04f 0203 	mov.w	r2, #3
  40509e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4050a2:	bf18      	it	ne
  4050a4:	3203      	addne	r2, #3
  4050a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4050aa:	bf18      	it	ne
  4050ac:	3203      	addne	r2, #3
  4050ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4050b2:	f1c2 0320 	rsb	r3, r2, #32
  4050b6:	fa00 fc03 	lsl.w	ip, r0, r3
  4050ba:	fa20 f002 	lsr.w	r0, r0, r2
  4050be:	fa01 fe03 	lsl.w	lr, r1, r3
  4050c2:	ea40 000e 	orr.w	r0, r0, lr
  4050c6:	fa21 f102 	lsr.w	r1, r1, r2
  4050ca:	4414      	add	r4, r2
  4050cc:	e6c1      	b.n	404e52 <__adddf3+0xe6>
  4050ce:	bf00      	nop

004050d0 <__aeabi_dmul>:
  4050d0:	b570      	push	{r4, r5, r6, lr}
  4050d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4050d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4050da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4050de:	bf1d      	ittte	ne
  4050e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4050e4:	ea94 0f0c 	teqne	r4, ip
  4050e8:	ea95 0f0c 	teqne	r5, ip
  4050ec:	f000 f8de 	bleq	4052ac <__aeabi_dmul+0x1dc>
  4050f0:	442c      	add	r4, r5
  4050f2:	ea81 0603 	eor.w	r6, r1, r3
  4050f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4050fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4050fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405102:	bf18      	it	ne
  405104:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405108:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40510c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405110:	d038      	beq.n	405184 <__aeabi_dmul+0xb4>
  405112:	fba0 ce02 	umull	ip, lr, r0, r2
  405116:	f04f 0500 	mov.w	r5, #0
  40511a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40511e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405122:	fbe0 e503 	umlal	lr, r5, r0, r3
  405126:	f04f 0600 	mov.w	r6, #0
  40512a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40512e:	f09c 0f00 	teq	ip, #0
  405132:	bf18      	it	ne
  405134:	f04e 0e01 	orrne.w	lr, lr, #1
  405138:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40513c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405140:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405144:	d204      	bcs.n	405150 <__aeabi_dmul+0x80>
  405146:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40514a:	416d      	adcs	r5, r5
  40514c:	eb46 0606 	adc.w	r6, r6, r6
  405150:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405154:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405158:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40515c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405160:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405164:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405168:	bf88      	it	hi
  40516a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40516e:	d81e      	bhi.n	4051ae <__aeabi_dmul+0xde>
  405170:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405174:	bf08      	it	eq
  405176:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40517a:	f150 0000 	adcs.w	r0, r0, #0
  40517e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405182:	bd70      	pop	{r4, r5, r6, pc}
  405184:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405188:	ea46 0101 	orr.w	r1, r6, r1
  40518c:	ea40 0002 	orr.w	r0, r0, r2
  405190:	ea81 0103 	eor.w	r1, r1, r3
  405194:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405198:	bfc2      	ittt	gt
  40519a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40519e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4051a2:	bd70      	popgt	{r4, r5, r6, pc}
  4051a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4051a8:	f04f 0e00 	mov.w	lr, #0
  4051ac:	3c01      	subs	r4, #1
  4051ae:	f300 80ab 	bgt.w	405308 <__aeabi_dmul+0x238>
  4051b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4051b6:	bfde      	ittt	le
  4051b8:	2000      	movle	r0, #0
  4051ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4051be:	bd70      	pople	{r4, r5, r6, pc}
  4051c0:	f1c4 0400 	rsb	r4, r4, #0
  4051c4:	3c20      	subs	r4, #32
  4051c6:	da35      	bge.n	405234 <__aeabi_dmul+0x164>
  4051c8:	340c      	adds	r4, #12
  4051ca:	dc1b      	bgt.n	405204 <__aeabi_dmul+0x134>
  4051cc:	f104 0414 	add.w	r4, r4, #20
  4051d0:	f1c4 0520 	rsb	r5, r4, #32
  4051d4:	fa00 f305 	lsl.w	r3, r0, r5
  4051d8:	fa20 f004 	lsr.w	r0, r0, r4
  4051dc:	fa01 f205 	lsl.w	r2, r1, r5
  4051e0:	ea40 0002 	orr.w	r0, r0, r2
  4051e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4051e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4051ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4051f0:	fa21 f604 	lsr.w	r6, r1, r4
  4051f4:	eb42 0106 	adc.w	r1, r2, r6
  4051f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4051fc:	bf08      	it	eq
  4051fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405202:	bd70      	pop	{r4, r5, r6, pc}
  405204:	f1c4 040c 	rsb	r4, r4, #12
  405208:	f1c4 0520 	rsb	r5, r4, #32
  40520c:	fa00 f304 	lsl.w	r3, r0, r4
  405210:	fa20 f005 	lsr.w	r0, r0, r5
  405214:	fa01 f204 	lsl.w	r2, r1, r4
  405218:	ea40 0002 	orr.w	r0, r0, r2
  40521c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405220:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405224:	f141 0100 	adc.w	r1, r1, #0
  405228:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40522c:	bf08      	it	eq
  40522e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405232:	bd70      	pop	{r4, r5, r6, pc}
  405234:	f1c4 0520 	rsb	r5, r4, #32
  405238:	fa00 f205 	lsl.w	r2, r0, r5
  40523c:	ea4e 0e02 	orr.w	lr, lr, r2
  405240:	fa20 f304 	lsr.w	r3, r0, r4
  405244:	fa01 f205 	lsl.w	r2, r1, r5
  405248:	ea43 0302 	orr.w	r3, r3, r2
  40524c:	fa21 f004 	lsr.w	r0, r1, r4
  405250:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405254:	fa21 f204 	lsr.w	r2, r1, r4
  405258:	ea20 0002 	bic.w	r0, r0, r2
  40525c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405260:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405264:	bf08      	it	eq
  405266:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40526a:	bd70      	pop	{r4, r5, r6, pc}
  40526c:	f094 0f00 	teq	r4, #0
  405270:	d10f      	bne.n	405292 <__aeabi_dmul+0x1c2>
  405272:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405276:	0040      	lsls	r0, r0, #1
  405278:	eb41 0101 	adc.w	r1, r1, r1
  40527c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405280:	bf08      	it	eq
  405282:	3c01      	subeq	r4, #1
  405284:	d0f7      	beq.n	405276 <__aeabi_dmul+0x1a6>
  405286:	ea41 0106 	orr.w	r1, r1, r6
  40528a:	f095 0f00 	teq	r5, #0
  40528e:	bf18      	it	ne
  405290:	4770      	bxne	lr
  405292:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405296:	0052      	lsls	r2, r2, #1
  405298:	eb43 0303 	adc.w	r3, r3, r3
  40529c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4052a0:	bf08      	it	eq
  4052a2:	3d01      	subeq	r5, #1
  4052a4:	d0f7      	beq.n	405296 <__aeabi_dmul+0x1c6>
  4052a6:	ea43 0306 	orr.w	r3, r3, r6
  4052aa:	4770      	bx	lr
  4052ac:	ea94 0f0c 	teq	r4, ip
  4052b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4052b4:	bf18      	it	ne
  4052b6:	ea95 0f0c 	teqne	r5, ip
  4052ba:	d00c      	beq.n	4052d6 <__aeabi_dmul+0x206>
  4052bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4052c0:	bf18      	it	ne
  4052c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4052c6:	d1d1      	bne.n	40526c <__aeabi_dmul+0x19c>
  4052c8:	ea81 0103 	eor.w	r1, r1, r3
  4052cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4052d0:	f04f 0000 	mov.w	r0, #0
  4052d4:	bd70      	pop	{r4, r5, r6, pc}
  4052d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4052da:	bf06      	itte	eq
  4052dc:	4610      	moveq	r0, r2
  4052de:	4619      	moveq	r1, r3
  4052e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4052e4:	d019      	beq.n	40531a <__aeabi_dmul+0x24a>
  4052e6:	ea94 0f0c 	teq	r4, ip
  4052ea:	d102      	bne.n	4052f2 <__aeabi_dmul+0x222>
  4052ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4052f0:	d113      	bne.n	40531a <__aeabi_dmul+0x24a>
  4052f2:	ea95 0f0c 	teq	r5, ip
  4052f6:	d105      	bne.n	405304 <__aeabi_dmul+0x234>
  4052f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4052fc:	bf1c      	itt	ne
  4052fe:	4610      	movne	r0, r2
  405300:	4619      	movne	r1, r3
  405302:	d10a      	bne.n	40531a <__aeabi_dmul+0x24a>
  405304:	ea81 0103 	eor.w	r1, r1, r3
  405308:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40530c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405310:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405314:	f04f 0000 	mov.w	r0, #0
  405318:	bd70      	pop	{r4, r5, r6, pc}
  40531a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40531e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405322:	bd70      	pop	{r4, r5, r6, pc}

00405324 <__aeabi_ddiv>:
  405324:	b570      	push	{r4, r5, r6, lr}
  405326:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40532a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40532e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405332:	bf1d      	ittte	ne
  405334:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405338:	ea94 0f0c 	teqne	r4, ip
  40533c:	ea95 0f0c 	teqne	r5, ip
  405340:	f000 f8a7 	bleq	405492 <__aeabi_ddiv+0x16e>
  405344:	eba4 0405 	sub.w	r4, r4, r5
  405348:	ea81 0e03 	eor.w	lr, r1, r3
  40534c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405350:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405354:	f000 8088 	beq.w	405468 <__aeabi_ddiv+0x144>
  405358:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40535c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405360:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405364:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405368:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40536c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405370:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405374:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405378:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40537c:	429d      	cmp	r5, r3
  40537e:	bf08      	it	eq
  405380:	4296      	cmpeq	r6, r2
  405382:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405386:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40538a:	d202      	bcs.n	405392 <__aeabi_ddiv+0x6e>
  40538c:	085b      	lsrs	r3, r3, #1
  40538e:	ea4f 0232 	mov.w	r2, r2, rrx
  405392:	1ab6      	subs	r6, r6, r2
  405394:	eb65 0503 	sbc.w	r5, r5, r3
  405398:	085b      	lsrs	r3, r3, #1
  40539a:	ea4f 0232 	mov.w	r2, r2, rrx
  40539e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4053a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4053a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4053aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4053ae:	bf22      	ittt	cs
  4053b0:	1ab6      	subcs	r6, r6, r2
  4053b2:	4675      	movcs	r5, lr
  4053b4:	ea40 000c 	orrcs.w	r0, r0, ip
  4053b8:	085b      	lsrs	r3, r3, #1
  4053ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4053be:	ebb6 0e02 	subs.w	lr, r6, r2
  4053c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4053c6:	bf22      	ittt	cs
  4053c8:	1ab6      	subcs	r6, r6, r2
  4053ca:	4675      	movcs	r5, lr
  4053cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4053d0:	085b      	lsrs	r3, r3, #1
  4053d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4053d6:	ebb6 0e02 	subs.w	lr, r6, r2
  4053da:	eb75 0e03 	sbcs.w	lr, r5, r3
  4053de:	bf22      	ittt	cs
  4053e0:	1ab6      	subcs	r6, r6, r2
  4053e2:	4675      	movcs	r5, lr
  4053e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4053e8:	085b      	lsrs	r3, r3, #1
  4053ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4053ee:	ebb6 0e02 	subs.w	lr, r6, r2
  4053f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4053f6:	bf22      	ittt	cs
  4053f8:	1ab6      	subcs	r6, r6, r2
  4053fa:	4675      	movcs	r5, lr
  4053fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405400:	ea55 0e06 	orrs.w	lr, r5, r6
  405404:	d018      	beq.n	405438 <__aeabi_ddiv+0x114>
  405406:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40540a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40540e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405412:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405416:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40541a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40541e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405422:	d1c0      	bne.n	4053a6 <__aeabi_ddiv+0x82>
  405424:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405428:	d10b      	bne.n	405442 <__aeabi_ddiv+0x11e>
  40542a:	ea41 0100 	orr.w	r1, r1, r0
  40542e:	f04f 0000 	mov.w	r0, #0
  405432:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405436:	e7b6      	b.n	4053a6 <__aeabi_ddiv+0x82>
  405438:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40543c:	bf04      	itt	eq
  40543e:	4301      	orreq	r1, r0
  405440:	2000      	moveq	r0, #0
  405442:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405446:	bf88      	it	hi
  405448:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40544c:	f63f aeaf 	bhi.w	4051ae <__aeabi_dmul+0xde>
  405450:	ebb5 0c03 	subs.w	ip, r5, r3
  405454:	bf04      	itt	eq
  405456:	ebb6 0c02 	subseq.w	ip, r6, r2
  40545a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40545e:	f150 0000 	adcs.w	r0, r0, #0
  405462:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405466:	bd70      	pop	{r4, r5, r6, pc}
  405468:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40546c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405470:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405474:	bfc2      	ittt	gt
  405476:	ebd4 050c 	rsbsgt	r5, r4, ip
  40547a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40547e:	bd70      	popgt	{r4, r5, r6, pc}
  405480:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405484:	f04f 0e00 	mov.w	lr, #0
  405488:	3c01      	subs	r4, #1
  40548a:	e690      	b.n	4051ae <__aeabi_dmul+0xde>
  40548c:	ea45 0e06 	orr.w	lr, r5, r6
  405490:	e68d      	b.n	4051ae <__aeabi_dmul+0xde>
  405492:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405496:	ea94 0f0c 	teq	r4, ip
  40549a:	bf08      	it	eq
  40549c:	ea95 0f0c 	teqeq	r5, ip
  4054a0:	f43f af3b 	beq.w	40531a <__aeabi_dmul+0x24a>
  4054a4:	ea94 0f0c 	teq	r4, ip
  4054a8:	d10a      	bne.n	4054c0 <__aeabi_ddiv+0x19c>
  4054aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4054ae:	f47f af34 	bne.w	40531a <__aeabi_dmul+0x24a>
  4054b2:	ea95 0f0c 	teq	r5, ip
  4054b6:	f47f af25 	bne.w	405304 <__aeabi_dmul+0x234>
  4054ba:	4610      	mov	r0, r2
  4054bc:	4619      	mov	r1, r3
  4054be:	e72c      	b.n	40531a <__aeabi_dmul+0x24a>
  4054c0:	ea95 0f0c 	teq	r5, ip
  4054c4:	d106      	bne.n	4054d4 <__aeabi_ddiv+0x1b0>
  4054c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4054ca:	f43f aefd 	beq.w	4052c8 <__aeabi_dmul+0x1f8>
  4054ce:	4610      	mov	r0, r2
  4054d0:	4619      	mov	r1, r3
  4054d2:	e722      	b.n	40531a <__aeabi_dmul+0x24a>
  4054d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4054d8:	bf18      	it	ne
  4054da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4054de:	f47f aec5 	bne.w	40526c <__aeabi_dmul+0x19c>
  4054e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4054e6:	f47f af0d 	bne.w	405304 <__aeabi_dmul+0x234>
  4054ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4054ee:	f47f aeeb 	bne.w	4052c8 <__aeabi_dmul+0x1f8>
  4054f2:	e712      	b.n	40531a <__aeabi_dmul+0x24a>

004054f4 <__gedf2>:
  4054f4:	f04f 3cff 	mov.w	ip, #4294967295
  4054f8:	e006      	b.n	405508 <__cmpdf2+0x4>
  4054fa:	bf00      	nop

004054fc <__ledf2>:
  4054fc:	f04f 0c01 	mov.w	ip, #1
  405500:	e002      	b.n	405508 <__cmpdf2+0x4>
  405502:	bf00      	nop

00405504 <__cmpdf2>:
  405504:	f04f 0c01 	mov.w	ip, #1
  405508:	f84d cd04 	str.w	ip, [sp, #-4]!
  40550c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405510:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405514:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405518:	bf18      	it	ne
  40551a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40551e:	d01b      	beq.n	405558 <__cmpdf2+0x54>
  405520:	b001      	add	sp, #4
  405522:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405526:	bf0c      	ite	eq
  405528:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40552c:	ea91 0f03 	teqne	r1, r3
  405530:	bf02      	ittt	eq
  405532:	ea90 0f02 	teqeq	r0, r2
  405536:	2000      	moveq	r0, #0
  405538:	4770      	bxeq	lr
  40553a:	f110 0f00 	cmn.w	r0, #0
  40553e:	ea91 0f03 	teq	r1, r3
  405542:	bf58      	it	pl
  405544:	4299      	cmppl	r1, r3
  405546:	bf08      	it	eq
  405548:	4290      	cmpeq	r0, r2
  40554a:	bf2c      	ite	cs
  40554c:	17d8      	asrcs	r0, r3, #31
  40554e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  405552:	f040 0001 	orr.w	r0, r0, #1
  405556:	4770      	bx	lr
  405558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40555c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405560:	d102      	bne.n	405568 <__cmpdf2+0x64>
  405562:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405566:	d107      	bne.n	405578 <__cmpdf2+0x74>
  405568:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40556c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405570:	d1d6      	bne.n	405520 <__cmpdf2+0x1c>
  405572:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405576:	d0d3      	beq.n	405520 <__cmpdf2+0x1c>
  405578:	f85d 0b04 	ldr.w	r0, [sp], #4
  40557c:	4770      	bx	lr
  40557e:	bf00      	nop

00405580 <__aeabi_cdrcmple>:
  405580:	4684      	mov	ip, r0
  405582:	4610      	mov	r0, r2
  405584:	4662      	mov	r2, ip
  405586:	468c      	mov	ip, r1
  405588:	4619      	mov	r1, r3
  40558a:	4663      	mov	r3, ip
  40558c:	e000      	b.n	405590 <__aeabi_cdcmpeq>
  40558e:	bf00      	nop

00405590 <__aeabi_cdcmpeq>:
  405590:	b501      	push	{r0, lr}
  405592:	f7ff ffb7 	bl	405504 <__cmpdf2>
  405596:	2800      	cmp	r0, #0
  405598:	bf48      	it	mi
  40559a:	f110 0f00 	cmnmi.w	r0, #0
  40559e:	bd01      	pop	{r0, pc}

004055a0 <__aeabi_dcmpeq>:
  4055a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055a4:	f7ff fff4 	bl	405590 <__aeabi_cdcmpeq>
  4055a8:	bf0c      	ite	eq
  4055aa:	2001      	moveq	r0, #1
  4055ac:	2000      	movne	r0, #0
  4055ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4055b2:	bf00      	nop

004055b4 <__aeabi_dcmplt>:
  4055b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055b8:	f7ff ffea 	bl	405590 <__aeabi_cdcmpeq>
  4055bc:	bf34      	ite	cc
  4055be:	2001      	movcc	r0, #1
  4055c0:	2000      	movcs	r0, #0
  4055c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4055c6:	bf00      	nop

004055c8 <__aeabi_dcmple>:
  4055c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055cc:	f7ff ffe0 	bl	405590 <__aeabi_cdcmpeq>
  4055d0:	bf94      	ite	ls
  4055d2:	2001      	movls	r0, #1
  4055d4:	2000      	movhi	r0, #0
  4055d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4055da:	bf00      	nop

004055dc <__aeabi_dcmpge>:
  4055dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055e0:	f7ff ffce 	bl	405580 <__aeabi_cdrcmple>
  4055e4:	bf94      	ite	ls
  4055e6:	2001      	movls	r0, #1
  4055e8:	2000      	movhi	r0, #0
  4055ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4055ee:	bf00      	nop

004055f0 <__aeabi_dcmpgt>:
  4055f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055f4:	f7ff ffc4 	bl	405580 <__aeabi_cdrcmple>
  4055f8:	bf34      	ite	cc
  4055fa:	2001      	movcc	r0, #1
  4055fc:	2000      	movcs	r0, #0
  4055fe:	f85d fb08 	ldr.w	pc, [sp], #8
  405602:	bf00      	nop

00405604 <__aeabi_dcmpun>:
  405604:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40560c:	d102      	bne.n	405614 <__aeabi_dcmpun+0x10>
  40560e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405612:	d10a      	bne.n	40562a <__aeabi_dcmpun+0x26>
  405614:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405618:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40561c:	d102      	bne.n	405624 <__aeabi_dcmpun+0x20>
  40561e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405622:	d102      	bne.n	40562a <__aeabi_dcmpun+0x26>
  405624:	f04f 0000 	mov.w	r0, #0
  405628:	4770      	bx	lr
  40562a:	f04f 0001 	mov.w	r0, #1
  40562e:	4770      	bx	lr

00405630 <__aeabi_d2f>:
  405630:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405638:	bf24      	itt	cs
  40563a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40563e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  405642:	d90d      	bls.n	405660 <__aeabi_d2f+0x30>
  405644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40564c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  405650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405658:	bf08      	it	eq
  40565a:	f020 0001 	biceq.w	r0, r0, #1
  40565e:	4770      	bx	lr
  405660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405664:	d121      	bne.n	4056aa <__aeabi_d2f+0x7a>
  405666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40566a:	bfbc      	itt	lt
  40566c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  405670:	4770      	bxlt	lr
  405672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405676:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40567a:	f1c2 0218 	rsb	r2, r2, #24
  40567e:	f1c2 0c20 	rsb	ip, r2, #32
  405682:	fa10 f30c 	lsls.w	r3, r0, ip
  405686:	fa20 f002 	lsr.w	r0, r0, r2
  40568a:	bf18      	it	ne
  40568c:	f040 0001 	orrne.w	r0, r0, #1
  405690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405698:	fa03 fc0c 	lsl.w	ip, r3, ip
  40569c:	ea40 000c 	orr.w	r0, r0, ip
  4056a0:	fa23 f302 	lsr.w	r3, r3, r2
  4056a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4056a8:	e7cc      	b.n	405644 <__aeabi_d2f+0x14>
  4056aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4056ae:	d107      	bne.n	4056c0 <__aeabi_d2f+0x90>
  4056b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4056b4:	bf1e      	ittt	ne
  4056b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4056ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4056be:	4770      	bxne	lr
  4056c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4056c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4056c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4056cc:	4770      	bx	lr
  4056ce:	bf00      	nop

004056d0 <__aeabi_frsub>:
  4056d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4056d4:	e002      	b.n	4056dc <__addsf3>
  4056d6:	bf00      	nop

004056d8 <__aeabi_fsub>:
  4056d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004056dc <__addsf3>:
  4056dc:	0042      	lsls	r2, r0, #1
  4056de:	bf1f      	itttt	ne
  4056e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4056e4:	ea92 0f03 	teqne	r2, r3
  4056e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4056ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4056f0:	d06a      	beq.n	4057c8 <__addsf3+0xec>
  4056f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4056f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4056fa:	bfc1      	itttt	gt
  4056fc:	18d2      	addgt	r2, r2, r3
  4056fe:	4041      	eorgt	r1, r0
  405700:	4048      	eorgt	r0, r1
  405702:	4041      	eorgt	r1, r0
  405704:	bfb8      	it	lt
  405706:	425b      	neglt	r3, r3
  405708:	2b19      	cmp	r3, #25
  40570a:	bf88      	it	hi
  40570c:	4770      	bxhi	lr
  40570e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405712:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405716:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40571a:	bf18      	it	ne
  40571c:	4240      	negne	r0, r0
  40571e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405722:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405726:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40572a:	bf18      	it	ne
  40572c:	4249      	negne	r1, r1
  40572e:	ea92 0f03 	teq	r2, r3
  405732:	d03f      	beq.n	4057b4 <__addsf3+0xd8>
  405734:	f1a2 0201 	sub.w	r2, r2, #1
  405738:	fa41 fc03 	asr.w	ip, r1, r3
  40573c:	eb10 000c 	adds.w	r0, r0, ip
  405740:	f1c3 0320 	rsb	r3, r3, #32
  405744:	fa01 f103 	lsl.w	r1, r1, r3
  405748:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40574c:	d502      	bpl.n	405754 <__addsf3+0x78>
  40574e:	4249      	negs	r1, r1
  405750:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405754:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405758:	d313      	bcc.n	405782 <__addsf3+0xa6>
  40575a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40575e:	d306      	bcc.n	40576e <__addsf3+0x92>
  405760:	0840      	lsrs	r0, r0, #1
  405762:	ea4f 0131 	mov.w	r1, r1, rrx
  405766:	f102 0201 	add.w	r2, r2, #1
  40576a:	2afe      	cmp	r2, #254	; 0xfe
  40576c:	d251      	bcs.n	405812 <__addsf3+0x136>
  40576e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  405772:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405776:	bf08      	it	eq
  405778:	f020 0001 	biceq.w	r0, r0, #1
  40577c:	ea40 0003 	orr.w	r0, r0, r3
  405780:	4770      	bx	lr
  405782:	0049      	lsls	r1, r1, #1
  405784:	eb40 0000 	adc.w	r0, r0, r0
  405788:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40578c:	f1a2 0201 	sub.w	r2, r2, #1
  405790:	d1ed      	bne.n	40576e <__addsf3+0x92>
  405792:	fab0 fc80 	clz	ip, r0
  405796:	f1ac 0c08 	sub.w	ip, ip, #8
  40579a:	ebb2 020c 	subs.w	r2, r2, ip
  40579e:	fa00 f00c 	lsl.w	r0, r0, ip
  4057a2:	bfaa      	itet	ge
  4057a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4057a8:	4252      	neglt	r2, r2
  4057aa:	4318      	orrge	r0, r3
  4057ac:	bfbc      	itt	lt
  4057ae:	40d0      	lsrlt	r0, r2
  4057b0:	4318      	orrlt	r0, r3
  4057b2:	4770      	bx	lr
  4057b4:	f092 0f00 	teq	r2, #0
  4057b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4057bc:	bf06      	itte	eq
  4057be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4057c2:	3201      	addeq	r2, #1
  4057c4:	3b01      	subne	r3, #1
  4057c6:	e7b5      	b.n	405734 <__addsf3+0x58>
  4057c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4057cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4057d0:	bf18      	it	ne
  4057d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4057d6:	d021      	beq.n	40581c <__addsf3+0x140>
  4057d8:	ea92 0f03 	teq	r2, r3
  4057dc:	d004      	beq.n	4057e8 <__addsf3+0x10c>
  4057de:	f092 0f00 	teq	r2, #0
  4057e2:	bf08      	it	eq
  4057e4:	4608      	moveq	r0, r1
  4057e6:	4770      	bx	lr
  4057e8:	ea90 0f01 	teq	r0, r1
  4057ec:	bf1c      	itt	ne
  4057ee:	2000      	movne	r0, #0
  4057f0:	4770      	bxne	lr
  4057f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4057f6:	d104      	bne.n	405802 <__addsf3+0x126>
  4057f8:	0040      	lsls	r0, r0, #1
  4057fa:	bf28      	it	cs
  4057fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  405800:	4770      	bx	lr
  405802:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  405806:	bf3c      	itt	cc
  405808:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40580c:	4770      	bxcc	lr
  40580e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405812:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  405816:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40581a:	4770      	bx	lr
  40581c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  405820:	bf16      	itet	ne
  405822:	4608      	movne	r0, r1
  405824:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405828:	4601      	movne	r1, r0
  40582a:	0242      	lsls	r2, r0, #9
  40582c:	bf06      	itte	eq
  40582e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  405832:	ea90 0f01 	teqeq	r0, r1
  405836:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40583a:	4770      	bx	lr

0040583c <__aeabi_ui2f>:
  40583c:	f04f 0300 	mov.w	r3, #0
  405840:	e004      	b.n	40584c <__aeabi_i2f+0x8>
  405842:	bf00      	nop

00405844 <__aeabi_i2f>:
  405844:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405848:	bf48      	it	mi
  40584a:	4240      	negmi	r0, r0
  40584c:	ea5f 0c00 	movs.w	ip, r0
  405850:	bf08      	it	eq
  405852:	4770      	bxeq	lr
  405854:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405858:	4601      	mov	r1, r0
  40585a:	f04f 0000 	mov.w	r0, #0
  40585e:	e01c      	b.n	40589a <__aeabi_l2f+0x2a>

00405860 <__aeabi_ul2f>:
  405860:	ea50 0201 	orrs.w	r2, r0, r1
  405864:	bf08      	it	eq
  405866:	4770      	bxeq	lr
  405868:	f04f 0300 	mov.w	r3, #0
  40586c:	e00a      	b.n	405884 <__aeabi_l2f+0x14>
  40586e:	bf00      	nop

00405870 <__aeabi_l2f>:
  405870:	ea50 0201 	orrs.w	r2, r0, r1
  405874:	bf08      	it	eq
  405876:	4770      	bxeq	lr
  405878:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40587c:	d502      	bpl.n	405884 <__aeabi_l2f+0x14>
  40587e:	4240      	negs	r0, r0
  405880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405884:	ea5f 0c01 	movs.w	ip, r1
  405888:	bf02      	ittt	eq
  40588a:	4684      	moveq	ip, r0
  40588c:	4601      	moveq	r1, r0
  40588e:	2000      	moveq	r0, #0
  405890:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405894:	bf08      	it	eq
  405896:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40589a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40589e:	fabc f28c 	clz	r2, ip
  4058a2:	3a08      	subs	r2, #8
  4058a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4058a8:	db10      	blt.n	4058cc <__aeabi_l2f+0x5c>
  4058aa:	fa01 fc02 	lsl.w	ip, r1, r2
  4058ae:	4463      	add	r3, ip
  4058b0:	fa00 fc02 	lsl.w	ip, r0, r2
  4058b4:	f1c2 0220 	rsb	r2, r2, #32
  4058b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4058bc:	fa20 f202 	lsr.w	r2, r0, r2
  4058c0:	eb43 0002 	adc.w	r0, r3, r2
  4058c4:	bf08      	it	eq
  4058c6:	f020 0001 	biceq.w	r0, r0, #1
  4058ca:	4770      	bx	lr
  4058cc:	f102 0220 	add.w	r2, r2, #32
  4058d0:	fa01 fc02 	lsl.w	ip, r1, r2
  4058d4:	f1c2 0220 	rsb	r2, r2, #32
  4058d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4058dc:	fa21 f202 	lsr.w	r2, r1, r2
  4058e0:	eb43 0002 	adc.w	r0, r3, r2
  4058e4:	bf08      	it	eq
  4058e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4058ea:	4770      	bx	lr

004058ec <__aeabi_fmul>:
  4058ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4058f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4058f4:	bf1e      	ittt	ne
  4058f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4058fa:	ea92 0f0c 	teqne	r2, ip
  4058fe:	ea93 0f0c 	teqne	r3, ip
  405902:	d06f      	beq.n	4059e4 <__aeabi_fmul+0xf8>
  405904:	441a      	add	r2, r3
  405906:	ea80 0c01 	eor.w	ip, r0, r1
  40590a:	0240      	lsls	r0, r0, #9
  40590c:	bf18      	it	ne
  40590e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  405912:	d01e      	beq.n	405952 <__aeabi_fmul+0x66>
  405914:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  405918:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40591c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  405920:	fba0 3101 	umull	r3, r1, r0, r1
  405924:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405928:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40592c:	bf3e      	ittt	cc
  40592e:	0049      	lslcc	r1, r1, #1
  405930:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405934:	005b      	lslcc	r3, r3, #1
  405936:	ea40 0001 	orr.w	r0, r0, r1
  40593a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40593e:	2afd      	cmp	r2, #253	; 0xfd
  405940:	d81d      	bhi.n	40597e <__aeabi_fmul+0x92>
  405942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405946:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40594a:	bf08      	it	eq
  40594c:	f020 0001 	biceq.w	r0, r0, #1
  405950:	4770      	bx	lr
  405952:	f090 0f00 	teq	r0, #0
  405956:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40595a:	bf08      	it	eq
  40595c:	0249      	lsleq	r1, r1, #9
  40595e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405962:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405966:	3a7f      	subs	r2, #127	; 0x7f
  405968:	bfc2      	ittt	gt
  40596a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40596e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405972:	4770      	bxgt	lr
  405974:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405978:	f04f 0300 	mov.w	r3, #0
  40597c:	3a01      	subs	r2, #1
  40597e:	dc5d      	bgt.n	405a3c <__aeabi_fmul+0x150>
  405980:	f112 0f19 	cmn.w	r2, #25
  405984:	bfdc      	itt	le
  405986:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40598a:	4770      	bxle	lr
  40598c:	f1c2 0200 	rsb	r2, r2, #0
  405990:	0041      	lsls	r1, r0, #1
  405992:	fa21 f102 	lsr.w	r1, r1, r2
  405996:	f1c2 0220 	rsb	r2, r2, #32
  40599a:	fa00 fc02 	lsl.w	ip, r0, r2
  40599e:	ea5f 0031 	movs.w	r0, r1, rrx
  4059a2:	f140 0000 	adc.w	r0, r0, #0
  4059a6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4059aa:	bf08      	it	eq
  4059ac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4059b0:	4770      	bx	lr
  4059b2:	f092 0f00 	teq	r2, #0
  4059b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4059ba:	bf02      	ittt	eq
  4059bc:	0040      	lsleq	r0, r0, #1
  4059be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4059c2:	3a01      	subeq	r2, #1
  4059c4:	d0f9      	beq.n	4059ba <__aeabi_fmul+0xce>
  4059c6:	ea40 000c 	orr.w	r0, r0, ip
  4059ca:	f093 0f00 	teq	r3, #0
  4059ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4059d2:	bf02      	ittt	eq
  4059d4:	0049      	lsleq	r1, r1, #1
  4059d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4059da:	3b01      	subeq	r3, #1
  4059dc:	d0f9      	beq.n	4059d2 <__aeabi_fmul+0xe6>
  4059de:	ea41 010c 	orr.w	r1, r1, ip
  4059e2:	e78f      	b.n	405904 <__aeabi_fmul+0x18>
  4059e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4059e8:	ea92 0f0c 	teq	r2, ip
  4059ec:	bf18      	it	ne
  4059ee:	ea93 0f0c 	teqne	r3, ip
  4059f2:	d00a      	beq.n	405a0a <__aeabi_fmul+0x11e>
  4059f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4059f8:	bf18      	it	ne
  4059fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4059fe:	d1d8      	bne.n	4059b2 <__aeabi_fmul+0xc6>
  405a00:	ea80 0001 	eor.w	r0, r0, r1
  405a04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405a08:	4770      	bx	lr
  405a0a:	f090 0f00 	teq	r0, #0
  405a0e:	bf17      	itett	ne
  405a10:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405a14:	4608      	moveq	r0, r1
  405a16:	f091 0f00 	teqne	r1, #0
  405a1a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  405a1e:	d014      	beq.n	405a4a <__aeabi_fmul+0x15e>
  405a20:	ea92 0f0c 	teq	r2, ip
  405a24:	d101      	bne.n	405a2a <__aeabi_fmul+0x13e>
  405a26:	0242      	lsls	r2, r0, #9
  405a28:	d10f      	bne.n	405a4a <__aeabi_fmul+0x15e>
  405a2a:	ea93 0f0c 	teq	r3, ip
  405a2e:	d103      	bne.n	405a38 <__aeabi_fmul+0x14c>
  405a30:	024b      	lsls	r3, r1, #9
  405a32:	bf18      	it	ne
  405a34:	4608      	movne	r0, r1
  405a36:	d108      	bne.n	405a4a <__aeabi_fmul+0x15e>
  405a38:	ea80 0001 	eor.w	r0, r0, r1
  405a3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405a48:	4770      	bx	lr
  405a4a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405a4e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  405a52:	4770      	bx	lr

00405a54 <__aeabi_fdiv>:
  405a54:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405a58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405a5c:	bf1e      	ittt	ne
  405a5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405a62:	ea92 0f0c 	teqne	r2, ip
  405a66:	ea93 0f0c 	teqne	r3, ip
  405a6a:	d069      	beq.n	405b40 <__aeabi_fdiv+0xec>
  405a6c:	eba2 0203 	sub.w	r2, r2, r3
  405a70:	ea80 0c01 	eor.w	ip, r0, r1
  405a74:	0249      	lsls	r1, r1, #9
  405a76:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405a7a:	d037      	beq.n	405aec <__aeabi_fdiv+0x98>
  405a7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405a80:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405a84:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405a88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405a8c:	428b      	cmp	r3, r1
  405a8e:	bf38      	it	cc
  405a90:	005b      	lslcc	r3, r3, #1
  405a92:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405a96:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405a9a:	428b      	cmp	r3, r1
  405a9c:	bf24      	itt	cs
  405a9e:	1a5b      	subcs	r3, r3, r1
  405aa0:	ea40 000c 	orrcs.w	r0, r0, ip
  405aa4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405aa8:	bf24      	itt	cs
  405aaa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  405aae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405ab2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405ab6:	bf24      	itt	cs
  405ab8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405abc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405ac0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  405ac4:	bf24      	itt	cs
  405ac6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  405aca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405ace:	011b      	lsls	r3, r3, #4
  405ad0:	bf18      	it	ne
  405ad2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405ad6:	d1e0      	bne.n	405a9a <__aeabi_fdiv+0x46>
  405ad8:	2afd      	cmp	r2, #253	; 0xfd
  405ada:	f63f af50 	bhi.w	40597e <__aeabi_fmul+0x92>
  405ade:	428b      	cmp	r3, r1
  405ae0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405ae4:	bf08      	it	eq
  405ae6:	f020 0001 	biceq.w	r0, r0, #1
  405aea:	4770      	bx	lr
  405aec:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405af0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405af4:	327f      	adds	r2, #127	; 0x7f
  405af6:	bfc2      	ittt	gt
  405af8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405afc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405b00:	4770      	bxgt	lr
  405b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405b06:	f04f 0300 	mov.w	r3, #0
  405b0a:	3a01      	subs	r2, #1
  405b0c:	e737      	b.n	40597e <__aeabi_fmul+0x92>
  405b0e:	f092 0f00 	teq	r2, #0
  405b12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405b16:	bf02      	ittt	eq
  405b18:	0040      	lsleq	r0, r0, #1
  405b1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405b1e:	3a01      	subeq	r2, #1
  405b20:	d0f9      	beq.n	405b16 <__aeabi_fdiv+0xc2>
  405b22:	ea40 000c 	orr.w	r0, r0, ip
  405b26:	f093 0f00 	teq	r3, #0
  405b2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405b2e:	bf02      	ittt	eq
  405b30:	0049      	lsleq	r1, r1, #1
  405b32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405b36:	3b01      	subeq	r3, #1
  405b38:	d0f9      	beq.n	405b2e <__aeabi_fdiv+0xda>
  405b3a:	ea41 010c 	orr.w	r1, r1, ip
  405b3e:	e795      	b.n	405a6c <__aeabi_fdiv+0x18>
  405b40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405b44:	ea92 0f0c 	teq	r2, ip
  405b48:	d108      	bne.n	405b5c <__aeabi_fdiv+0x108>
  405b4a:	0242      	lsls	r2, r0, #9
  405b4c:	f47f af7d 	bne.w	405a4a <__aeabi_fmul+0x15e>
  405b50:	ea93 0f0c 	teq	r3, ip
  405b54:	f47f af70 	bne.w	405a38 <__aeabi_fmul+0x14c>
  405b58:	4608      	mov	r0, r1
  405b5a:	e776      	b.n	405a4a <__aeabi_fmul+0x15e>
  405b5c:	ea93 0f0c 	teq	r3, ip
  405b60:	d104      	bne.n	405b6c <__aeabi_fdiv+0x118>
  405b62:	024b      	lsls	r3, r1, #9
  405b64:	f43f af4c 	beq.w	405a00 <__aeabi_fmul+0x114>
  405b68:	4608      	mov	r0, r1
  405b6a:	e76e      	b.n	405a4a <__aeabi_fmul+0x15e>
  405b6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405b70:	bf18      	it	ne
  405b72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405b76:	d1ca      	bne.n	405b0e <__aeabi_fdiv+0xba>
  405b78:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405b7c:	f47f af5c 	bne.w	405a38 <__aeabi_fmul+0x14c>
  405b80:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405b84:	f47f af3c 	bne.w	405a00 <__aeabi_fmul+0x114>
  405b88:	e75f      	b.n	405a4a <__aeabi_fmul+0x15e>
  405b8a:	bf00      	nop

00405b8c <__gesf2>:
  405b8c:	f04f 3cff 	mov.w	ip, #4294967295
  405b90:	e006      	b.n	405ba0 <__cmpsf2+0x4>
  405b92:	bf00      	nop

00405b94 <__lesf2>:
  405b94:	f04f 0c01 	mov.w	ip, #1
  405b98:	e002      	b.n	405ba0 <__cmpsf2+0x4>
  405b9a:	bf00      	nop

00405b9c <__cmpsf2>:
  405b9c:	f04f 0c01 	mov.w	ip, #1
  405ba0:	f84d cd04 	str.w	ip, [sp, #-4]!
  405ba4:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405ba8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405bac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405bb0:	bf18      	it	ne
  405bb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405bb6:	d011      	beq.n	405bdc <__cmpsf2+0x40>
  405bb8:	b001      	add	sp, #4
  405bba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  405bbe:	bf18      	it	ne
  405bc0:	ea90 0f01 	teqne	r0, r1
  405bc4:	bf58      	it	pl
  405bc6:	ebb2 0003 	subspl.w	r0, r2, r3
  405bca:	bf88      	it	hi
  405bcc:	17c8      	asrhi	r0, r1, #31
  405bce:	bf38      	it	cc
  405bd0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  405bd4:	bf18      	it	ne
  405bd6:	f040 0001 	orrne.w	r0, r0, #1
  405bda:	4770      	bx	lr
  405bdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405be0:	d102      	bne.n	405be8 <__cmpsf2+0x4c>
  405be2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  405be6:	d105      	bne.n	405bf4 <__cmpsf2+0x58>
  405be8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  405bec:	d1e4      	bne.n	405bb8 <__cmpsf2+0x1c>
  405bee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  405bf2:	d0e1      	beq.n	405bb8 <__cmpsf2+0x1c>
  405bf4:	f85d 0b04 	ldr.w	r0, [sp], #4
  405bf8:	4770      	bx	lr
  405bfa:	bf00      	nop

00405bfc <__aeabi_cfrcmple>:
  405bfc:	4684      	mov	ip, r0
  405bfe:	4608      	mov	r0, r1
  405c00:	4661      	mov	r1, ip
  405c02:	e7ff      	b.n	405c04 <__aeabi_cfcmpeq>

00405c04 <__aeabi_cfcmpeq>:
  405c04:	b50f      	push	{r0, r1, r2, r3, lr}
  405c06:	f7ff ffc9 	bl	405b9c <__cmpsf2>
  405c0a:	2800      	cmp	r0, #0
  405c0c:	bf48      	it	mi
  405c0e:	f110 0f00 	cmnmi.w	r0, #0
  405c12:	bd0f      	pop	{r0, r1, r2, r3, pc}

00405c14 <__aeabi_fcmpeq>:
  405c14:	f84d ed08 	str.w	lr, [sp, #-8]!
  405c18:	f7ff fff4 	bl	405c04 <__aeabi_cfcmpeq>
  405c1c:	bf0c      	ite	eq
  405c1e:	2001      	moveq	r0, #1
  405c20:	2000      	movne	r0, #0
  405c22:	f85d fb08 	ldr.w	pc, [sp], #8
  405c26:	bf00      	nop

00405c28 <__aeabi_fcmplt>:
  405c28:	f84d ed08 	str.w	lr, [sp, #-8]!
  405c2c:	f7ff ffea 	bl	405c04 <__aeabi_cfcmpeq>
  405c30:	bf34      	ite	cc
  405c32:	2001      	movcc	r0, #1
  405c34:	2000      	movcs	r0, #0
  405c36:	f85d fb08 	ldr.w	pc, [sp], #8
  405c3a:	bf00      	nop

00405c3c <__aeabi_fcmple>:
  405c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405c40:	f7ff ffe0 	bl	405c04 <__aeabi_cfcmpeq>
  405c44:	bf94      	ite	ls
  405c46:	2001      	movls	r0, #1
  405c48:	2000      	movhi	r0, #0
  405c4a:	f85d fb08 	ldr.w	pc, [sp], #8
  405c4e:	bf00      	nop

00405c50 <__aeabi_fcmpge>:
  405c50:	f84d ed08 	str.w	lr, [sp, #-8]!
  405c54:	f7ff ffd2 	bl	405bfc <__aeabi_cfrcmple>
  405c58:	bf94      	ite	ls
  405c5a:	2001      	movls	r0, #1
  405c5c:	2000      	movhi	r0, #0
  405c5e:	f85d fb08 	ldr.w	pc, [sp], #8
  405c62:	bf00      	nop

00405c64 <__aeabi_fcmpgt>:
  405c64:	f84d ed08 	str.w	lr, [sp, #-8]!
  405c68:	f7ff ffc8 	bl	405bfc <__aeabi_cfrcmple>
  405c6c:	bf34      	ite	cc
  405c6e:	2001      	movcc	r0, #1
  405c70:	2000      	movcs	r0, #0
  405c72:	f85d fb08 	ldr.w	pc, [sp], #8
  405c76:	bf00      	nop

00405c78 <__aeabi_f2iz>:
  405c78:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405c7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405c80:	d30f      	bcc.n	405ca2 <__aeabi_f2iz+0x2a>
  405c82:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405c86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405c8a:	d90d      	bls.n	405ca8 <__aeabi_f2iz+0x30>
  405c8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405c94:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405c98:	fa23 f002 	lsr.w	r0, r3, r2
  405c9c:	bf18      	it	ne
  405c9e:	4240      	negne	r0, r0
  405ca0:	4770      	bx	lr
  405ca2:	f04f 0000 	mov.w	r0, #0
  405ca6:	4770      	bx	lr
  405ca8:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405cac:	d101      	bne.n	405cb2 <__aeabi_f2iz+0x3a>
  405cae:	0242      	lsls	r2, r0, #9
  405cb0:	d105      	bne.n	405cbe <__aeabi_f2iz+0x46>
  405cb2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  405cb6:	bf08      	it	eq
  405cb8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405cbc:	4770      	bx	lr
  405cbe:	f04f 0000 	mov.w	r0, #0
  405cc2:	4770      	bx	lr

00405cc4 <__errno>:
  405cc4:	4b01      	ldr	r3, [pc, #4]	; (405ccc <__errno+0x8>)
  405cc6:	6818      	ldr	r0, [r3, #0]
  405cc8:	4770      	bx	lr
  405cca:	bf00      	nop
  405ccc:	20400028 	.word	0x20400028

00405cd0 <__libc_init_array>:
  405cd0:	b570      	push	{r4, r5, r6, lr}
  405cd2:	4e0f      	ldr	r6, [pc, #60]	; (405d10 <__libc_init_array+0x40>)
  405cd4:	4d0f      	ldr	r5, [pc, #60]	; (405d14 <__libc_init_array+0x44>)
  405cd6:	1b76      	subs	r6, r6, r5
  405cd8:	10b6      	asrs	r6, r6, #2
  405cda:	bf18      	it	ne
  405cdc:	2400      	movne	r4, #0
  405cde:	d005      	beq.n	405cec <__libc_init_array+0x1c>
  405ce0:	3401      	adds	r4, #1
  405ce2:	f855 3b04 	ldr.w	r3, [r5], #4
  405ce6:	4798      	blx	r3
  405ce8:	42a6      	cmp	r6, r4
  405cea:	d1f9      	bne.n	405ce0 <__libc_init_array+0x10>
  405cec:	4e0a      	ldr	r6, [pc, #40]	; (405d18 <__libc_init_array+0x48>)
  405cee:	4d0b      	ldr	r5, [pc, #44]	; (405d1c <__libc_init_array+0x4c>)
  405cf0:	1b76      	subs	r6, r6, r5
  405cf2:	f005 fcfd 	bl	40b6f0 <_init>
  405cf6:	10b6      	asrs	r6, r6, #2
  405cf8:	bf18      	it	ne
  405cfa:	2400      	movne	r4, #0
  405cfc:	d006      	beq.n	405d0c <__libc_init_array+0x3c>
  405cfe:	3401      	adds	r4, #1
  405d00:	f855 3b04 	ldr.w	r3, [r5], #4
  405d04:	4798      	blx	r3
  405d06:	42a6      	cmp	r6, r4
  405d08:	d1f9      	bne.n	405cfe <__libc_init_array+0x2e>
  405d0a:	bd70      	pop	{r4, r5, r6, pc}
  405d0c:	bd70      	pop	{r4, r5, r6, pc}
  405d0e:	bf00      	nop
  405d10:	0040b6fc 	.word	0x0040b6fc
  405d14:	0040b6fc 	.word	0x0040b6fc
  405d18:	0040b704 	.word	0x0040b704
  405d1c:	0040b6fc 	.word	0x0040b6fc

00405d20 <malloc>:
  405d20:	4b02      	ldr	r3, [pc, #8]	; (405d2c <malloc+0xc>)
  405d22:	4601      	mov	r1, r0
  405d24:	6818      	ldr	r0, [r3, #0]
  405d26:	f000 b80b 	b.w	405d40 <_malloc_r>
  405d2a:	bf00      	nop
  405d2c:	20400028 	.word	0x20400028

00405d30 <free>:
  405d30:	4b02      	ldr	r3, [pc, #8]	; (405d3c <free+0xc>)
  405d32:	4601      	mov	r1, r0
  405d34:	6818      	ldr	r0, [r3, #0]
  405d36:	f003 ba2b 	b.w	409190 <_free_r>
  405d3a:	bf00      	nop
  405d3c:	20400028 	.word	0x20400028

00405d40 <_malloc_r>:
  405d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d44:	f101 060b 	add.w	r6, r1, #11
  405d48:	2e16      	cmp	r6, #22
  405d4a:	b083      	sub	sp, #12
  405d4c:	4605      	mov	r5, r0
  405d4e:	f240 809e 	bls.w	405e8e <_malloc_r+0x14e>
  405d52:	f036 0607 	bics.w	r6, r6, #7
  405d56:	f100 80bd 	bmi.w	405ed4 <_malloc_r+0x194>
  405d5a:	42b1      	cmp	r1, r6
  405d5c:	f200 80ba 	bhi.w	405ed4 <_malloc_r+0x194>
  405d60:	f000 fb86 	bl	406470 <__malloc_lock>
  405d64:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405d68:	f0c0 8293 	bcc.w	406292 <_malloc_r+0x552>
  405d6c:	0a73      	lsrs	r3, r6, #9
  405d6e:	f000 80b8 	beq.w	405ee2 <_malloc_r+0x1a2>
  405d72:	2b04      	cmp	r3, #4
  405d74:	f200 8179 	bhi.w	40606a <_malloc_r+0x32a>
  405d78:	09b3      	lsrs	r3, r6, #6
  405d7a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405d7e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405d82:	00c3      	lsls	r3, r0, #3
  405d84:	4fbf      	ldr	r7, [pc, #764]	; (406084 <_malloc_r+0x344>)
  405d86:	443b      	add	r3, r7
  405d88:	f1a3 0108 	sub.w	r1, r3, #8
  405d8c:	685c      	ldr	r4, [r3, #4]
  405d8e:	42a1      	cmp	r1, r4
  405d90:	d106      	bne.n	405da0 <_malloc_r+0x60>
  405d92:	e00c      	b.n	405dae <_malloc_r+0x6e>
  405d94:	2a00      	cmp	r2, #0
  405d96:	f280 80aa 	bge.w	405eee <_malloc_r+0x1ae>
  405d9a:	68e4      	ldr	r4, [r4, #12]
  405d9c:	42a1      	cmp	r1, r4
  405d9e:	d006      	beq.n	405dae <_malloc_r+0x6e>
  405da0:	6863      	ldr	r3, [r4, #4]
  405da2:	f023 0303 	bic.w	r3, r3, #3
  405da6:	1b9a      	subs	r2, r3, r6
  405da8:	2a0f      	cmp	r2, #15
  405daa:	ddf3      	ble.n	405d94 <_malloc_r+0x54>
  405dac:	4670      	mov	r0, lr
  405dae:	693c      	ldr	r4, [r7, #16]
  405db0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406098 <_malloc_r+0x358>
  405db4:	4574      	cmp	r4, lr
  405db6:	f000 81ab 	beq.w	406110 <_malloc_r+0x3d0>
  405dba:	6863      	ldr	r3, [r4, #4]
  405dbc:	f023 0303 	bic.w	r3, r3, #3
  405dc0:	1b9a      	subs	r2, r3, r6
  405dc2:	2a0f      	cmp	r2, #15
  405dc4:	f300 8190 	bgt.w	4060e8 <_malloc_r+0x3a8>
  405dc8:	2a00      	cmp	r2, #0
  405dca:	f8c7 e014 	str.w	lr, [r7, #20]
  405dce:	f8c7 e010 	str.w	lr, [r7, #16]
  405dd2:	f280 809d 	bge.w	405f10 <_malloc_r+0x1d0>
  405dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405dda:	f080 8161 	bcs.w	4060a0 <_malloc_r+0x360>
  405dde:	08db      	lsrs	r3, r3, #3
  405de0:	f103 0c01 	add.w	ip, r3, #1
  405de4:	1099      	asrs	r1, r3, #2
  405de6:	687a      	ldr	r2, [r7, #4]
  405de8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405dec:	f8c4 8008 	str.w	r8, [r4, #8]
  405df0:	2301      	movs	r3, #1
  405df2:	408b      	lsls	r3, r1
  405df4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405df8:	4313      	orrs	r3, r2
  405dfa:	3908      	subs	r1, #8
  405dfc:	60e1      	str	r1, [r4, #12]
  405dfe:	607b      	str	r3, [r7, #4]
  405e00:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405e04:	f8c8 400c 	str.w	r4, [r8, #12]
  405e08:	1082      	asrs	r2, r0, #2
  405e0a:	2401      	movs	r4, #1
  405e0c:	4094      	lsls	r4, r2
  405e0e:	429c      	cmp	r4, r3
  405e10:	f200 808b 	bhi.w	405f2a <_malloc_r+0x1ea>
  405e14:	421c      	tst	r4, r3
  405e16:	d106      	bne.n	405e26 <_malloc_r+0xe6>
  405e18:	f020 0003 	bic.w	r0, r0, #3
  405e1c:	0064      	lsls	r4, r4, #1
  405e1e:	421c      	tst	r4, r3
  405e20:	f100 0004 	add.w	r0, r0, #4
  405e24:	d0fa      	beq.n	405e1c <_malloc_r+0xdc>
  405e26:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405e2a:	46cc      	mov	ip, r9
  405e2c:	4680      	mov	r8, r0
  405e2e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405e32:	459c      	cmp	ip, r3
  405e34:	d107      	bne.n	405e46 <_malloc_r+0x106>
  405e36:	e16d      	b.n	406114 <_malloc_r+0x3d4>
  405e38:	2a00      	cmp	r2, #0
  405e3a:	f280 817b 	bge.w	406134 <_malloc_r+0x3f4>
  405e3e:	68db      	ldr	r3, [r3, #12]
  405e40:	459c      	cmp	ip, r3
  405e42:	f000 8167 	beq.w	406114 <_malloc_r+0x3d4>
  405e46:	6859      	ldr	r1, [r3, #4]
  405e48:	f021 0103 	bic.w	r1, r1, #3
  405e4c:	1b8a      	subs	r2, r1, r6
  405e4e:	2a0f      	cmp	r2, #15
  405e50:	ddf2      	ble.n	405e38 <_malloc_r+0xf8>
  405e52:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405e56:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405e5a:	9300      	str	r3, [sp, #0]
  405e5c:	199c      	adds	r4, r3, r6
  405e5e:	4628      	mov	r0, r5
  405e60:	f046 0601 	orr.w	r6, r6, #1
  405e64:	f042 0501 	orr.w	r5, r2, #1
  405e68:	605e      	str	r6, [r3, #4]
  405e6a:	f8c8 c00c 	str.w	ip, [r8, #12]
  405e6e:	f8cc 8008 	str.w	r8, [ip, #8]
  405e72:	617c      	str	r4, [r7, #20]
  405e74:	613c      	str	r4, [r7, #16]
  405e76:	f8c4 e00c 	str.w	lr, [r4, #12]
  405e7a:	f8c4 e008 	str.w	lr, [r4, #8]
  405e7e:	6065      	str	r5, [r4, #4]
  405e80:	505a      	str	r2, [r3, r1]
  405e82:	f000 fafb 	bl	40647c <__malloc_unlock>
  405e86:	9b00      	ldr	r3, [sp, #0]
  405e88:	f103 0408 	add.w	r4, r3, #8
  405e8c:	e01e      	b.n	405ecc <_malloc_r+0x18c>
  405e8e:	2910      	cmp	r1, #16
  405e90:	d820      	bhi.n	405ed4 <_malloc_r+0x194>
  405e92:	f000 faed 	bl	406470 <__malloc_lock>
  405e96:	2610      	movs	r6, #16
  405e98:	2318      	movs	r3, #24
  405e9a:	2002      	movs	r0, #2
  405e9c:	4f79      	ldr	r7, [pc, #484]	; (406084 <_malloc_r+0x344>)
  405e9e:	443b      	add	r3, r7
  405ea0:	f1a3 0208 	sub.w	r2, r3, #8
  405ea4:	685c      	ldr	r4, [r3, #4]
  405ea6:	4294      	cmp	r4, r2
  405ea8:	f000 813d 	beq.w	406126 <_malloc_r+0x3e6>
  405eac:	6863      	ldr	r3, [r4, #4]
  405eae:	68e1      	ldr	r1, [r4, #12]
  405eb0:	68a6      	ldr	r6, [r4, #8]
  405eb2:	f023 0303 	bic.w	r3, r3, #3
  405eb6:	4423      	add	r3, r4
  405eb8:	4628      	mov	r0, r5
  405eba:	685a      	ldr	r2, [r3, #4]
  405ebc:	60f1      	str	r1, [r6, #12]
  405ebe:	f042 0201 	orr.w	r2, r2, #1
  405ec2:	608e      	str	r6, [r1, #8]
  405ec4:	605a      	str	r2, [r3, #4]
  405ec6:	f000 fad9 	bl	40647c <__malloc_unlock>
  405eca:	3408      	adds	r4, #8
  405ecc:	4620      	mov	r0, r4
  405ece:	b003      	add	sp, #12
  405ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ed4:	2400      	movs	r4, #0
  405ed6:	230c      	movs	r3, #12
  405ed8:	4620      	mov	r0, r4
  405eda:	602b      	str	r3, [r5, #0]
  405edc:	b003      	add	sp, #12
  405ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ee2:	2040      	movs	r0, #64	; 0x40
  405ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
  405ee8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405eec:	e74a      	b.n	405d84 <_malloc_r+0x44>
  405eee:	4423      	add	r3, r4
  405ef0:	68e1      	ldr	r1, [r4, #12]
  405ef2:	685a      	ldr	r2, [r3, #4]
  405ef4:	68a6      	ldr	r6, [r4, #8]
  405ef6:	f042 0201 	orr.w	r2, r2, #1
  405efa:	60f1      	str	r1, [r6, #12]
  405efc:	4628      	mov	r0, r5
  405efe:	608e      	str	r6, [r1, #8]
  405f00:	605a      	str	r2, [r3, #4]
  405f02:	f000 fabb 	bl	40647c <__malloc_unlock>
  405f06:	3408      	adds	r4, #8
  405f08:	4620      	mov	r0, r4
  405f0a:	b003      	add	sp, #12
  405f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f10:	4423      	add	r3, r4
  405f12:	4628      	mov	r0, r5
  405f14:	685a      	ldr	r2, [r3, #4]
  405f16:	f042 0201 	orr.w	r2, r2, #1
  405f1a:	605a      	str	r2, [r3, #4]
  405f1c:	f000 faae 	bl	40647c <__malloc_unlock>
  405f20:	3408      	adds	r4, #8
  405f22:	4620      	mov	r0, r4
  405f24:	b003      	add	sp, #12
  405f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f2a:	68bc      	ldr	r4, [r7, #8]
  405f2c:	6863      	ldr	r3, [r4, #4]
  405f2e:	f023 0803 	bic.w	r8, r3, #3
  405f32:	45b0      	cmp	r8, r6
  405f34:	d304      	bcc.n	405f40 <_malloc_r+0x200>
  405f36:	eba8 0306 	sub.w	r3, r8, r6
  405f3a:	2b0f      	cmp	r3, #15
  405f3c:	f300 8085 	bgt.w	40604a <_malloc_r+0x30a>
  405f40:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40609c <_malloc_r+0x35c>
  405f44:	4b50      	ldr	r3, [pc, #320]	; (406088 <_malloc_r+0x348>)
  405f46:	f8d9 2000 	ldr.w	r2, [r9]
  405f4a:	681b      	ldr	r3, [r3, #0]
  405f4c:	3201      	adds	r2, #1
  405f4e:	4433      	add	r3, r6
  405f50:	eb04 0a08 	add.w	sl, r4, r8
  405f54:	f000 8155 	beq.w	406202 <_malloc_r+0x4c2>
  405f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405f5c:	330f      	adds	r3, #15
  405f5e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405f62:	f02b 0b0f 	bic.w	fp, fp, #15
  405f66:	4659      	mov	r1, fp
  405f68:	4628      	mov	r0, r5
  405f6a:	f000 faf7 	bl	40655c <_sbrk_r>
  405f6e:	1c41      	adds	r1, r0, #1
  405f70:	4602      	mov	r2, r0
  405f72:	f000 80fc 	beq.w	40616e <_malloc_r+0x42e>
  405f76:	4582      	cmp	sl, r0
  405f78:	f200 80f7 	bhi.w	40616a <_malloc_r+0x42a>
  405f7c:	4b43      	ldr	r3, [pc, #268]	; (40608c <_malloc_r+0x34c>)
  405f7e:	6819      	ldr	r1, [r3, #0]
  405f80:	4459      	add	r1, fp
  405f82:	6019      	str	r1, [r3, #0]
  405f84:	f000 814d 	beq.w	406222 <_malloc_r+0x4e2>
  405f88:	f8d9 0000 	ldr.w	r0, [r9]
  405f8c:	3001      	adds	r0, #1
  405f8e:	bf1b      	ittet	ne
  405f90:	eba2 0a0a 	subne.w	sl, r2, sl
  405f94:	4451      	addne	r1, sl
  405f96:	f8c9 2000 	streq.w	r2, [r9]
  405f9a:	6019      	strne	r1, [r3, #0]
  405f9c:	f012 0107 	ands.w	r1, r2, #7
  405fa0:	f000 8115 	beq.w	4061ce <_malloc_r+0x48e>
  405fa4:	f1c1 0008 	rsb	r0, r1, #8
  405fa8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405fac:	4402      	add	r2, r0
  405fae:	3108      	adds	r1, #8
  405fb0:	eb02 090b 	add.w	r9, r2, fp
  405fb4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405fb8:	eba1 0909 	sub.w	r9, r1, r9
  405fbc:	4649      	mov	r1, r9
  405fbe:	4628      	mov	r0, r5
  405fc0:	9301      	str	r3, [sp, #4]
  405fc2:	9200      	str	r2, [sp, #0]
  405fc4:	f000 faca 	bl	40655c <_sbrk_r>
  405fc8:	1c43      	adds	r3, r0, #1
  405fca:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405fce:	f000 8143 	beq.w	406258 <_malloc_r+0x518>
  405fd2:	1a80      	subs	r0, r0, r2
  405fd4:	4448      	add	r0, r9
  405fd6:	f040 0001 	orr.w	r0, r0, #1
  405fda:	6819      	ldr	r1, [r3, #0]
  405fdc:	60ba      	str	r2, [r7, #8]
  405fde:	4449      	add	r1, r9
  405fe0:	42bc      	cmp	r4, r7
  405fe2:	6050      	str	r0, [r2, #4]
  405fe4:	6019      	str	r1, [r3, #0]
  405fe6:	d017      	beq.n	406018 <_malloc_r+0x2d8>
  405fe8:	f1b8 0f0f 	cmp.w	r8, #15
  405fec:	f240 80fb 	bls.w	4061e6 <_malloc_r+0x4a6>
  405ff0:	6860      	ldr	r0, [r4, #4]
  405ff2:	f1a8 020c 	sub.w	r2, r8, #12
  405ff6:	f022 0207 	bic.w	r2, r2, #7
  405ffa:	eb04 0e02 	add.w	lr, r4, r2
  405ffe:	f000 0001 	and.w	r0, r0, #1
  406002:	f04f 0c05 	mov.w	ip, #5
  406006:	4310      	orrs	r0, r2
  406008:	2a0f      	cmp	r2, #15
  40600a:	6060      	str	r0, [r4, #4]
  40600c:	f8ce c004 	str.w	ip, [lr, #4]
  406010:	f8ce c008 	str.w	ip, [lr, #8]
  406014:	f200 8117 	bhi.w	406246 <_malloc_r+0x506>
  406018:	4b1d      	ldr	r3, [pc, #116]	; (406090 <_malloc_r+0x350>)
  40601a:	68bc      	ldr	r4, [r7, #8]
  40601c:	681a      	ldr	r2, [r3, #0]
  40601e:	4291      	cmp	r1, r2
  406020:	bf88      	it	hi
  406022:	6019      	strhi	r1, [r3, #0]
  406024:	4b1b      	ldr	r3, [pc, #108]	; (406094 <_malloc_r+0x354>)
  406026:	681a      	ldr	r2, [r3, #0]
  406028:	4291      	cmp	r1, r2
  40602a:	6862      	ldr	r2, [r4, #4]
  40602c:	bf88      	it	hi
  40602e:	6019      	strhi	r1, [r3, #0]
  406030:	f022 0203 	bic.w	r2, r2, #3
  406034:	4296      	cmp	r6, r2
  406036:	eba2 0306 	sub.w	r3, r2, r6
  40603a:	d801      	bhi.n	406040 <_malloc_r+0x300>
  40603c:	2b0f      	cmp	r3, #15
  40603e:	dc04      	bgt.n	40604a <_malloc_r+0x30a>
  406040:	4628      	mov	r0, r5
  406042:	f000 fa1b 	bl	40647c <__malloc_unlock>
  406046:	2400      	movs	r4, #0
  406048:	e740      	b.n	405ecc <_malloc_r+0x18c>
  40604a:	19a2      	adds	r2, r4, r6
  40604c:	f043 0301 	orr.w	r3, r3, #1
  406050:	f046 0601 	orr.w	r6, r6, #1
  406054:	6066      	str	r6, [r4, #4]
  406056:	4628      	mov	r0, r5
  406058:	60ba      	str	r2, [r7, #8]
  40605a:	6053      	str	r3, [r2, #4]
  40605c:	f000 fa0e 	bl	40647c <__malloc_unlock>
  406060:	3408      	adds	r4, #8
  406062:	4620      	mov	r0, r4
  406064:	b003      	add	sp, #12
  406066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40606a:	2b14      	cmp	r3, #20
  40606c:	d971      	bls.n	406152 <_malloc_r+0x412>
  40606e:	2b54      	cmp	r3, #84	; 0x54
  406070:	f200 80a3 	bhi.w	4061ba <_malloc_r+0x47a>
  406074:	0b33      	lsrs	r3, r6, #12
  406076:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40607a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40607e:	00c3      	lsls	r3, r0, #3
  406080:	e680      	b.n	405d84 <_malloc_r+0x44>
  406082:	bf00      	nop
  406084:	20400458 	.word	0x20400458
  406088:	20400de4 	.word	0x20400de4
  40608c:	20400db4 	.word	0x20400db4
  406090:	20400ddc 	.word	0x20400ddc
  406094:	20400de0 	.word	0x20400de0
  406098:	20400460 	.word	0x20400460
  40609c:	20400860 	.word	0x20400860
  4060a0:	0a5a      	lsrs	r2, r3, #9
  4060a2:	2a04      	cmp	r2, #4
  4060a4:	d95b      	bls.n	40615e <_malloc_r+0x41e>
  4060a6:	2a14      	cmp	r2, #20
  4060a8:	f200 80ae 	bhi.w	406208 <_malloc_r+0x4c8>
  4060ac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4060b0:	00c9      	lsls	r1, r1, #3
  4060b2:	325b      	adds	r2, #91	; 0x5b
  4060b4:	eb07 0c01 	add.w	ip, r7, r1
  4060b8:	5879      	ldr	r1, [r7, r1]
  4060ba:	f1ac 0c08 	sub.w	ip, ip, #8
  4060be:	458c      	cmp	ip, r1
  4060c0:	f000 8088 	beq.w	4061d4 <_malloc_r+0x494>
  4060c4:	684a      	ldr	r2, [r1, #4]
  4060c6:	f022 0203 	bic.w	r2, r2, #3
  4060ca:	4293      	cmp	r3, r2
  4060cc:	d273      	bcs.n	4061b6 <_malloc_r+0x476>
  4060ce:	6889      	ldr	r1, [r1, #8]
  4060d0:	458c      	cmp	ip, r1
  4060d2:	d1f7      	bne.n	4060c4 <_malloc_r+0x384>
  4060d4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4060d8:	687b      	ldr	r3, [r7, #4]
  4060da:	60e2      	str	r2, [r4, #12]
  4060dc:	f8c4 c008 	str.w	ip, [r4, #8]
  4060e0:	6094      	str	r4, [r2, #8]
  4060e2:	f8cc 400c 	str.w	r4, [ip, #12]
  4060e6:	e68f      	b.n	405e08 <_malloc_r+0xc8>
  4060e8:	19a1      	adds	r1, r4, r6
  4060ea:	f046 0c01 	orr.w	ip, r6, #1
  4060ee:	f042 0601 	orr.w	r6, r2, #1
  4060f2:	f8c4 c004 	str.w	ip, [r4, #4]
  4060f6:	4628      	mov	r0, r5
  4060f8:	6179      	str	r1, [r7, #20]
  4060fa:	6139      	str	r1, [r7, #16]
  4060fc:	f8c1 e00c 	str.w	lr, [r1, #12]
  406100:	f8c1 e008 	str.w	lr, [r1, #8]
  406104:	604e      	str	r6, [r1, #4]
  406106:	50e2      	str	r2, [r4, r3]
  406108:	f000 f9b8 	bl	40647c <__malloc_unlock>
  40610c:	3408      	adds	r4, #8
  40610e:	e6dd      	b.n	405ecc <_malloc_r+0x18c>
  406110:	687b      	ldr	r3, [r7, #4]
  406112:	e679      	b.n	405e08 <_malloc_r+0xc8>
  406114:	f108 0801 	add.w	r8, r8, #1
  406118:	f018 0f03 	tst.w	r8, #3
  40611c:	f10c 0c08 	add.w	ip, ip, #8
  406120:	f47f ae85 	bne.w	405e2e <_malloc_r+0xee>
  406124:	e02d      	b.n	406182 <_malloc_r+0x442>
  406126:	68dc      	ldr	r4, [r3, #12]
  406128:	42a3      	cmp	r3, r4
  40612a:	bf08      	it	eq
  40612c:	3002      	addeq	r0, #2
  40612e:	f43f ae3e 	beq.w	405dae <_malloc_r+0x6e>
  406132:	e6bb      	b.n	405eac <_malloc_r+0x16c>
  406134:	4419      	add	r1, r3
  406136:	461c      	mov	r4, r3
  406138:	684a      	ldr	r2, [r1, #4]
  40613a:	68db      	ldr	r3, [r3, #12]
  40613c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406140:	f042 0201 	orr.w	r2, r2, #1
  406144:	604a      	str	r2, [r1, #4]
  406146:	4628      	mov	r0, r5
  406148:	60f3      	str	r3, [r6, #12]
  40614a:	609e      	str	r6, [r3, #8]
  40614c:	f000 f996 	bl	40647c <__malloc_unlock>
  406150:	e6bc      	b.n	405ecc <_malloc_r+0x18c>
  406152:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406156:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40615a:	00c3      	lsls	r3, r0, #3
  40615c:	e612      	b.n	405d84 <_malloc_r+0x44>
  40615e:	099a      	lsrs	r2, r3, #6
  406160:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406164:	00c9      	lsls	r1, r1, #3
  406166:	3238      	adds	r2, #56	; 0x38
  406168:	e7a4      	b.n	4060b4 <_malloc_r+0x374>
  40616a:	42bc      	cmp	r4, r7
  40616c:	d054      	beq.n	406218 <_malloc_r+0x4d8>
  40616e:	68bc      	ldr	r4, [r7, #8]
  406170:	6862      	ldr	r2, [r4, #4]
  406172:	f022 0203 	bic.w	r2, r2, #3
  406176:	e75d      	b.n	406034 <_malloc_r+0x2f4>
  406178:	f859 3908 	ldr.w	r3, [r9], #-8
  40617c:	4599      	cmp	r9, r3
  40617e:	f040 8086 	bne.w	40628e <_malloc_r+0x54e>
  406182:	f010 0f03 	tst.w	r0, #3
  406186:	f100 30ff 	add.w	r0, r0, #4294967295
  40618a:	d1f5      	bne.n	406178 <_malloc_r+0x438>
  40618c:	687b      	ldr	r3, [r7, #4]
  40618e:	ea23 0304 	bic.w	r3, r3, r4
  406192:	607b      	str	r3, [r7, #4]
  406194:	0064      	lsls	r4, r4, #1
  406196:	429c      	cmp	r4, r3
  406198:	f63f aec7 	bhi.w	405f2a <_malloc_r+0x1ea>
  40619c:	2c00      	cmp	r4, #0
  40619e:	f43f aec4 	beq.w	405f2a <_malloc_r+0x1ea>
  4061a2:	421c      	tst	r4, r3
  4061a4:	4640      	mov	r0, r8
  4061a6:	f47f ae3e 	bne.w	405e26 <_malloc_r+0xe6>
  4061aa:	0064      	lsls	r4, r4, #1
  4061ac:	421c      	tst	r4, r3
  4061ae:	f100 0004 	add.w	r0, r0, #4
  4061b2:	d0fa      	beq.n	4061aa <_malloc_r+0x46a>
  4061b4:	e637      	b.n	405e26 <_malloc_r+0xe6>
  4061b6:	468c      	mov	ip, r1
  4061b8:	e78c      	b.n	4060d4 <_malloc_r+0x394>
  4061ba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4061be:	d815      	bhi.n	4061ec <_malloc_r+0x4ac>
  4061c0:	0bf3      	lsrs	r3, r6, #15
  4061c2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4061c6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4061ca:	00c3      	lsls	r3, r0, #3
  4061cc:	e5da      	b.n	405d84 <_malloc_r+0x44>
  4061ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4061d2:	e6ed      	b.n	405fb0 <_malloc_r+0x270>
  4061d4:	687b      	ldr	r3, [r7, #4]
  4061d6:	1092      	asrs	r2, r2, #2
  4061d8:	2101      	movs	r1, #1
  4061da:	fa01 f202 	lsl.w	r2, r1, r2
  4061de:	4313      	orrs	r3, r2
  4061e0:	607b      	str	r3, [r7, #4]
  4061e2:	4662      	mov	r2, ip
  4061e4:	e779      	b.n	4060da <_malloc_r+0x39a>
  4061e6:	2301      	movs	r3, #1
  4061e8:	6053      	str	r3, [r2, #4]
  4061ea:	e729      	b.n	406040 <_malloc_r+0x300>
  4061ec:	f240 5254 	movw	r2, #1364	; 0x554
  4061f0:	4293      	cmp	r3, r2
  4061f2:	d822      	bhi.n	40623a <_malloc_r+0x4fa>
  4061f4:	0cb3      	lsrs	r3, r6, #18
  4061f6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4061fa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4061fe:	00c3      	lsls	r3, r0, #3
  406200:	e5c0      	b.n	405d84 <_malloc_r+0x44>
  406202:	f103 0b10 	add.w	fp, r3, #16
  406206:	e6ae      	b.n	405f66 <_malloc_r+0x226>
  406208:	2a54      	cmp	r2, #84	; 0x54
  40620a:	d829      	bhi.n	406260 <_malloc_r+0x520>
  40620c:	0b1a      	lsrs	r2, r3, #12
  40620e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406212:	00c9      	lsls	r1, r1, #3
  406214:	326e      	adds	r2, #110	; 0x6e
  406216:	e74d      	b.n	4060b4 <_malloc_r+0x374>
  406218:	4b20      	ldr	r3, [pc, #128]	; (40629c <_malloc_r+0x55c>)
  40621a:	6819      	ldr	r1, [r3, #0]
  40621c:	4459      	add	r1, fp
  40621e:	6019      	str	r1, [r3, #0]
  406220:	e6b2      	b.n	405f88 <_malloc_r+0x248>
  406222:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406226:	2800      	cmp	r0, #0
  406228:	f47f aeae 	bne.w	405f88 <_malloc_r+0x248>
  40622c:	eb08 030b 	add.w	r3, r8, fp
  406230:	68ba      	ldr	r2, [r7, #8]
  406232:	f043 0301 	orr.w	r3, r3, #1
  406236:	6053      	str	r3, [r2, #4]
  406238:	e6ee      	b.n	406018 <_malloc_r+0x2d8>
  40623a:	207f      	movs	r0, #127	; 0x7f
  40623c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406240:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406244:	e59e      	b.n	405d84 <_malloc_r+0x44>
  406246:	f104 0108 	add.w	r1, r4, #8
  40624a:	4628      	mov	r0, r5
  40624c:	9300      	str	r3, [sp, #0]
  40624e:	f002 ff9f 	bl	409190 <_free_r>
  406252:	9b00      	ldr	r3, [sp, #0]
  406254:	6819      	ldr	r1, [r3, #0]
  406256:	e6df      	b.n	406018 <_malloc_r+0x2d8>
  406258:	2001      	movs	r0, #1
  40625a:	f04f 0900 	mov.w	r9, #0
  40625e:	e6bc      	b.n	405fda <_malloc_r+0x29a>
  406260:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406264:	d805      	bhi.n	406272 <_malloc_r+0x532>
  406266:	0bda      	lsrs	r2, r3, #15
  406268:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40626c:	00c9      	lsls	r1, r1, #3
  40626e:	3277      	adds	r2, #119	; 0x77
  406270:	e720      	b.n	4060b4 <_malloc_r+0x374>
  406272:	f240 5154 	movw	r1, #1364	; 0x554
  406276:	428a      	cmp	r2, r1
  406278:	d805      	bhi.n	406286 <_malloc_r+0x546>
  40627a:	0c9a      	lsrs	r2, r3, #18
  40627c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406280:	00c9      	lsls	r1, r1, #3
  406282:	327c      	adds	r2, #124	; 0x7c
  406284:	e716      	b.n	4060b4 <_malloc_r+0x374>
  406286:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40628a:	227e      	movs	r2, #126	; 0x7e
  40628c:	e712      	b.n	4060b4 <_malloc_r+0x374>
  40628e:	687b      	ldr	r3, [r7, #4]
  406290:	e780      	b.n	406194 <_malloc_r+0x454>
  406292:	08f0      	lsrs	r0, r6, #3
  406294:	f106 0308 	add.w	r3, r6, #8
  406298:	e600      	b.n	405e9c <_malloc_r+0x15c>
  40629a:	bf00      	nop
  40629c:	20400db4 	.word	0x20400db4

004062a0 <memcpy>:
  4062a0:	4684      	mov	ip, r0
  4062a2:	ea41 0300 	orr.w	r3, r1, r0
  4062a6:	f013 0303 	ands.w	r3, r3, #3
  4062aa:	d16d      	bne.n	406388 <memcpy+0xe8>
  4062ac:	3a40      	subs	r2, #64	; 0x40
  4062ae:	d341      	bcc.n	406334 <memcpy+0x94>
  4062b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062b4:	f840 3b04 	str.w	r3, [r0], #4
  4062b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062bc:	f840 3b04 	str.w	r3, [r0], #4
  4062c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062c4:	f840 3b04 	str.w	r3, [r0], #4
  4062c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062cc:	f840 3b04 	str.w	r3, [r0], #4
  4062d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062d4:	f840 3b04 	str.w	r3, [r0], #4
  4062d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062dc:	f840 3b04 	str.w	r3, [r0], #4
  4062e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062e4:	f840 3b04 	str.w	r3, [r0], #4
  4062e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062ec:	f840 3b04 	str.w	r3, [r0], #4
  4062f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062f4:	f840 3b04 	str.w	r3, [r0], #4
  4062f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062fc:	f840 3b04 	str.w	r3, [r0], #4
  406300:	f851 3b04 	ldr.w	r3, [r1], #4
  406304:	f840 3b04 	str.w	r3, [r0], #4
  406308:	f851 3b04 	ldr.w	r3, [r1], #4
  40630c:	f840 3b04 	str.w	r3, [r0], #4
  406310:	f851 3b04 	ldr.w	r3, [r1], #4
  406314:	f840 3b04 	str.w	r3, [r0], #4
  406318:	f851 3b04 	ldr.w	r3, [r1], #4
  40631c:	f840 3b04 	str.w	r3, [r0], #4
  406320:	f851 3b04 	ldr.w	r3, [r1], #4
  406324:	f840 3b04 	str.w	r3, [r0], #4
  406328:	f851 3b04 	ldr.w	r3, [r1], #4
  40632c:	f840 3b04 	str.w	r3, [r0], #4
  406330:	3a40      	subs	r2, #64	; 0x40
  406332:	d2bd      	bcs.n	4062b0 <memcpy+0x10>
  406334:	3230      	adds	r2, #48	; 0x30
  406336:	d311      	bcc.n	40635c <memcpy+0xbc>
  406338:	f851 3b04 	ldr.w	r3, [r1], #4
  40633c:	f840 3b04 	str.w	r3, [r0], #4
  406340:	f851 3b04 	ldr.w	r3, [r1], #4
  406344:	f840 3b04 	str.w	r3, [r0], #4
  406348:	f851 3b04 	ldr.w	r3, [r1], #4
  40634c:	f840 3b04 	str.w	r3, [r0], #4
  406350:	f851 3b04 	ldr.w	r3, [r1], #4
  406354:	f840 3b04 	str.w	r3, [r0], #4
  406358:	3a10      	subs	r2, #16
  40635a:	d2ed      	bcs.n	406338 <memcpy+0x98>
  40635c:	320c      	adds	r2, #12
  40635e:	d305      	bcc.n	40636c <memcpy+0xcc>
  406360:	f851 3b04 	ldr.w	r3, [r1], #4
  406364:	f840 3b04 	str.w	r3, [r0], #4
  406368:	3a04      	subs	r2, #4
  40636a:	d2f9      	bcs.n	406360 <memcpy+0xc0>
  40636c:	3204      	adds	r2, #4
  40636e:	d008      	beq.n	406382 <memcpy+0xe2>
  406370:	07d2      	lsls	r2, r2, #31
  406372:	bf1c      	itt	ne
  406374:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406378:	f800 3b01 	strbne.w	r3, [r0], #1
  40637c:	d301      	bcc.n	406382 <memcpy+0xe2>
  40637e:	880b      	ldrh	r3, [r1, #0]
  406380:	8003      	strh	r3, [r0, #0]
  406382:	4660      	mov	r0, ip
  406384:	4770      	bx	lr
  406386:	bf00      	nop
  406388:	2a08      	cmp	r2, #8
  40638a:	d313      	bcc.n	4063b4 <memcpy+0x114>
  40638c:	078b      	lsls	r3, r1, #30
  40638e:	d08d      	beq.n	4062ac <memcpy+0xc>
  406390:	f010 0303 	ands.w	r3, r0, #3
  406394:	d08a      	beq.n	4062ac <memcpy+0xc>
  406396:	f1c3 0304 	rsb	r3, r3, #4
  40639a:	1ad2      	subs	r2, r2, r3
  40639c:	07db      	lsls	r3, r3, #31
  40639e:	bf1c      	itt	ne
  4063a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4063a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4063a8:	d380      	bcc.n	4062ac <memcpy+0xc>
  4063aa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4063ae:	f820 3b02 	strh.w	r3, [r0], #2
  4063b2:	e77b      	b.n	4062ac <memcpy+0xc>
  4063b4:	3a04      	subs	r2, #4
  4063b6:	d3d9      	bcc.n	40636c <memcpy+0xcc>
  4063b8:	3a01      	subs	r2, #1
  4063ba:	f811 3b01 	ldrb.w	r3, [r1], #1
  4063be:	f800 3b01 	strb.w	r3, [r0], #1
  4063c2:	d2f9      	bcs.n	4063b8 <memcpy+0x118>
  4063c4:	780b      	ldrb	r3, [r1, #0]
  4063c6:	7003      	strb	r3, [r0, #0]
  4063c8:	784b      	ldrb	r3, [r1, #1]
  4063ca:	7043      	strb	r3, [r0, #1]
  4063cc:	788b      	ldrb	r3, [r1, #2]
  4063ce:	7083      	strb	r3, [r0, #2]
  4063d0:	4660      	mov	r0, ip
  4063d2:	4770      	bx	lr

004063d4 <memset>:
  4063d4:	b470      	push	{r4, r5, r6}
  4063d6:	0786      	lsls	r6, r0, #30
  4063d8:	d046      	beq.n	406468 <memset+0x94>
  4063da:	1e54      	subs	r4, r2, #1
  4063dc:	2a00      	cmp	r2, #0
  4063de:	d041      	beq.n	406464 <memset+0x90>
  4063e0:	b2ca      	uxtb	r2, r1
  4063e2:	4603      	mov	r3, r0
  4063e4:	e002      	b.n	4063ec <memset+0x18>
  4063e6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4063ea:	d33b      	bcc.n	406464 <memset+0x90>
  4063ec:	f803 2b01 	strb.w	r2, [r3], #1
  4063f0:	079d      	lsls	r5, r3, #30
  4063f2:	d1f8      	bne.n	4063e6 <memset+0x12>
  4063f4:	2c03      	cmp	r4, #3
  4063f6:	d92e      	bls.n	406456 <memset+0x82>
  4063f8:	b2cd      	uxtb	r5, r1
  4063fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4063fe:	2c0f      	cmp	r4, #15
  406400:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406404:	d919      	bls.n	40643a <memset+0x66>
  406406:	f103 0210 	add.w	r2, r3, #16
  40640a:	4626      	mov	r6, r4
  40640c:	3e10      	subs	r6, #16
  40640e:	2e0f      	cmp	r6, #15
  406410:	f842 5c10 	str.w	r5, [r2, #-16]
  406414:	f842 5c0c 	str.w	r5, [r2, #-12]
  406418:	f842 5c08 	str.w	r5, [r2, #-8]
  40641c:	f842 5c04 	str.w	r5, [r2, #-4]
  406420:	f102 0210 	add.w	r2, r2, #16
  406424:	d8f2      	bhi.n	40640c <memset+0x38>
  406426:	f1a4 0210 	sub.w	r2, r4, #16
  40642a:	f022 020f 	bic.w	r2, r2, #15
  40642e:	f004 040f 	and.w	r4, r4, #15
  406432:	3210      	adds	r2, #16
  406434:	2c03      	cmp	r4, #3
  406436:	4413      	add	r3, r2
  406438:	d90d      	bls.n	406456 <memset+0x82>
  40643a:	461e      	mov	r6, r3
  40643c:	4622      	mov	r2, r4
  40643e:	3a04      	subs	r2, #4
  406440:	2a03      	cmp	r2, #3
  406442:	f846 5b04 	str.w	r5, [r6], #4
  406446:	d8fa      	bhi.n	40643e <memset+0x6a>
  406448:	1f22      	subs	r2, r4, #4
  40644a:	f022 0203 	bic.w	r2, r2, #3
  40644e:	3204      	adds	r2, #4
  406450:	4413      	add	r3, r2
  406452:	f004 0403 	and.w	r4, r4, #3
  406456:	b12c      	cbz	r4, 406464 <memset+0x90>
  406458:	b2c9      	uxtb	r1, r1
  40645a:	441c      	add	r4, r3
  40645c:	f803 1b01 	strb.w	r1, [r3], #1
  406460:	429c      	cmp	r4, r3
  406462:	d1fb      	bne.n	40645c <memset+0x88>
  406464:	bc70      	pop	{r4, r5, r6}
  406466:	4770      	bx	lr
  406468:	4614      	mov	r4, r2
  40646a:	4603      	mov	r3, r0
  40646c:	e7c2      	b.n	4063f4 <memset+0x20>
  40646e:	bf00      	nop

00406470 <__malloc_lock>:
  406470:	4801      	ldr	r0, [pc, #4]	; (406478 <__malloc_lock+0x8>)
  406472:	f003 b927 	b.w	4096c4 <__retarget_lock_acquire_recursive>
  406476:	bf00      	nop
  406478:	20400e4c 	.word	0x20400e4c

0040647c <__malloc_unlock>:
  40647c:	4801      	ldr	r0, [pc, #4]	; (406484 <__malloc_unlock+0x8>)
  40647e:	f003 b923 	b.w	4096c8 <__retarget_lock_release_recursive>
  406482:	bf00      	nop
  406484:	20400e4c 	.word	0x20400e4c

00406488 <printf>:
  406488:	b40f      	push	{r0, r1, r2, r3}
  40648a:	b500      	push	{lr}
  40648c:	4907      	ldr	r1, [pc, #28]	; (4064ac <printf+0x24>)
  40648e:	b083      	sub	sp, #12
  406490:	ab04      	add	r3, sp, #16
  406492:	6808      	ldr	r0, [r1, #0]
  406494:	f853 2b04 	ldr.w	r2, [r3], #4
  406498:	6881      	ldr	r1, [r0, #8]
  40649a:	9301      	str	r3, [sp, #4]
  40649c:	f000 f9be 	bl	40681c <_vfprintf_r>
  4064a0:	b003      	add	sp, #12
  4064a2:	f85d eb04 	ldr.w	lr, [sp], #4
  4064a6:	b004      	add	sp, #16
  4064a8:	4770      	bx	lr
  4064aa:	bf00      	nop
  4064ac:	20400028 	.word	0x20400028

004064b0 <_puts_r>:
  4064b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4064b2:	4605      	mov	r5, r0
  4064b4:	b089      	sub	sp, #36	; 0x24
  4064b6:	4608      	mov	r0, r1
  4064b8:	460c      	mov	r4, r1
  4064ba:	f000 f941 	bl	406740 <strlen>
  4064be:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4064c0:	4f21      	ldr	r7, [pc, #132]	; (406548 <_puts_r+0x98>)
  4064c2:	9404      	str	r4, [sp, #16]
  4064c4:	2601      	movs	r6, #1
  4064c6:	1c44      	adds	r4, r0, #1
  4064c8:	a904      	add	r1, sp, #16
  4064ca:	2202      	movs	r2, #2
  4064cc:	9403      	str	r4, [sp, #12]
  4064ce:	9005      	str	r0, [sp, #20]
  4064d0:	68ac      	ldr	r4, [r5, #8]
  4064d2:	9706      	str	r7, [sp, #24]
  4064d4:	9607      	str	r6, [sp, #28]
  4064d6:	9101      	str	r1, [sp, #4]
  4064d8:	9202      	str	r2, [sp, #8]
  4064da:	b353      	cbz	r3, 406532 <_puts_r+0x82>
  4064dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4064de:	f013 0f01 	tst.w	r3, #1
  4064e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4064e6:	b29a      	uxth	r2, r3
  4064e8:	d101      	bne.n	4064ee <_puts_r+0x3e>
  4064ea:	0590      	lsls	r0, r2, #22
  4064ec:	d525      	bpl.n	40653a <_puts_r+0x8a>
  4064ee:	0491      	lsls	r1, r2, #18
  4064f0:	d406      	bmi.n	406500 <_puts_r+0x50>
  4064f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4064f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4064f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4064fc:	81a3      	strh	r3, [r4, #12]
  4064fe:	6662      	str	r2, [r4, #100]	; 0x64
  406500:	4628      	mov	r0, r5
  406502:	aa01      	add	r2, sp, #4
  406504:	4621      	mov	r1, r4
  406506:	f002 ff29 	bl	40935c <__sfvwrite_r>
  40650a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40650c:	2800      	cmp	r0, #0
  40650e:	bf0c      	ite	eq
  406510:	250a      	moveq	r5, #10
  406512:	f04f 35ff 	movne.w	r5, #4294967295
  406516:	07da      	lsls	r2, r3, #31
  406518:	d402      	bmi.n	406520 <_puts_r+0x70>
  40651a:	89a3      	ldrh	r3, [r4, #12]
  40651c:	059b      	lsls	r3, r3, #22
  40651e:	d502      	bpl.n	406526 <_puts_r+0x76>
  406520:	4628      	mov	r0, r5
  406522:	b009      	add	sp, #36	; 0x24
  406524:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406526:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406528:	f003 f8ce 	bl	4096c8 <__retarget_lock_release_recursive>
  40652c:	4628      	mov	r0, r5
  40652e:	b009      	add	sp, #36	; 0x24
  406530:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406532:	4628      	mov	r0, r5
  406534:	f002 fd8a 	bl	40904c <__sinit>
  406538:	e7d0      	b.n	4064dc <_puts_r+0x2c>
  40653a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40653c:	f003 f8c2 	bl	4096c4 <__retarget_lock_acquire_recursive>
  406540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406544:	b29a      	uxth	r2, r3
  406546:	e7d2      	b.n	4064ee <_puts_r+0x3e>
  406548:	0040b468 	.word	0x0040b468

0040654c <puts>:
  40654c:	4b02      	ldr	r3, [pc, #8]	; (406558 <puts+0xc>)
  40654e:	4601      	mov	r1, r0
  406550:	6818      	ldr	r0, [r3, #0]
  406552:	f7ff bfad 	b.w	4064b0 <_puts_r>
  406556:	bf00      	nop
  406558:	20400028 	.word	0x20400028

0040655c <_sbrk_r>:
  40655c:	b538      	push	{r3, r4, r5, lr}
  40655e:	4c07      	ldr	r4, [pc, #28]	; (40657c <_sbrk_r+0x20>)
  406560:	2300      	movs	r3, #0
  406562:	4605      	mov	r5, r0
  406564:	4608      	mov	r0, r1
  406566:	6023      	str	r3, [r4, #0]
  406568:	f7fb f8b2 	bl	4016d0 <_sbrk>
  40656c:	1c43      	adds	r3, r0, #1
  40656e:	d000      	beq.n	406572 <_sbrk_r+0x16>
  406570:	bd38      	pop	{r3, r4, r5, pc}
  406572:	6823      	ldr	r3, [r4, #0]
  406574:	2b00      	cmp	r3, #0
  406576:	d0fb      	beq.n	406570 <_sbrk_r+0x14>
  406578:	602b      	str	r3, [r5, #0]
  40657a:	bd38      	pop	{r3, r4, r5, pc}
  40657c:	20400e60 	.word	0x20400e60

00406580 <setbuf>:
  406580:	2900      	cmp	r1, #0
  406582:	bf0c      	ite	eq
  406584:	2202      	moveq	r2, #2
  406586:	2200      	movne	r2, #0
  406588:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40658c:	f000 b800 	b.w	406590 <setvbuf>

00406590 <setvbuf>:
  406590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406594:	4c61      	ldr	r4, [pc, #388]	; (40671c <setvbuf+0x18c>)
  406596:	6825      	ldr	r5, [r4, #0]
  406598:	b083      	sub	sp, #12
  40659a:	4604      	mov	r4, r0
  40659c:	460f      	mov	r7, r1
  40659e:	4690      	mov	r8, r2
  4065a0:	461e      	mov	r6, r3
  4065a2:	b115      	cbz	r5, 4065aa <setvbuf+0x1a>
  4065a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4065a6:	2b00      	cmp	r3, #0
  4065a8:	d064      	beq.n	406674 <setvbuf+0xe4>
  4065aa:	f1b8 0f02 	cmp.w	r8, #2
  4065ae:	d006      	beq.n	4065be <setvbuf+0x2e>
  4065b0:	f1b8 0f01 	cmp.w	r8, #1
  4065b4:	f200 809f 	bhi.w	4066f6 <setvbuf+0x166>
  4065b8:	2e00      	cmp	r6, #0
  4065ba:	f2c0 809c 	blt.w	4066f6 <setvbuf+0x166>
  4065be:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4065c0:	07d8      	lsls	r0, r3, #31
  4065c2:	d534      	bpl.n	40662e <setvbuf+0x9e>
  4065c4:	4621      	mov	r1, r4
  4065c6:	4628      	mov	r0, r5
  4065c8:	f002 fce8 	bl	408f9c <_fflush_r>
  4065cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4065ce:	b141      	cbz	r1, 4065e2 <setvbuf+0x52>
  4065d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4065d4:	4299      	cmp	r1, r3
  4065d6:	d002      	beq.n	4065de <setvbuf+0x4e>
  4065d8:	4628      	mov	r0, r5
  4065da:	f002 fdd9 	bl	409190 <_free_r>
  4065de:	2300      	movs	r3, #0
  4065e0:	6323      	str	r3, [r4, #48]	; 0x30
  4065e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4065e6:	2200      	movs	r2, #0
  4065e8:	61a2      	str	r2, [r4, #24]
  4065ea:	6062      	str	r2, [r4, #4]
  4065ec:	061a      	lsls	r2, r3, #24
  4065ee:	d43a      	bmi.n	406666 <setvbuf+0xd6>
  4065f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4065f4:	f023 0303 	bic.w	r3, r3, #3
  4065f8:	f1b8 0f02 	cmp.w	r8, #2
  4065fc:	81a3      	strh	r3, [r4, #12]
  4065fe:	d01d      	beq.n	40663c <setvbuf+0xac>
  406600:	ab01      	add	r3, sp, #4
  406602:	466a      	mov	r2, sp
  406604:	4621      	mov	r1, r4
  406606:	4628      	mov	r0, r5
  406608:	f003 f860 	bl	4096cc <__swhatbuf_r>
  40660c:	89a3      	ldrh	r3, [r4, #12]
  40660e:	4318      	orrs	r0, r3
  406610:	81a0      	strh	r0, [r4, #12]
  406612:	2e00      	cmp	r6, #0
  406614:	d132      	bne.n	40667c <setvbuf+0xec>
  406616:	9e00      	ldr	r6, [sp, #0]
  406618:	4630      	mov	r0, r6
  40661a:	f7ff fb81 	bl	405d20 <malloc>
  40661e:	4607      	mov	r7, r0
  406620:	2800      	cmp	r0, #0
  406622:	d06b      	beq.n	4066fc <setvbuf+0x16c>
  406624:	89a3      	ldrh	r3, [r4, #12]
  406626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40662a:	81a3      	strh	r3, [r4, #12]
  40662c:	e028      	b.n	406680 <setvbuf+0xf0>
  40662e:	89a3      	ldrh	r3, [r4, #12]
  406630:	0599      	lsls	r1, r3, #22
  406632:	d4c7      	bmi.n	4065c4 <setvbuf+0x34>
  406634:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406636:	f003 f845 	bl	4096c4 <__retarget_lock_acquire_recursive>
  40663a:	e7c3      	b.n	4065c4 <setvbuf+0x34>
  40663c:	2500      	movs	r5, #0
  40663e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406640:	2600      	movs	r6, #0
  406642:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406646:	f043 0302 	orr.w	r3, r3, #2
  40664a:	2001      	movs	r0, #1
  40664c:	60a6      	str	r6, [r4, #8]
  40664e:	07ce      	lsls	r6, r1, #31
  406650:	81a3      	strh	r3, [r4, #12]
  406652:	6022      	str	r2, [r4, #0]
  406654:	6122      	str	r2, [r4, #16]
  406656:	6160      	str	r0, [r4, #20]
  406658:	d401      	bmi.n	40665e <setvbuf+0xce>
  40665a:	0598      	lsls	r0, r3, #22
  40665c:	d53e      	bpl.n	4066dc <setvbuf+0x14c>
  40665e:	4628      	mov	r0, r5
  406660:	b003      	add	sp, #12
  406662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406666:	6921      	ldr	r1, [r4, #16]
  406668:	4628      	mov	r0, r5
  40666a:	f002 fd91 	bl	409190 <_free_r>
  40666e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406672:	e7bd      	b.n	4065f0 <setvbuf+0x60>
  406674:	4628      	mov	r0, r5
  406676:	f002 fce9 	bl	40904c <__sinit>
  40667a:	e796      	b.n	4065aa <setvbuf+0x1a>
  40667c:	2f00      	cmp	r7, #0
  40667e:	d0cb      	beq.n	406618 <setvbuf+0x88>
  406680:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406682:	2b00      	cmp	r3, #0
  406684:	d033      	beq.n	4066ee <setvbuf+0x15e>
  406686:	9b00      	ldr	r3, [sp, #0]
  406688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40668c:	6027      	str	r7, [r4, #0]
  40668e:	429e      	cmp	r6, r3
  406690:	bf1c      	itt	ne
  406692:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406696:	81a2      	strhne	r2, [r4, #12]
  406698:	f1b8 0f01 	cmp.w	r8, #1
  40669c:	bf04      	itt	eq
  40669e:	f042 0201 	orreq.w	r2, r2, #1
  4066a2:	81a2      	strheq	r2, [r4, #12]
  4066a4:	b292      	uxth	r2, r2
  4066a6:	f012 0308 	ands.w	r3, r2, #8
  4066aa:	6127      	str	r7, [r4, #16]
  4066ac:	6166      	str	r6, [r4, #20]
  4066ae:	d00e      	beq.n	4066ce <setvbuf+0x13e>
  4066b0:	07d1      	lsls	r1, r2, #31
  4066b2:	d51a      	bpl.n	4066ea <setvbuf+0x15a>
  4066b4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4066b6:	4276      	negs	r6, r6
  4066b8:	2300      	movs	r3, #0
  4066ba:	f015 0501 	ands.w	r5, r5, #1
  4066be:	61a6      	str	r6, [r4, #24]
  4066c0:	60a3      	str	r3, [r4, #8]
  4066c2:	d009      	beq.n	4066d8 <setvbuf+0x148>
  4066c4:	2500      	movs	r5, #0
  4066c6:	4628      	mov	r0, r5
  4066c8:	b003      	add	sp, #12
  4066ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4066ce:	60a3      	str	r3, [r4, #8]
  4066d0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4066d2:	f015 0501 	ands.w	r5, r5, #1
  4066d6:	d1f5      	bne.n	4066c4 <setvbuf+0x134>
  4066d8:	0593      	lsls	r3, r2, #22
  4066da:	d4c0      	bmi.n	40665e <setvbuf+0xce>
  4066dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4066de:	f002 fff3 	bl	4096c8 <__retarget_lock_release_recursive>
  4066e2:	4628      	mov	r0, r5
  4066e4:	b003      	add	sp, #12
  4066e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4066ea:	60a6      	str	r6, [r4, #8]
  4066ec:	e7f0      	b.n	4066d0 <setvbuf+0x140>
  4066ee:	4628      	mov	r0, r5
  4066f0:	f002 fcac 	bl	40904c <__sinit>
  4066f4:	e7c7      	b.n	406686 <setvbuf+0xf6>
  4066f6:	f04f 35ff 	mov.w	r5, #4294967295
  4066fa:	e7b0      	b.n	40665e <setvbuf+0xce>
  4066fc:	f8dd 9000 	ldr.w	r9, [sp]
  406700:	45b1      	cmp	r9, r6
  406702:	d004      	beq.n	40670e <setvbuf+0x17e>
  406704:	4648      	mov	r0, r9
  406706:	f7ff fb0b 	bl	405d20 <malloc>
  40670a:	4607      	mov	r7, r0
  40670c:	b920      	cbnz	r0, 406718 <setvbuf+0x188>
  40670e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406712:	f04f 35ff 	mov.w	r5, #4294967295
  406716:	e792      	b.n	40663e <setvbuf+0xae>
  406718:	464e      	mov	r6, r9
  40671a:	e783      	b.n	406624 <setvbuf+0x94>
  40671c:	20400028 	.word	0x20400028
	...

00406740 <strlen>:
  406740:	f890 f000 	pld	[r0]
  406744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406748:	f020 0107 	bic.w	r1, r0, #7
  40674c:	f06f 0c00 	mvn.w	ip, #0
  406750:	f010 0407 	ands.w	r4, r0, #7
  406754:	f891 f020 	pld	[r1, #32]
  406758:	f040 8049 	bne.w	4067ee <strlen+0xae>
  40675c:	f04f 0400 	mov.w	r4, #0
  406760:	f06f 0007 	mvn.w	r0, #7
  406764:	e9d1 2300 	ldrd	r2, r3, [r1]
  406768:	f891 f040 	pld	[r1, #64]	; 0x40
  40676c:	f100 0008 	add.w	r0, r0, #8
  406770:	fa82 f24c 	uadd8	r2, r2, ip
  406774:	faa4 f28c 	sel	r2, r4, ip
  406778:	fa83 f34c 	uadd8	r3, r3, ip
  40677c:	faa2 f38c 	sel	r3, r2, ip
  406780:	bb4b      	cbnz	r3, 4067d6 <strlen+0x96>
  406782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406786:	fa82 f24c 	uadd8	r2, r2, ip
  40678a:	f100 0008 	add.w	r0, r0, #8
  40678e:	faa4 f28c 	sel	r2, r4, ip
  406792:	fa83 f34c 	uadd8	r3, r3, ip
  406796:	faa2 f38c 	sel	r3, r2, ip
  40679a:	b9e3      	cbnz	r3, 4067d6 <strlen+0x96>
  40679c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4067a0:	fa82 f24c 	uadd8	r2, r2, ip
  4067a4:	f100 0008 	add.w	r0, r0, #8
  4067a8:	faa4 f28c 	sel	r2, r4, ip
  4067ac:	fa83 f34c 	uadd8	r3, r3, ip
  4067b0:	faa2 f38c 	sel	r3, r2, ip
  4067b4:	b97b      	cbnz	r3, 4067d6 <strlen+0x96>
  4067b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4067ba:	f101 0120 	add.w	r1, r1, #32
  4067be:	fa82 f24c 	uadd8	r2, r2, ip
  4067c2:	f100 0008 	add.w	r0, r0, #8
  4067c6:	faa4 f28c 	sel	r2, r4, ip
  4067ca:	fa83 f34c 	uadd8	r3, r3, ip
  4067ce:	faa2 f38c 	sel	r3, r2, ip
  4067d2:	2b00      	cmp	r3, #0
  4067d4:	d0c6      	beq.n	406764 <strlen+0x24>
  4067d6:	2a00      	cmp	r2, #0
  4067d8:	bf04      	itt	eq
  4067da:	3004      	addeq	r0, #4
  4067dc:	461a      	moveq	r2, r3
  4067de:	ba12      	rev	r2, r2
  4067e0:	fab2 f282 	clz	r2, r2
  4067e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4067e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4067ec:	4770      	bx	lr
  4067ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4067f2:	f004 0503 	and.w	r5, r4, #3
  4067f6:	f1c4 0000 	rsb	r0, r4, #0
  4067fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4067fe:	f014 0f04 	tst.w	r4, #4
  406802:	f891 f040 	pld	[r1, #64]	; 0x40
  406806:	fa0c f505 	lsl.w	r5, ip, r5
  40680a:	ea62 0205 	orn	r2, r2, r5
  40680e:	bf1c      	itt	ne
  406810:	ea63 0305 	ornne	r3, r3, r5
  406814:	4662      	movne	r2, ip
  406816:	f04f 0400 	mov.w	r4, #0
  40681a:	e7a9      	b.n	406770 <strlen+0x30>

0040681c <_vfprintf_r>:
  40681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406820:	b0c1      	sub	sp, #260	; 0x104
  406822:	461d      	mov	r5, r3
  406824:	468a      	mov	sl, r1
  406826:	4691      	mov	r9, r2
  406828:	4604      	mov	r4, r0
  40682a:	9008      	str	r0, [sp, #32]
  40682c:	f002 ff38 	bl	4096a0 <_localeconv_r>
  406830:	6803      	ldr	r3, [r0, #0]
  406832:	9315      	str	r3, [sp, #84]	; 0x54
  406834:	4618      	mov	r0, r3
  406836:	f7ff ff83 	bl	406740 <strlen>
  40683a:	950e      	str	r5, [sp, #56]	; 0x38
  40683c:	9014      	str	r0, [sp, #80]	; 0x50
  40683e:	b11c      	cbz	r4, 406848 <_vfprintf_r+0x2c>
  406840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  406842:	2b00      	cmp	r3, #0
  406844:	f000 825f 	beq.w	406d06 <_vfprintf_r+0x4ea>
  406848:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40684c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  406850:	f013 0f01 	tst.w	r3, #1
  406854:	b293      	uxth	r3, r2
  406856:	d102      	bne.n	40685e <_vfprintf_r+0x42>
  406858:	0599      	lsls	r1, r3, #22
  40685a:	f140 8275 	bpl.w	406d48 <_vfprintf_r+0x52c>
  40685e:	049f      	lsls	r7, r3, #18
  406860:	d40a      	bmi.n	406878 <_vfprintf_r+0x5c>
  406862:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  406866:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  40686a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40686e:	f8aa 300c 	strh.w	r3, [sl, #12]
  406872:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  406876:	b29b      	uxth	r3, r3
  406878:	071e      	lsls	r6, r3, #28
  40687a:	f140 8223 	bpl.w	406cc4 <_vfprintf_r+0x4a8>
  40687e:	f8da 2010 	ldr.w	r2, [sl, #16]
  406882:	2a00      	cmp	r2, #0
  406884:	f000 821e 	beq.w	406cc4 <_vfprintf_r+0x4a8>
  406888:	f003 021a 	and.w	r2, r3, #26
  40688c:	2a0a      	cmp	r2, #10
  40688e:	f000 823e 	beq.w	406d0e <_vfprintf_r+0x4f2>
  406892:	2300      	movs	r3, #0
  406894:	4618      	mov	r0, r3
  406896:	9311      	str	r3, [sp, #68]	; 0x44
  406898:	9313      	str	r3, [sp, #76]	; 0x4c
  40689a:	9312      	str	r3, [sp, #72]	; 0x48
  40689c:	9325      	str	r3, [sp, #148]	; 0x94
  40689e:	9324      	str	r3, [sp, #144]	; 0x90
  4068a0:	9318      	str	r3, [sp, #96]	; 0x60
  4068a2:	9319      	str	r3, [sp, #100]	; 0x64
  4068a4:	930b      	str	r3, [sp, #44]	; 0x2c
  4068a6:	ab30      	add	r3, sp, #192	; 0xc0
  4068a8:	9323      	str	r3, [sp, #140]	; 0x8c
  4068aa:	4698      	mov	r8, r3
  4068ac:	9016      	str	r0, [sp, #88]	; 0x58
  4068ae:	9017      	str	r0, [sp, #92]	; 0x5c
  4068b0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4068b4:	f899 3000 	ldrb.w	r3, [r9]
  4068b8:	464c      	mov	r4, r9
  4068ba:	b1eb      	cbz	r3, 4068f8 <_vfprintf_r+0xdc>
  4068bc:	2b25      	cmp	r3, #37	; 0x25
  4068be:	d102      	bne.n	4068c6 <_vfprintf_r+0xaa>
  4068c0:	e01a      	b.n	4068f8 <_vfprintf_r+0xdc>
  4068c2:	2b25      	cmp	r3, #37	; 0x25
  4068c4:	d003      	beq.n	4068ce <_vfprintf_r+0xb2>
  4068c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4068ca:	2b00      	cmp	r3, #0
  4068cc:	d1f9      	bne.n	4068c2 <_vfprintf_r+0xa6>
  4068ce:	eba4 0509 	sub.w	r5, r4, r9
  4068d2:	b18d      	cbz	r5, 4068f8 <_vfprintf_r+0xdc>
  4068d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4068d8:	f8c8 9000 	str.w	r9, [r8]
  4068dc:	3301      	adds	r3, #1
  4068de:	442a      	add	r2, r5
  4068e0:	2b07      	cmp	r3, #7
  4068e2:	f8c8 5004 	str.w	r5, [r8, #4]
  4068e6:	9225      	str	r2, [sp, #148]	; 0x94
  4068e8:	9324      	str	r3, [sp, #144]	; 0x90
  4068ea:	f300 8201 	bgt.w	406cf0 <_vfprintf_r+0x4d4>
  4068ee:	f108 0808 	add.w	r8, r8, #8
  4068f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4068f4:	442b      	add	r3, r5
  4068f6:	930b      	str	r3, [sp, #44]	; 0x2c
  4068f8:	7823      	ldrb	r3, [r4, #0]
  4068fa:	2b00      	cmp	r3, #0
  4068fc:	f000 83f0 	beq.w	4070e0 <_vfprintf_r+0x8c4>
  406900:	2300      	movs	r3, #0
  406902:	461a      	mov	r2, r3
  406904:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406908:	4619      	mov	r1, r3
  40690a:	930c      	str	r3, [sp, #48]	; 0x30
  40690c:	469b      	mov	fp, r3
  40690e:	7866      	ldrb	r6, [r4, #1]
  406910:	f04f 33ff 	mov.w	r3, #4294967295
  406914:	f104 0901 	add.w	r9, r4, #1
  406918:	9309      	str	r3, [sp, #36]	; 0x24
  40691a:	f109 0901 	add.w	r9, r9, #1
  40691e:	f1a6 0320 	sub.w	r3, r6, #32
  406922:	2b58      	cmp	r3, #88	; 0x58
  406924:	f200 83bf 	bhi.w	4070a6 <_vfprintf_r+0x88a>
  406928:	e8df f013 	tbh	[pc, r3, lsl #1]
  40692c:	03bd02e0 	.word	0x03bd02e0
  406930:	034f03bd 	.word	0x034f03bd
  406934:	03bd03bd 	.word	0x03bd03bd
  406938:	03bd03bd 	.word	0x03bd03bd
  40693c:	03bd03bd 	.word	0x03bd03bd
  406940:	03080354 	.word	0x03080354
  406944:	021a03bd 	.word	0x021a03bd
  406948:	03bd02e8 	.word	0x03bd02e8
  40694c:	033a0303 	.word	0x033a0303
  406950:	033a033a 	.word	0x033a033a
  406954:	033a033a 	.word	0x033a033a
  406958:	033a033a 	.word	0x033a033a
  40695c:	033a033a 	.word	0x033a033a
  406960:	03bd03bd 	.word	0x03bd03bd
  406964:	03bd03bd 	.word	0x03bd03bd
  406968:	03bd03bd 	.word	0x03bd03bd
  40696c:	03bd03bd 	.word	0x03bd03bd
  406970:	03bd03bd 	.word	0x03bd03bd
  406974:	03620349 	.word	0x03620349
  406978:	036203bd 	.word	0x036203bd
  40697c:	03bd03bd 	.word	0x03bd03bd
  406980:	03bd03bd 	.word	0x03bd03bd
  406984:	03bd03a2 	.word	0x03bd03a2
  406988:	006f03bd 	.word	0x006f03bd
  40698c:	03bd03bd 	.word	0x03bd03bd
  406990:	03bd03bd 	.word	0x03bd03bd
  406994:	005903bd 	.word	0x005903bd
  406998:	03bd03bd 	.word	0x03bd03bd
  40699c:	03bd031e 	.word	0x03bd031e
  4069a0:	03bd03bd 	.word	0x03bd03bd
  4069a4:	03bd03bd 	.word	0x03bd03bd
  4069a8:	03bd03bd 	.word	0x03bd03bd
  4069ac:	03bd03bd 	.word	0x03bd03bd
  4069b0:	032403bd 	.word	0x032403bd
  4069b4:	03620273 	.word	0x03620273
  4069b8:	03620362 	.word	0x03620362
  4069bc:	027302b7 	.word	0x027302b7
  4069c0:	03bd03bd 	.word	0x03bd03bd
  4069c4:	03bd02bc 	.word	0x03bd02bc
  4069c8:	007102c9 	.word	0x007102c9
  4069cc:	0247030d 	.word	0x0247030d
  4069d0:	025203bd 	.word	0x025203bd
  4069d4:	005b03bd 	.word	0x005b03bd
  4069d8:	03bd03bd 	.word	0x03bd03bd
  4069dc:	021f      	.short	0x021f
  4069de:	f04b 0b10 	orr.w	fp, fp, #16
  4069e2:	f01b 0f20 	tst.w	fp, #32
  4069e6:	f040 8353 	bne.w	407090 <_vfprintf_r+0x874>
  4069ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4069ec:	f01b 0f10 	tst.w	fp, #16
  4069f0:	4613      	mov	r3, r2
  4069f2:	f040 85b4 	bne.w	40755e <_vfprintf_r+0xd42>
  4069f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4069fa:	f000 85b0 	beq.w	40755e <_vfprintf_r+0xd42>
  4069fe:	8814      	ldrh	r4, [r2, #0]
  406a00:	3204      	adds	r2, #4
  406a02:	2500      	movs	r5, #0
  406a04:	2301      	movs	r3, #1
  406a06:	920e      	str	r2, [sp, #56]	; 0x38
  406a08:	e014      	b.n	406a34 <_vfprintf_r+0x218>
  406a0a:	f04b 0b10 	orr.w	fp, fp, #16
  406a0e:	f01b 0320 	ands.w	r3, fp, #32
  406a12:	f040 8332 	bne.w	40707a <_vfprintf_r+0x85e>
  406a16:	f01b 0210 	ands.w	r2, fp, #16
  406a1a:	f040 8589 	bne.w	407530 <_vfprintf_r+0xd14>
  406a1e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  406a22:	f000 8585 	beq.w	407530 <_vfprintf_r+0xd14>
  406a26:	990e      	ldr	r1, [sp, #56]	; 0x38
  406a28:	4613      	mov	r3, r2
  406a2a:	460a      	mov	r2, r1
  406a2c:	3204      	adds	r2, #4
  406a2e:	880c      	ldrh	r4, [r1, #0]
  406a30:	920e      	str	r2, [sp, #56]	; 0x38
  406a32:	2500      	movs	r5, #0
  406a34:	f04f 0a00 	mov.w	sl, #0
  406a38:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  406a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
  406a3e:	1c4a      	adds	r2, r1, #1
  406a40:	f000 820b 	beq.w	406e5a <_vfprintf_r+0x63e>
  406a44:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406a48:	9206      	str	r2, [sp, #24]
  406a4a:	ea54 0205 	orrs.w	r2, r4, r5
  406a4e:	f040 820a 	bne.w	406e66 <_vfprintf_r+0x64a>
  406a52:	2900      	cmp	r1, #0
  406a54:	f040 846f 	bne.w	407336 <_vfprintf_r+0xb1a>
  406a58:	2b00      	cmp	r3, #0
  406a5a:	f040 852d 	bne.w	4074b8 <_vfprintf_r+0xc9c>
  406a5e:	f01b 0301 	ands.w	r3, fp, #1
  406a62:	930d      	str	r3, [sp, #52]	; 0x34
  406a64:	f000 8668 	beq.w	407738 <_vfprintf_r+0xf1c>
  406a68:	af40      	add	r7, sp, #256	; 0x100
  406a6a:	2330      	movs	r3, #48	; 0x30
  406a6c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  406a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406a74:	4293      	cmp	r3, r2
  406a76:	bfb8      	it	lt
  406a78:	4613      	movlt	r3, r2
  406a7a:	9307      	str	r3, [sp, #28]
  406a7c:	2300      	movs	r3, #0
  406a7e:	9310      	str	r3, [sp, #64]	; 0x40
  406a80:	f1ba 0f00 	cmp.w	sl, #0
  406a84:	d002      	beq.n	406a8c <_vfprintf_r+0x270>
  406a86:	9b07      	ldr	r3, [sp, #28]
  406a88:	3301      	adds	r3, #1
  406a8a:	9307      	str	r3, [sp, #28]
  406a8c:	9b06      	ldr	r3, [sp, #24]
  406a8e:	f013 0302 	ands.w	r3, r3, #2
  406a92:	930f      	str	r3, [sp, #60]	; 0x3c
  406a94:	d002      	beq.n	406a9c <_vfprintf_r+0x280>
  406a96:	9b07      	ldr	r3, [sp, #28]
  406a98:	3302      	adds	r3, #2
  406a9a:	9307      	str	r3, [sp, #28]
  406a9c:	9b06      	ldr	r3, [sp, #24]
  406a9e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  406aa2:	f040 831b 	bne.w	4070dc <_vfprintf_r+0x8c0>
  406aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406aa8:	9a07      	ldr	r2, [sp, #28]
  406aaa:	eba3 0b02 	sub.w	fp, r3, r2
  406aae:	f1bb 0f00 	cmp.w	fp, #0
  406ab2:	f340 8313 	ble.w	4070dc <_vfprintf_r+0x8c0>
  406ab6:	f1bb 0f10 	cmp.w	fp, #16
  406aba:	9925      	ldr	r1, [sp, #148]	; 0x94
  406abc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406abe:	dd28      	ble.n	406b12 <_vfprintf_r+0x2f6>
  406ac0:	4643      	mov	r3, r8
  406ac2:	2410      	movs	r4, #16
  406ac4:	46a8      	mov	r8, r5
  406ac6:	f8dd a020 	ldr.w	sl, [sp, #32]
  406aca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406acc:	e006      	b.n	406adc <_vfprintf_r+0x2c0>
  406ace:	f1ab 0b10 	sub.w	fp, fp, #16
  406ad2:	f1bb 0f10 	cmp.w	fp, #16
  406ad6:	f103 0308 	add.w	r3, r3, #8
  406ada:	dd18      	ble.n	406b0e <_vfprintf_r+0x2f2>
  406adc:	3201      	adds	r2, #1
  406ade:	48b9      	ldr	r0, [pc, #740]	; (406dc4 <_vfprintf_r+0x5a8>)
  406ae0:	9224      	str	r2, [sp, #144]	; 0x90
  406ae2:	3110      	adds	r1, #16
  406ae4:	2a07      	cmp	r2, #7
  406ae6:	9125      	str	r1, [sp, #148]	; 0x94
  406ae8:	e883 0011 	stmia.w	r3, {r0, r4}
  406aec:	ddef      	ble.n	406ace <_vfprintf_r+0x2b2>
  406aee:	aa23      	add	r2, sp, #140	; 0x8c
  406af0:	4629      	mov	r1, r5
  406af2:	4650      	mov	r0, sl
  406af4:	f003 fc3c 	bl	40a370 <__sprint_r>
  406af8:	2800      	cmp	r0, #0
  406afa:	f040 836a 	bne.w	4071d2 <_vfprintf_r+0x9b6>
  406afe:	f1ab 0b10 	sub.w	fp, fp, #16
  406b02:	f1bb 0f10 	cmp.w	fp, #16
  406b06:	9925      	ldr	r1, [sp, #148]	; 0x94
  406b08:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406b0a:	ab30      	add	r3, sp, #192	; 0xc0
  406b0c:	dce6      	bgt.n	406adc <_vfprintf_r+0x2c0>
  406b0e:	4645      	mov	r5, r8
  406b10:	4698      	mov	r8, r3
  406b12:	3201      	adds	r2, #1
  406b14:	4bab      	ldr	r3, [pc, #684]	; (406dc4 <_vfprintf_r+0x5a8>)
  406b16:	9224      	str	r2, [sp, #144]	; 0x90
  406b18:	eb0b 0401 	add.w	r4, fp, r1
  406b1c:	2a07      	cmp	r2, #7
  406b1e:	9425      	str	r4, [sp, #148]	; 0x94
  406b20:	e888 0808 	stmia.w	r8, {r3, fp}
  406b24:	f300 84cd 	bgt.w	4074c2 <_vfprintf_r+0xca6>
  406b28:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406b2c:	f108 0808 	add.w	r8, r8, #8
  406b30:	f1ba 0f00 	cmp.w	sl, #0
  406b34:	d00e      	beq.n	406b54 <_vfprintf_r+0x338>
  406b36:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b38:	3301      	adds	r3, #1
  406b3a:	3401      	adds	r4, #1
  406b3c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  406b40:	2201      	movs	r2, #1
  406b42:	2b07      	cmp	r3, #7
  406b44:	9425      	str	r4, [sp, #148]	; 0x94
  406b46:	9324      	str	r3, [sp, #144]	; 0x90
  406b48:	e888 0006 	stmia.w	r8, {r1, r2}
  406b4c:	f300 840a 	bgt.w	407364 <_vfprintf_r+0xb48>
  406b50:	f108 0808 	add.w	r8, r8, #8
  406b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406b56:	b16b      	cbz	r3, 406b74 <_vfprintf_r+0x358>
  406b58:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b5a:	3301      	adds	r3, #1
  406b5c:	3402      	adds	r4, #2
  406b5e:	a91c      	add	r1, sp, #112	; 0x70
  406b60:	2202      	movs	r2, #2
  406b62:	2b07      	cmp	r3, #7
  406b64:	9425      	str	r4, [sp, #148]	; 0x94
  406b66:	9324      	str	r3, [sp, #144]	; 0x90
  406b68:	e888 0006 	stmia.w	r8, {r1, r2}
  406b6c:	f300 8406 	bgt.w	40737c <_vfprintf_r+0xb60>
  406b70:	f108 0808 	add.w	r8, r8, #8
  406b74:	2d80      	cmp	r5, #128	; 0x80
  406b76:	f000 832e 	beq.w	4071d6 <_vfprintf_r+0x9ba>
  406b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406b7e:	eba3 0a02 	sub.w	sl, r3, r2
  406b82:	f1ba 0f00 	cmp.w	sl, #0
  406b86:	dd3b      	ble.n	406c00 <_vfprintf_r+0x3e4>
  406b88:	f1ba 0f10 	cmp.w	sl, #16
  406b8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b8e:	4d8e      	ldr	r5, [pc, #568]	; (406dc8 <_vfprintf_r+0x5ac>)
  406b90:	dd2b      	ble.n	406bea <_vfprintf_r+0x3ce>
  406b92:	4642      	mov	r2, r8
  406b94:	4621      	mov	r1, r4
  406b96:	46b0      	mov	r8, r6
  406b98:	f04f 0b10 	mov.w	fp, #16
  406b9c:	462e      	mov	r6, r5
  406b9e:	9c08      	ldr	r4, [sp, #32]
  406ba0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406ba2:	e006      	b.n	406bb2 <_vfprintf_r+0x396>
  406ba4:	f1aa 0a10 	sub.w	sl, sl, #16
  406ba8:	f1ba 0f10 	cmp.w	sl, #16
  406bac:	f102 0208 	add.w	r2, r2, #8
  406bb0:	dd17      	ble.n	406be2 <_vfprintf_r+0x3c6>
  406bb2:	3301      	adds	r3, #1
  406bb4:	3110      	adds	r1, #16
  406bb6:	2b07      	cmp	r3, #7
  406bb8:	9125      	str	r1, [sp, #148]	; 0x94
  406bba:	9324      	str	r3, [sp, #144]	; 0x90
  406bbc:	e882 0840 	stmia.w	r2, {r6, fp}
  406bc0:	ddf0      	ble.n	406ba4 <_vfprintf_r+0x388>
  406bc2:	aa23      	add	r2, sp, #140	; 0x8c
  406bc4:	4629      	mov	r1, r5
  406bc6:	4620      	mov	r0, r4
  406bc8:	f003 fbd2 	bl	40a370 <__sprint_r>
  406bcc:	2800      	cmp	r0, #0
  406bce:	f040 8300 	bne.w	4071d2 <_vfprintf_r+0x9b6>
  406bd2:	f1aa 0a10 	sub.w	sl, sl, #16
  406bd6:	f1ba 0f10 	cmp.w	sl, #16
  406bda:	9925      	ldr	r1, [sp, #148]	; 0x94
  406bdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406bde:	aa30      	add	r2, sp, #192	; 0xc0
  406be0:	dce7      	bgt.n	406bb2 <_vfprintf_r+0x396>
  406be2:	4635      	mov	r5, r6
  406be4:	460c      	mov	r4, r1
  406be6:	4646      	mov	r6, r8
  406be8:	4690      	mov	r8, r2
  406bea:	3301      	adds	r3, #1
  406bec:	4454      	add	r4, sl
  406bee:	2b07      	cmp	r3, #7
  406bf0:	9425      	str	r4, [sp, #148]	; 0x94
  406bf2:	9324      	str	r3, [sp, #144]	; 0x90
  406bf4:	e888 0420 	stmia.w	r8, {r5, sl}
  406bf8:	f300 83a9 	bgt.w	40734e <_vfprintf_r+0xb32>
  406bfc:	f108 0808 	add.w	r8, r8, #8
  406c00:	9b06      	ldr	r3, [sp, #24]
  406c02:	05db      	lsls	r3, r3, #23
  406c04:	f100 8285 	bmi.w	407112 <_vfprintf_r+0x8f6>
  406c08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c0a:	990d      	ldr	r1, [sp, #52]	; 0x34
  406c0c:	f8c8 7000 	str.w	r7, [r8]
  406c10:	3301      	adds	r3, #1
  406c12:	440c      	add	r4, r1
  406c14:	2b07      	cmp	r3, #7
  406c16:	9425      	str	r4, [sp, #148]	; 0x94
  406c18:	f8c8 1004 	str.w	r1, [r8, #4]
  406c1c:	9324      	str	r3, [sp, #144]	; 0x90
  406c1e:	f300 8375 	bgt.w	40730c <_vfprintf_r+0xaf0>
  406c22:	f108 0808 	add.w	r8, r8, #8
  406c26:	9b06      	ldr	r3, [sp, #24]
  406c28:	0759      	lsls	r1, r3, #29
  406c2a:	d53b      	bpl.n	406ca4 <_vfprintf_r+0x488>
  406c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406c2e:	9a07      	ldr	r2, [sp, #28]
  406c30:	1a9d      	subs	r5, r3, r2
  406c32:	2d00      	cmp	r5, #0
  406c34:	dd36      	ble.n	406ca4 <_vfprintf_r+0x488>
  406c36:	2d10      	cmp	r5, #16
  406c38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c3a:	dd21      	ble.n	406c80 <_vfprintf_r+0x464>
  406c3c:	2610      	movs	r6, #16
  406c3e:	9f08      	ldr	r7, [sp, #32]
  406c40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  406c44:	e004      	b.n	406c50 <_vfprintf_r+0x434>
  406c46:	3d10      	subs	r5, #16
  406c48:	2d10      	cmp	r5, #16
  406c4a:	f108 0808 	add.w	r8, r8, #8
  406c4e:	dd17      	ble.n	406c80 <_vfprintf_r+0x464>
  406c50:	3301      	adds	r3, #1
  406c52:	4a5c      	ldr	r2, [pc, #368]	; (406dc4 <_vfprintf_r+0x5a8>)
  406c54:	9324      	str	r3, [sp, #144]	; 0x90
  406c56:	3410      	adds	r4, #16
  406c58:	2b07      	cmp	r3, #7
  406c5a:	9425      	str	r4, [sp, #148]	; 0x94
  406c5c:	e888 0044 	stmia.w	r8, {r2, r6}
  406c60:	ddf1      	ble.n	406c46 <_vfprintf_r+0x42a>
  406c62:	aa23      	add	r2, sp, #140	; 0x8c
  406c64:	4651      	mov	r1, sl
  406c66:	4638      	mov	r0, r7
  406c68:	f003 fb82 	bl	40a370 <__sprint_r>
  406c6c:	2800      	cmp	r0, #0
  406c6e:	f040 823f 	bne.w	4070f0 <_vfprintf_r+0x8d4>
  406c72:	3d10      	subs	r5, #16
  406c74:	2d10      	cmp	r5, #16
  406c76:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406c78:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406c7e:	dce7      	bgt.n	406c50 <_vfprintf_r+0x434>
  406c80:	3301      	adds	r3, #1
  406c82:	4a50      	ldr	r2, [pc, #320]	; (406dc4 <_vfprintf_r+0x5a8>)
  406c84:	9324      	str	r3, [sp, #144]	; 0x90
  406c86:	442c      	add	r4, r5
  406c88:	2b07      	cmp	r3, #7
  406c8a:	9425      	str	r4, [sp, #148]	; 0x94
  406c8c:	e888 0024 	stmia.w	r8, {r2, r5}
  406c90:	dd08      	ble.n	406ca4 <_vfprintf_r+0x488>
  406c92:	aa23      	add	r2, sp, #140	; 0x8c
  406c94:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c96:	9808      	ldr	r0, [sp, #32]
  406c98:	f003 fb6a 	bl	40a370 <__sprint_r>
  406c9c:	2800      	cmp	r0, #0
  406c9e:	f040 8347 	bne.w	407330 <_vfprintf_r+0xb14>
  406ca2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  406ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406ca8:	9907      	ldr	r1, [sp, #28]
  406caa:	428a      	cmp	r2, r1
  406cac:	bfac      	ite	ge
  406cae:	189b      	addge	r3, r3, r2
  406cb0:	185b      	addlt	r3, r3, r1
  406cb2:	930b      	str	r3, [sp, #44]	; 0x2c
  406cb4:	2c00      	cmp	r4, #0
  406cb6:	f040 8333 	bne.w	407320 <_vfprintf_r+0xb04>
  406cba:	2300      	movs	r3, #0
  406cbc:	9324      	str	r3, [sp, #144]	; 0x90
  406cbe:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406cc2:	e5f7      	b.n	4068b4 <_vfprintf_r+0x98>
  406cc4:	4651      	mov	r1, sl
  406cc6:	9808      	ldr	r0, [sp, #32]
  406cc8:	f001 f896 	bl	407df8 <__swsetup_r>
  406ccc:	2800      	cmp	r0, #0
  406cce:	d038      	beq.n	406d42 <_vfprintf_r+0x526>
  406cd0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  406cd4:	07dd      	lsls	r5, r3, #31
  406cd6:	d404      	bmi.n	406ce2 <_vfprintf_r+0x4c6>
  406cd8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406cdc:	059c      	lsls	r4, r3, #22
  406cde:	f140 85ca 	bpl.w	407876 <_vfprintf_r+0x105a>
  406ce2:	f04f 33ff 	mov.w	r3, #4294967295
  406ce6:	930b      	str	r3, [sp, #44]	; 0x2c
  406ce8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406cea:	b041      	add	sp, #260	; 0x104
  406cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cf0:	aa23      	add	r2, sp, #140	; 0x8c
  406cf2:	990a      	ldr	r1, [sp, #40]	; 0x28
  406cf4:	9808      	ldr	r0, [sp, #32]
  406cf6:	f003 fb3b 	bl	40a370 <__sprint_r>
  406cfa:	2800      	cmp	r0, #0
  406cfc:	f040 8318 	bne.w	407330 <_vfprintf_r+0xb14>
  406d00:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406d04:	e5f5      	b.n	4068f2 <_vfprintf_r+0xd6>
  406d06:	9808      	ldr	r0, [sp, #32]
  406d08:	f002 f9a0 	bl	40904c <__sinit>
  406d0c:	e59c      	b.n	406848 <_vfprintf_r+0x2c>
  406d0e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  406d12:	2a00      	cmp	r2, #0
  406d14:	f6ff adbd 	blt.w	406892 <_vfprintf_r+0x76>
  406d18:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  406d1c:	07d0      	lsls	r0, r2, #31
  406d1e:	d405      	bmi.n	406d2c <_vfprintf_r+0x510>
  406d20:	0599      	lsls	r1, r3, #22
  406d22:	d403      	bmi.n	406d2c <_vfprintf_r+0x510>
  406d24:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406d28:	f002 fcce 	bl	4096c8 <__retarget_lock_release_recursive>
  406d2c:	462b      	mov	r3, r5
  406d2e:	464a      	mov	r2, r9
  406d30:	4651      	mov	r1, sl
  406d32:	9808      	ldr	r0, [sp, #32]
  406d34:	f001 f81e 	bl	407d74 <__sbprintf>
  406d38:	900b      	str	r0, [sp, #44]	; 0x2c
  406d3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406d3c:	b041      	add	sp, #260	; 0x104
  406d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d42:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  406d46:	e59f      	b.n	406888 <_vfprintf_r+0x6c>
  406d48:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  406d4c:	f002 fcba 	bl	4096c4 <__retarget_lock_acquire_recursive>
  406d50:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  406d54:	b293      	uxth	r3, r2
  406d56:	e582      	b.n	40685e <_vfprintf_r+0x42>
  406d58:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d5a:	930e      	str	r3, [sp, #56]	; 0x38
  406d5c:	4240      	negs	r0, r0
  406d5e:	900c      	str	r0, [sp, #48]	; 0x30
  406d60:	f04b 0b04 	orr.w	fp, fp, #4
  406d64:	f899 6000 	ldrb.w	r6, [r9]
  406d68:	e5d7      	b.n	40691a <_vfprintf_r+0xfe>
  406d6a:	2a00      	cmp	r2, #0
  406d6c:	f040 87df 	bne.w	407d2e <_vfprintf_r+0x1512>
  406d70:	4b16      	ldr	r3, [pc, #88]	; (406dcc <_vfprintf_r+0x5b0>)
  406d72:	9318      	str	r3, [sp, #96]	; 0x60
  406d74:	f01b 0f20 	tst.w	fp, #32
  406d78:	f040 84b9 	bne.w	4076ee <_vfprintf_r+0xed2>
  406d7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406d7e:	f01b 0f10 	tst.w	fp, #16
  406d82:	4613      	mov	r3, r2
  406d84:	f040 83dc 	bne.w	407540 <_vfprintf_r+0xd24>
  406d88:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406d8c:	f000 83d8 	beq.w	407540 <_vfprintf_r+0xd24>
  406d90:	3304      	adds	r3, #4
  406d92:	8814      	ldrh	r4, [r2, #0]
  406d94:	930e      	str	r3, [sp, #56]	; 0x38
  406d96:	2500      	movs	r5, #0
  406d98:	f01b 0f01 	tst.w	fp, #1
  406d9c:	f000 8322 	beq.w	4073e4 <_vfprintf_r+0xbc8>
  406da0:	ea54 0305 	orrs.w	r3, r4, r5
  406da4:	f000 831e 	beq.w	4073e4 <_vfprintf_r+0xbc8>
  406da8:	2330      	movs	r3, #48	; 0x30
  406daa:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  406dae:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  406db2:	f04b 0b02 	orr.w	fp, fp, #2
  406db6:	2302      	movs	r3, #2
  406db8:	e63c      	b.n	406a34 <_vfprintf_r+0x218>
  406dba:	f04b 0b20 	orr.w	fp, fp, #32
  406dbe:	f899 6000 	ldrb.w	r6, [r9]
  406dc2:	e5aa      	b.n	40691a <_vfprintf_r+0xfe>
  406dc4:	0040b4b0 	.word	0x0040b4b0
  406dc8:	0040b4c0 	.word	0x0040b4c0
  406dcc:	0040b490 	.word	0x0040b490
  406dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406dd2:	6817      	ldr	r7, [r2, #0]
  406dd4:	2400      	movs	r4, #0
  406dd6:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  406dda:	1d15      	adds	r5, r2, #4
  406ddc:	2f00      	cmp	r7, #0
  406dde:	f000 864e 	beq.w	407a7e <_vfprintf_r+0x1262>
  406de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406de4:	1c53      	adds	r3, r2, #1
  406de6:	f000 85cc 	beq.w	407982 <_vfprintf_r+0x1166>
  406dea:	4621      	mov	r1, r4
  406dec:	4638      	mov	r0, r7
  406dee:	f002 fce7 	bl	4097c0 <memchr>
  406df2:	2800      	cmp	r0, #0
  406df4:	f000 8697 	beq.w	407b26 <_vfprintf_r+0x130a>
  406df8:	1bc3      	subs	r3, r0, r7
  406dfa:	930d      	str	r3, [sp, #52]	; 0x34
  406dfc:	9409      	str	r4, [sp, #36]	; 0x24
  406dfe:	950e      	str	r5, [sp, #56]	; 0x38
  406e00:	f8cd b018 	str.w	fp, [sp, #24]
  406e04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406e08:	9307      	str	r3, [sp, #28]
  406e0a:	9410      	str	r4, [sp, #64]	; 0x40
  406e0c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406e10:	e636      	b.n	406a80 <_vfprintf_r+0x264>
  406e12:	2a00      	cmp	r2, #0
  406e14:	f040 8796 	bne.w	407d44 <_vfprintf_r+0x1528>
  406e18:	f01b 0f20 	tst.w	fp, #32
  406e1c:	f040 845a 	bne.w	4076d4 <_vfprintf_r+0xeb8>
  406e20:	f01b 0f10 	tst.w	fp, #16
  406e24:	f040 83a2 	bne.w	40756c <_vfprintf_r+0xd50>
  406e28:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406e2c:	f000 839e 	beq.w	40756c <_vfprintf_r+0xd50>
  406e30:	990e      	ldr	r1, [sp, #56]	; 0x38
  406e32:	f9b1 4000 	ldrsh.w	r4, [r1]
  406e36:	3104      	adds	r1, #4
  406e38:	17e5      	asrs	r5, r4, #31
  406e3a:	4622      	mov	r2, r4
  406e3c:	462b      	mov	r3, r5
  406e3e:	910e      	str	r1, [sp, #56]	; 0x38
  406e40:	2a00      	cmp	r2, #0
  406e42:	f173 0300 	sbcs.w	r3, r3, #0
  406e46:	f2c0 8487 	blt.w	407758 <_vfprintf_r+0xf3c>
  406e4a:	9909      	ldr	r1, [sp, #36]	; 0x24
  406e4c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  406e50:	1c4a      	adds	r2, r1, #1
  406e52:	f04f 0301 	mov.w	r3, #1
  406e56:	f47f adf5 	bne.w	406a44 <_vfprintf_r+0x228>
  406e5a:	ea54 0205 	orrs.w	r2, r4, r5
  406e5e:	f000 826c 	beq.w	40733a <_vfprintf_r+0xb1e>
  406e62:	f8cd b018 	str.w	fp, [sp, #24]
  406e66:	2b01      	cmp	r3, #1
  406e68:	f000 8308 	beq.w	40747c <_vfprintf_r+0xc60>
  406e6c:	2b02      	cmp	r3, #2
  406e6e:	f040 8295 	bne.w	40739c <_vfprintf_r+0xb80>
  406e72:	9818      	ldr	r0, [sp, #96]	; 0x60
  406e74:	af30      	add	r7, sp, #192	; 0xc0
  406e76:	0923      	lsrs	r3, r4, #4
  406e78:	f004 010f 	and.w	r1, r4, #15
  406e7c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  406e80:	092a      	lsrs	r2, r5, #4
  406e82:	461c      	mov	r4, r3
  406e84:	4615      	mov	r5, r2
  406e86:	5c43      	ldrb	r3, [r0, r1]
  406e88:	f807 3d01 	strb.w	r3, [r7, #-1]!
  406e8c:	ea54 0305 	orrs.w	r3, r4, r5
  406e90:	d1f1      	bne.n	406e76 <_vfprintf_r+0x65a>
  406e92:	ab30      	add	r3, sp, #192	; 0xc0
  406e94:	1bdb      	subs	r3, r3, r7
  406e96:	930d      	str	r3, [sp, #52]	; 0x34
  406e98:	e5ea      	b.n	406a70 <_vfprintf_r+0x254>
  406e9a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  406e9e:	f899 6000 	ldrb.w	r6, [r9]
  406ea2:	e53a      	b.n	40691a <_vfprintf_r+0xfe>
  406ea4:	f899 6000 	ldrb.w	r6, [r9]
  406ea8:	2e6c      	cmp	r6, #108	; 0x6c
  406eaa:	bf03      	ittte	eq
  406eac:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  406eb0:	f04b 0b20 	orreq.w	fp, fp, #32
  406eb4:	f109 0901 	addeq.w	r9, r9, #1
  406eb8:	f04b 0b10 	orrne.w	fp, fp, #16
  406ebc:	e52d      	b.n	40691a <_vfprintf_r+0xfe>
  406ebe:	2a00      	cmp	r2, #0
  406ec0:	f040 874c 	bne.w	407d5c <_vfprintf_r+0x1540>
  406ec4:	f01b 0f20 	tst.w	fp, #32
  406ec8:	f040 853f 	bne.w	40794a <_vfprintf_r+0x112e>
  406ecc:	f01b 0f10 	tst.w	fp, #16
  406ed0:	f040 80fc 	bne.w	4070cc <_vfprintf_r+0x8b0>
  406ed4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406ed8:	f000 80f8 	beq.w	4070cc <_vfprintf_r+0x8b0>
  406edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406ede:	6813      	ldr	r3, [r2, #0]
  406ee0:	3204      	adds	r2, #4
  406ee2:	920e      	str	r2, [sp, #56]	; 0x38
  406ee4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  406ee8:	801a      	strh	r2, [r3, #0]
  406eea:	e4e3      	b.n	4068b4 <_vfprintf_r+0x98>
  406eec:	f899 6000 	ldrb.w	r6, [r9]
  406ef0:	2900      	cmp	r1, #0
  406ef2:	f47f ad12 	bne.w	40691a <_vfprintf_r+0xfe>
  406ef6:	2201      	movs	r2, #1
  406ef8:	2120      	movs	r1, #32
  406efa:	e50e      	b.n	40691a <_vfprintf_r+0xfe>
  406efc:	f899 6000 	ldrb.w	r6, [r9]
  406f00:	2e2a      	cmp	r6, #42	; 0x2a
  406f02:	f109 0001 	add.w	r0, r9, #1
  406f06:	f000 86f1 	beq.w	407cec <_vfprintf_r+0x14d0>
  406f0a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406f0e:	2b09      	cmp	r3, #9
  406f10:	4681      	mov	r9, r0
  406f12:	bf98      	it	ls
  406f14:	2000      	movls	r0, #0
  406f16:	f200 863d 	bhi.w	407b94 <_vfprintf_r+0x1378>
  406f1a:	f819 6b01 	ldrb.w	r6, [r9], #1
  406f1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406f22:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406f26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406f2a:	2b09      	cmp	r3, #9
  406f2c:	d9f5      	bls.n	406f1a <_vfprintf_r+0x6fe>
  406f2e:	9009      	str	r0, [sp, #36]	; 0x24
  406f30:	e4f5      	b.n	40691e <_vfprintf_r+0x102>
  406f32:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  406f36:	f899 6000 	ldrb.w	r6, [r9]
  406f3a:	e4ee      	b.n	40691a <_vfprintf_r+0xfe>
  406f3c:	f899 6000 	ldrb.w	r6, [r9]
  406f40:	2201      	movs	r2, #1
  406f42:	212b      	movs	r1, #43	; 0x2b
  406f44:	e4e9      	b.n	40691a <_vfprintf_r+0xfe>
  406f46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406f48:	4bae      	ldr	r3, [pc, #696]	; (407204 <_vfprintf_r+0x9e8>)
  406f4a:	6814      	ldr	r4, [r2, #0]
  406f4c:	9318      	str	r3, [sp, #96]	; 0x60
  406f4e:	2678      	movs	r6, #120	; 0x78
  406f50:	2330      	movs	r3, #48	; 0x30
  406f52:	3204      	adds	r2, #4
  406f54:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  406f58:	f04b 0b02 	orr.w	fp, fp, #2
  406f5c:	920e      	str	r2, [sp, #56]	; 0x38
  406f5e:	2500      	movs	r5, #0
  406f60:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  406f64:	2302      	movs	r3, #2
  406f66:	e565      	b.n	406a34 <_vfprintf_r+0x218>
  406f68:	2a00      	cmp	r2, #0
  406f6a:	f040 86e4 	bne.w	407d36 <_vfprintf_r+0x151a>
  406f6e:	4ba6      	ldr	r3, [pc, #664]	; (407208 <_vfprintf_r+0x9ec>)
  406f70:	9318      	str	r3, [sp, #96]	; 0x60
  406f72:	e6ff      	b.n	406d74 <_vfprintf_r+0x558>
  406f74:	990e      	ldr	r1, [sp, #56]	; 0x38
  406f76:	f8cd b018 	str.w	fp, [sp, #24]
  406f7a:	680a      	ldr	r2, [r1, #0]
  406f7c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  406f80:	2300      	movs	r3, #0
  406f82:	460a      	mov	r2, r1
  406f84:	469a      	mov	sl, r3
  406f86:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406f8a:	3204      	adds	r2, #4
  406f8c:	2301      	movs	r3, #1
  406f8e:	9307      	str	r3, [sp, #28]
  406f90:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  406f94:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  406f98:	920e      	str	r2, [sp, #56]	; 0x38
  406f9a:	930d      	str	r3, [sp, #52]	; 0x34
  406f9c:	af26      	add	r7, sp, #152	; 0x98
  406f9e:	e575      	b.n	406a8c <_vfprintf_r+0x270>
  406fa0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406fa4:	2000      	movs	r0, #0
  406fa6:	f819 6b01 	ldrb.w	r6, [r9], #1
  406faa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  406fae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  406fb2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  406fb6:	2b09      	cmp	r3, #9
  406fb8:	d9f5      	bls.n	406fa6 <_vfprintf_r+0x78a>
  406fba:	900c      	str	r0, [sp, #48]	; 0x30
  406fbc:	e4af      	b.n	40691e <_vfprintf_r+0x102>
  406fbe:	2a00      	cmp	r2, #0
  406fc0:	f040 86c8 	bne.w	407d54 <_vfprintf_r+0x1538>
  406fc4:	f04b 0b10 	orr.w	fp, fp, #16
  406fc8:	e726      	b.n	406e18 <_vfprintf_r+0x5fc>
  406fca:	f04b 0b01 	orr.w	fp, fp, #1
  406fce:	f899 6000 	ldrb.w	r6, [r9]
  406fd2:	e4a2      	b.n	40691a <_vfprintf_r+0xfe>
  406fd4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  406fd6:	6823      	ldr	r3, [r4, #0]
  406fd8:	930c      	str	r3, [sp, #48]	; 0x30
  406fda:	4618      	mov	r0, r3
  406fdc:	2800      	cmp	r0, #0
  406fde:	4623      	mov	r3, r4
  406fe0:	f103 0304 	add.w	r3, r3, #4
  406fe4:	f6ff aeb8 	blt.w	406d58 <_vfprintf_r+0x53c>
  406fe8:	930e      	str	r3, [sp, #56]	; 0x38
  406fea:	f899 6000 	ldrb.w	r6, [r9]
  406fee:	e494      	b.n	40691a <_vfprintf_r+0xfe>
  406ff0:	2a00      	cmp	r2, #0
  406ff2:	f040 86b7 	bne.w	407d64 <_vfprintf_r+0x1548>
  406ff6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  406ff8:	3507      	adds	r5, #7
  406ffa:	f025 0307 	bic.w	r3, r5, #7
  406ffe:	f103 0208 	add.w	r2, r3, #8
  407002:	920e      	str	r2, [sp, #56]	; 0x38
  407004:	681a      	ldr	r2, [r3, #0]
  407006:	9213      	str	r2, [sp, #76]	; 0x4c
  407008:	685b      	ldr	r3, [r3, #4]
  40700a:	9312      	str	r3, [sp, #72]	; 0x48
  40700c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40700e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  407010:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  407014:	4628      	mov	r0, r5
  407016:	4621      	mov	r1, r4
  407018:	f04f 32ff 	mov.w	r2, #4294967295
  40701c:	4b7b      	ldr	r3, [pc, #492]	; (40720c <_vfprintf_r+0x9f0>)
  40701e:	f7fe faf1 	bl	405604 <__aeabi_dcmpun>
  407022:	2800      	cmp	r0, #0
  407024:	f040 83a2 	bne.w	40776c <_vfprintf_r+0xf50>
  407028:	4628      	mov	r0, r5
  40702a:	4621      	mov	r1, r4
  40702c:	f04f 32ff 	mov.w	r2, #4294967295
  407030:	4b76      	ldr	r3, [pc, #472]	; (40720c <_vfprintf_r+0x9f0>)
  407032:	f7fe fac9 	bl	4055c8 <__aeabi_dcmple>
  407036:	2800      	cmp	r0, #0
  407038:	f040 8398 	bne.w	40776c <_vfprintf_r+0xf50>
  40703c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40703e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407042:	9912      	ldr	r1, [sp, #72]	; 0x48
  407044:	f7fe fab6 	bl	4055b4 <__aeabi_dcmplt>
  407048:	2800      	cmp	r0, #0
  40704a:	f040 8435 	bne.w	4078b8 <_vfprintf_r+0x109c>
  40704e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407052:	4f6f      	ldr	r7, [pc, #444]	; (407210 <_vfprintf_r+0x9f4>)
  407054:	4b6f      	ldr	r3, [pc, #444]	; (407214 <_vfprintf_r+0x9f8>)
  407056:	2203      	movs	r2, #3
  407058:	2100      	movs	r1, #0
  40705a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40705e:	9207      	str	r2, [sp, #28]
  407060:	9109      	str	r1, [sp, #36]	; 0x24
  407062:	9006      	str	r0, [sp, #24]
  407064:	2e47      	cmp	r6, #71	; 0x47
  407066:	bfd8      	it	le
  407068:	461f      	movle	r7, r3
  40706a:	920d      	str	r2, [sp, #52]	; 0x34
  40706c:	9110      	str	r1, [sp, #64]	; 0x40
  40706e:	e507      	b.n	406a80 <_vfprintf_r+0x264>
  407070:	f04b 0b08 	orr.w	fp, fp, #8
  407074:	f899 6000 	ldrb.w	r6, [r9]
  407078:	e44f      	b.n	40691a <_vfprintf_r+0xfe>
  40707a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40707c:	3507      	adds	r5, #7
  40707e:	f025 0307 	bic.w	r3, r5, #7
  407082:	f103 0208 	add.w	r2, r3, #8
  407086:	e9d3 4500 	ldrd	r4, r5, [r3]
  40708a:	920e      	str	r2, [sp, #56]	; 0x38
  40708c:	2300      	movs	r3, #0
  40708e:	e4d1      	b.n	406a34 <_vfprintf_r+0x218>
  407090:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  407092:	3507      	adds	r5, #7
  407094:	f025 0307 	bic.w	r3, r5, #7
  407098:	f103 0208 	add.w	r2, r3, #8
  40709c:	e9d3 4500 	ldrd	r4, r5, [r3]
  4070a0:	920e      	str	r2, [sp, #56]	; 0x38
  4070a2:	2301      	movs	r3, #1
  4070a4:	e4c6      	b.n	406a34 <_vfprintf_r+0x218>
  4070a6:	2a00      	cmp	r2, #0
  4070a8:	f040 8650 	bne.w	407d4c <_vfprintf_r+0x1530>
  4070ac:	b1c6      	cbz	r6, 4070e0 <_vfprintf_r+0x8c4>
  4070ae:	2300      	movs	r3, #0
  4070b0:	2201      	movs	r2, #1
  4070b2:	469a      	mov	sl, r3
  4070b4:	9207      	str	r2, [sp, #28]
  4070b6:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  4070ba:	f8cd b018 	str.w	fp, [sp, #24]
  4070be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4070c2:	9309      	str	r3, [sp, #36]	; 0x24
  4070c4:	9310      	str	r3, [sp, #64]	; 0x40
  4070c6:	920d      	str	r2, [sp, #52]	; 0x34
  4070c8:	af26      	add	r7, sp, #152	; 0x98
  4070ca:	e4df      	b.n	406a8c <_vfprintf_r+0x270>
  4070cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4070ce:	6813      	ldr	r3, [r2, #0]
  4070d0:	3204      	adds	r2, #4
  4070d2:	920e      	str	r2, [sp, #56]	; 0x38
  4070d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4070d6:	601a      	str	r2, [r3, #0]
  4070d8:	f7ff bbec 	b.w	4068b4 <_vfprintf_r+0x98>
  4070dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4070de:	e527      	b.n	406b30 <_vfprintf_r+0x314>
  4070e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4070e2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4070e6:	2b00      	cmp	r3, #0
  4070e8:	f040 8594 	bne.w	407c14 <_vfprintf_r+0x13f8>
  4070ec:	2300      	movs	r3, #0
  4070ee:	9324      	str	r3, [sp, #144]	; 0x90
  4070f0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4070f4:	f013 0f01 	tst.w	r3, #1
  4070f8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4070fc:	d102      	bne.n	407104 <_vfprintf_r+0x8e8>
  4070fe:	059a      	lsls	r2, r3, #22
  407100:	f140 8249 	bpl.w	407596 <_vfprintf_r+0xd7a>
  407104:	065b      	lsls	r3, r3, #25
  407106:	f53f adec 	bmi.w	406ce2 <_vfprintf_r+0x4c6>
  40710a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40710c:	b041      	add	sp, #260	; 0x104
  40710e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407112:	2e65      	cmp	r6, #101	; 0x65
  407114:	f340 80b2 	ble.w	40727c <_vfprintf_r+0xa60>
  407118:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40711a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40711c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40711e:	9912      	ldr	r1, [sp, #72]	; 0x48
  407120:	f7fe fa3e 	bl	4055a0 <__aeabi_dcmpeq>
  407124:	2800      	cmp	r0, #0
  407126:	f000 8160 	beq.w	4073ea <_vfprintf_r+0xbce>
  40712a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40712c:	4a3a      	ldr	r2, [pc, #232]	; (407218 <_vfprintf_r+0x9fc>)
  40712e:	f8c8 2000 	str.w	r2, [r8]
  407132:	3301      	adds	r3, #1
  407134:	3401      	adds	r4, #1
  407136:	2201      	movs	r2, #1
  407138:	2b07      	cmp	r3, #7
  40713a:	9425      	str	r4, [sp, #148]	; 0x94
  40713c:	9324      	str	r3, [sp, #144]	; 0x90
  40713e:	f8c8 2004 	str.w	r2, [r8, #4]
  407142:	f300 83bf 	bgt.w	4078c4 <_vfprintf_r+0x10a8>
  407146:	f108 0808 	add.w	r8, r8, #8
  40714a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40714c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40714e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407150:	4293      	cmp	r3, r2
  407152:	db03      	blt.n	40715c <_vfprintf_r+0x940>
  407154:	9b06      	ldr	r3, [sp, #24]
  407156:	07df      	lsls	r7, r3, #31
  407158:	f57f ad65 	bpl.w	406c26 <_vfprintf_r+0x40a>
  40715c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40715e:	9914      	ldr	r1, [sp, #80]	; 0x50
  407160:	9a15      	ldr	r2, [sp, #84]	; 0x54
  407162:	f8c8 2000 	str.w	r2, [r8]
  407166:	3301      	adds	r3, #1
  407168:	440c      	add	r4, r1
  40716a:	2b07      	cmp	r3, #7
  40716c:	f8c8 1004 	str.w	r1, [r8, #4]
  407170:	9425      	str	r4, [sp, #148]	; 0x94
  407172:	9324      	str	r3, [sp, #144]	; 0x90
  407174:	f300 83f8 	bgt.w	407968 <_vfprintf_r+0x114c>
  407178:	f108 0808 	add.w	r8, r8, #8
  40717c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40717e:	1e5e      	subs	r6, r3, #1
  407180:	2e00      	cmp	r6, #0
  407182:	f77f ad50 	ble.w	406c26 <_vfprintf_r+0x40a>
  407186:	2e10      	cmp	r6, #16
  407188:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40718a:	4d24      	ldr	r5, [pc, #144]	; (40721c <_vfprintf_r+0xa00>)
  40718c:	f340 81dd 	ble.w	40754a <_vfprintf_r+0xd2e>
  407190:	2710      	movs	r7, #16
  407192:	f8dd a020 	ldr.w	sl, [sp, #32]
  407196:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40719a:	e005      	b.n	4071a8 <_vfprintf_r+0x98c>
  40719c:	f108 0808 	add.w	r8, r8, #8
  4071a0:	3e10      	subs	r6, #16
  4071a2:	2e10      	cmp	r6, #16
  4071a4:	f340 81d1 	ble.w	40754a <_vfprintf_r+0xd2e>
  4071a8:	3301      	adds	r3, #1
  4071aa:	3410      	adds	r4, #16
  4071ac:	2b07      	cmp	r3, #7
  4071ae:	9425      	str	r4, [sp, #148]	; 0x94
  4071b0:	9324      	str	r3, [sp, #144]	; 0x90
  4071b2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4071b6:	ddf1      	ble.n	40719c <_vfprintf_r+0x980>
  4071b8:	aa23      	add	r2, sp, #140	; 0x8c
  4071ba:	4659      	mov	r1, fp
  4071bc:	4650      	mov	r0, sl
  4071be:	f003 f8d7 	bl	40a370 <__sprint_r>
  4071c2:	2800      	cmp	r0, #0
  4071c4:	f040 83cd 	bne.w	407962 <_vfprintf_r+0x1146>
  4071c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4071ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4071cc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4071d0:	e7e6      	b.n	4071a0 <_vfprintf_r+0x984>
  4071d2:	46aa      	mov	sl, r5
  4071d4:	e78c      	b.n	4070f0 <_vfprintf_r+0x8d4>
  4071d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4071d8:	9a07      	ldr	r2, [sp, #28]
  4071da:	eba3 0a02 	sub.w	sl, r3, r2
  4071de:	f1ba 0f00 	cmp.w	sl, #0
  4071e2:	f77f acca 	ble.w	406b7a <_vfprintf_r+0x35e>
  4071e6:	f1ba 0f10 	cmp.w	sl, #16
  4071ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4071ec:	4d0b      	ldr	r5, [pc, #44]	; (40721c <_vfprintf_r+0xa00>)
  4071ee:	dd39      	ble.n	407264 <_vfprintf_r+0xa48>
  4071f0:	4642      	mov	r2, r8
  4071f2:	4621      	mov	r1, r4
  4071f4:	46b0      	mov	r8, r6
  4071f6:	f04f 0b10 	mov.w	fp, #16
  4071fa:	462e      	mov	r6, r5
  4071fc:	9c08      	ldr	r4, [sp, #32]
  4071fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407200:	e015      	b.n	40722e <_vfprintf_r+0xa12>
  407202:	bf00      	nop
  407204:	0040b490 	.word	0x0040b490
  407208:	0040b47c 	.word	0x0040b47c
  40720c:	7fefffff 	.word	0x7fefffff
  407210:	0040b470 	.word	0x0040b470
  407214:	0040b46c 	.word	0x0040b46c
  407218:	0040b4ac 	.word	0x0040b4ac
  40721c:	0040b4c0 	.word	0x0040b4c0
  407220:	f1aa 0a10 	sub.w	sl, sl, #16
  407224:	f1ba 0f10 	cmp.w	sl, #16
  407228:	f102 0208 	add.w	r2, r2, #8
  40722c:	dd16      	ble.n	40725c <_vfprintf_r+0xa40>
  40722e:	3301      	adds	r3, #1
  407230:	3110      	adds	r1, #16
  407232:	2b07      	cmp	r3, #7
  407234:	9125      	str	r1, [sp, #148]	; 0x94
  407236:	9324      	str	r3, [sp, #144]	; 0x90
  407238:	e882 0840 	stmia.w	r2, {r6, fp}
  40723c:	ddf0      	ble.n	407220 <_vfprintf_r+0xa04>
  40723e:	aa23      	add	r2, sp, #140	; 0x8c
  407240:	4629      	mov	r1, r5
  407242:	4620      	mov	r0, r4
  407244:	f003 f894 	bl	40a370 <__sprint_r>
  407248:	2800      	cmp	r0, #0
  40724a:	d1c2      	bne.n	4071d2 <_vfprintf_r+0x9b6>
  40724c:	f1aa 0a10 	sub.w	sl, sl, #16
  407250:	f1ba 0f10 	cmp.w	sl, #16
  407254:	9925      	ldr	r1, [sp, #148]	; 0x94
  407256:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407258:	aa30      	add	r2, sp, #192	; 0xc0
  40725a:	dce8      	bgt.n	40722e <_vfprintf_r+0xa12>
  40725c:	4635      	mov	r5, r6
  40725e:	460c      	mov	r4, r1
  407260:	4646      	mov	r6, r8
  407262:	4690      	mov	r8, r2
  407264:	3301      	adds	r3, #1
  407266:	4454      	add	r4, sl
  407268:	2b07      	cmp	r3, #7
  40726a:	9425      	str	r4, [sp, #148]	; 0x94
  40726c:	9324      	str	r3, [sp, #144]	; 0x90
  40726e:	e888 0420 	stmia.w	r8, {r5, sl}
  407272:	f300 8264 	bgt.w	40773e <_vfprintf_r+0xf22>
  407276:	f108 0808 	add.w	r8, r8, #8
  40727a:	e47e      	b.n	406b7a <_vfprintf_r+0x35e>
  40727c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40727e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  407280:	2b01      	cmp	r3, #1
  407282:	f340 81fd 	ble.w	407680 <_vfprintf_r+0xe64>
  407286:	3601      	adds	r6, #1
  407288:	3401      	adds	r4, #1
  40728a:	2301      	movs	r3, #1
  40728c:	2e07      	cmp	r6, #7
  40728e:	9425      	str	r4, [sp, #148]	; 0x94
  407290:	9624      	str	r6, [sp, #144]	; 0x90
  407292:	f8c8 7000 	str.w	r7, [r8]
  407296:	f8c8 3004 	str.w	r3, [r8, #4]
  40729a:	f300 820e 	bgt.w	4076ba <_vfprintf_r+0xe9e>
  40729e:	f108 0808 	add.w	r8, r8, #8
  4072a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4072a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4072a6:	f8c8 3000 	str.w	r3, [r8]
  4072aa:	3601      	adds	r6, #1
  4072ac:	4414      	add	r4, r2
  4072ae:	2e07      	cmp	r6, #7
  4072b0:	9425      	str	r4, [sp, #148]	; 0x94
  4072b2:	9624      	str	r6, [sp, #144]	; 0x90
  4072b4:	f8c8 2004 	str.w	r2, [r8, #4]
  4072b8:	f300 822e 	bgt.w	407718 <_vfprintf_r+0xefc>
  4072bc:	f108 0808 	add.w	r8, r8, #8
  4072c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4072c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4072c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4072c6:	9912      	ldr	r1, [sp, #72]	; 0x48
  4072c8:	f7fe f96a 	bl	4055a0 <__aeabi_dcmpeq>
  4072cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4072ce:	2800      	cmp	r0, #0
  4072d0:	f040 8106 	bne.w	4074e0 <_vfprintf_r+0xcc4>
  4072d4:	3b01      	subs	r3, #1
  4072d6:	3601      	adds	r6, #1
  4072d8:	3701      	adds	r7, #1
  4072da:	441c      	add	r4, r3
  4072dc:	2e07      	cmp	r6, #7
  4072de:	9624      	str	r6, [sp, #144]	; 0x90
  4072e0:	9425      	str	r4, [sp, #148]	; 0x94
  4072e2:	f8c8 7000 	str.w	r7, [r8]
  4072e6:	f8c8 3004 	str.w	r3, [r8, #4]
  4072ea:	f300 81d9 	bgt.w	4076a0 <_vfprintf_r+0xe84>
  4072ee:	f108 0808 	add.w	r8, r8, #8
  4072f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4072f4:	f8c8 2004 	str.w	r2, [r8, #4]
  4072f8:	3601      	adds	r6, #1
  4072fa:	4414      	add	r4, r2
  4072fc:	ab1f      	add	r3, sp, #124	; 0x7c
  4072fe:	2e07      	cmp	r6, #7
  407300:	9425      	str	r4, [sp, #148]	; 0x94
  407302:	9624      	str	r6, [sp, #144]	; 0x90
  407304:	f8c8 3000 	str.w	r3, [r8]
  407308:	f77f ac8b 	ble.w	406c22 <_vfprintf_r+0x406>
  40730c:	aa23      	add	r2, sp, #140	; 0x8c
  40730e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407310:	9808      	ldr	r0, [sp, #32]
  407312:	f003 f82d 	bl	40a370 <__sprint_r>
  407316:	b958      	cbnz	r0, 407330 <_vfprintf_r+0xb14>
  407318:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40731a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40731e:	e482      	b.n	406c26 <_vfprintf_r+0x40a>
  407320:	aa23      	add	r2, sp, #140	; 0x8c
  407322:	990a      	ldr	r1, [sp, #40]	; 0x28
  407324:	9808      	ldr	r0, [sp, #32]
  407326:	f003 f823 	bl	40a370 <__sprint_r>
  40732a:	2800      	cmp	r0, #0
  40732c:	f43f acc5 	beq.w	406cba <_vfprintf_r+0x49e>
  407330:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  407334:	e6dc      	b.n	4070f0 <_vfprintf_r+0x8d4>
  407336:	f8dd b018 	ldr.w	fp, [sp, #24]
  40733a:	2b01      	cmp	r3, #1
  40733c:	f000 8121 	beq.w	407582 <_vfprintf_r+0xd66>
  407340:	2b02      	cmp	r3, #2
  407342:	d127      	bne.n	407394 <_vfprintf_r+0xb78>
  407344:	f8cd b018 	str.w	fp, [sp, #24]
  407348:	2400      	movs	r4, #0
  40734a:	2500      	movs	r5, #0
  40734c:	e591      	b.n	406e72 <_vfprintf_r+0x656>
  40734e:	aa23      	add	r2, sp, #140	; 0x8c
  407350:	990a      	ldr	r1, [sp, #40]	; 0x28
  407352:	9808      	ldr	r0, [sp, #32]
  407354:	f003 f80c 	bl	40a370 <__sprint_r>
  407358:	2800      	cmp	r0, #0
  40735a:	d1e9      	bne.n	407330 <_vfprintf_r+0xb14>
  40735c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40735e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407362:	e44d      	b.n	406c00 <_vfprintf_r+0x3e4>
  407364:	aa23      	add	r2, sp, #140	; 0x8c
  407366:	990a      	ldr	r1, [sp, #40]	; 0x28
  407368:	9808      	ldr	r0, [sp, #32]
  40736a:	f003 f801 	bl	40a370 <__sprint_r>
  40736e:	2800      	cmp	r0, #0
  407370:	d1de      	bne.n	407330 <_vfprintf_r+0xb14>
  407372:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407374:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407378:	f7ff bbec 	b.w	406b54 <_vfprintf_r+0x338>
  40737c:	aa23      	add	r2, sp, #140	; 0x8c
  40737e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407380:	9808      	ldr	r0, [sp, #32]
  407382:	f002 fff5 	bl	40a370 <__sprint_r>
  407386:	2800      	cmp	r0, #0
  407388:	d1d2      	bne.n	407330 <_vfprintf_r+0xb14>
  40738a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40738c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407390:	f7ff bbf0 	b.w	406b74 <_vfprintf_r+0x358>
  407394:	f8cd b018 	str.w	fp, [sp, #24]
  407398:	2400      	movs	r4, #0
  40739a:	2500      	movs	r5, #0
  40739c:	a930      	add	r1, sp, #192	; 0xc0
  40739e:	e000      	b.n	4073a2 <_vfprintf_r+0xb86>
  4073a0:	4639      	mov	r1, r7
  4073a2:	08e2      	lsrs	r2, r4, #3
  4073a4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4073a8:	08e8      	lsrs	r0, r5, #3
  4073aa:	f004 0307 	and.w	r3, r4, #7
  4073ae:	4605      	mov	r5, r0
  4073b0:	4614      	mov	r4, r2
  4073b2:	3330      	adds	r3, #48	; 0x30
  4073b4:	ea54 0205 	orrs.w	r2, r4, r5
  4073b8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4073bc:	f101 37ff 	add.w	r7, r1, #4294967295
  4073c0:	d1ee      	bne.n	4073a0 <_vfprintf_r+0xb84>
  4073c2:	9a06      	ldr	r2, [sp, #24]
  4073c4:	07d2      	lsls	r2, r2, #31
  4073c6:	f57f ad64 	bpl.w	406e92 <_vfprintf_r+0x676>
  4073ca:	2b30      	cmp	r3, #48	; 0x30
  4073cc:	f43f ad61 	beq.w	406e92 <_vfprintf_r+0x676>
  4073d0:	2330      	movs	r3, #48	; 0x30
  4073d2:	3902      	subs	r1, #2
  4073d4:	f807 3c01 	strb.w	r3, [r7, #-1]
  4073d8:	ab30      	add	r3, sp, #192	; 0xc0
  4073da:	1a5b      	subs	r3, r3, r1
  4073dc:	930d      	str	r3, [sp, #52]	; 0x34
  4073de:	460f      	mov	r7, r1
  4073e0:	f7ff bb46 	b.w	406a70 <_vfprintf_r+0x254>
  4073e4:	2302      	movs	r3, #2
  4073e6:	f7ff bb25 	b.w	406a34 <_vfprintf_r+0x218>
  4073ea:	991d      	ldr	r1, [sp, #116]	; 0x74
  4073ec:	2900      	cmp	r1, #0
  4073ee:	f340 8274 	ble.w	4078da <_vfprintf_r+0x10be>
  4073f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4073f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4073f6:	4293      	cmp	r3, r2
  4073f8:	bfa8      	it	ge
  4073fa:	4613      	movge	r3, r2
  4073fc:	2b00      	cmp	r3, #0
  4073fe:	461e      	mov	r6, r3
  407400:	dd0d      	ble.n	40741e <_vfprintf_r+0xc02>
  407402:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407404:	f8c8 7000 	str.w	r7, [r8]
  407408:	3301      	adds	r3, #1
  40740a:	4434      	add	r4, r6
  40740c:	2b07      	cmp	r3, #7
  40740e:	9425      	str	r4, [sp, #148]	; 0x94
  407410:	f8c8 6004 	str.w	r6, [r8, #4]
  407414:	9324      	str	r3, [sp, #144]	; 0x90
  407416:	f300 8324 	bgt.w	407a62 <_vfprintf_r+0x1246>
  40741a:	f108 0808 	add.w	r8, r8, #8
  40741e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407420:	2e00      	cmp	r6, #0
  407422:	bfa8      	it	ge
  407424:	1b9b      	subge	r3, r3, r6
  407426:	2b00      	cmp	r3, #0
  407428:	461e      	mov	r6, r3
  40742a:	f340 80d0 	ble.w	4075ce <_vfprintf_r+0xdb2>
  40742e:	2e10      	cmp	r6, #16
  407430:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407432:	4dc0      	ldr	r5, [pc, #768]	; (407734 <_vfprintf_r+0xf18>)
  407434:	f340 80b7 	ble.w	4075a6 <_vfprintf_r+0xd8a>
  407438:	4622      	mov	r2, r4
  40743a:	f04f 0a10 	mov.w	sl, #16
  40743e:	f8dd b020 	ldr.w	fp, [sp, #32]
  407442:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407444:	e005      	b.n	407452 <_vfprintf_r+0xc36>
  407446:	f108 0808 	add.w	r8, r8, #8
  40744a:	3e10      	subs	r6, #16
  40744c:	2e10      	cmp	r6, #16
  40744e:	f340 80a9 	ble.w	4075a4 <_vfprintf_r+0xd88>
  407452:	3301      	adds	r3, #1
  407454:	3210      	adds	r2, #16
  407456:	2b07      	cmp	r3, #7
  407458:	9225      	str	r2, [sp, #148]	; 0x94
  40745a:	9324      	str	r3, [sp, #144]	; 0x90
  40745c:	e888 0420 	stmia.w	r8, {r5, sl}
  407460:	ddf1      	ble.n	407446 <_vfprintf_r+0xc2a>
  407462:	aa23      	add	r2, sp, #140	; 0x8c
  407464:	4621      	mov	r1, r4
  407466:	4658      	mov	r0, fp
  407468:	f002 ff82 	bl	40a370 <__sprint_r>
  40746c:	2800      	cmp	r0, #0
  40746e:	f040 8324 	bne.w	407aba <_vfprintf_r+0x129e>
  407472:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407474:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407476:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40747a:	e7e6      	b.n	40744a <_vfprintf_r+0xc2e>
  40747c:	2d00      	cmp	r5, #0
  40747e:	bf08      	it	eq
  407480:	2c0a      	cmpeq	r4, #10
  407482:	d37c      	bcc.n	40757e <_vfprintf_r+0xd62>
  407484:	af30      	add	r7, sp, #192	; 0xc0
  407486:	4620      	mov	r0, r4
  407488:	4629      	mov	r1, r5
  40748a:	220a      	movs	r2, #10
  40748c:	2300      	movs	r3, #0
  40748e:	f003 fa47 	bl	40a920 <__aeabi_uldivmod>
  407492:	3230      	adds	r2, #48	; 0x30
  407494:	f807 2d01 	strb.w	r2, [r7, #-1]!
  407498:	4620      	mov	r0, r4
  40749a:	4629      	mov	r1, r5
  40749c:	2300      	movs	r3, #0
  40749e:	220a      	movs	r2, #10
  4074a0:	f003 fa3e 	bl	40a920 <__aeabi_uldivmod>
  4074a4:	4604      	mov	r4, r0
  4074a6:	460d      	mov	r5, r1
  4074a8:	ea54 0305 	orrs.w	r3, r4, r5
  4074ac:	d1eb      	bne.n	407486 <_vfprintf_r+0xc6a>
  4074ae:	ab30      	add	r3, sp, #192	; 0xc0
  4074b0:	1bdb      	subs	r3, r3, r7
  4074b2:	930d      	str	r3, [sp, #52]	; 0x34
  4074b4:	f7ff badc 	b.w	406a70 <_vfprintf_r+0x254>
  4074b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4074ba:	930d      	str	r3, [sp, #52]	; 0x34
  4074bc:	af30      	add	r7, sp, #192	; 0xc0
  4074be:	f7ff bad7 	b.w	406a70 <_vfprintf_r+0x254>
  4074c2:	aa23      	add	r2, sp, #140	; 0x8c
  4074c4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4074c6:	9808      	ldr	r0, [sp, #32]
  4074c8:	f002 ff52 	bl	40a370 <__sprint_r>
  4074cc:	2800      	cmp	r0, #0
  4074ce:	f47f af2f 	bne.w	407330 <_vfprintf_r+0xb14>
  4074d2:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4074d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4074d8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4074dc:	f7ff bb28 	b.w	406b30 <_vfprintf_r+0x314>
  4074e0:	1e5f      	subs	r7, r3, #1
  4074e2:	2f00      	cmp	r7, #0
  4074e4:	f77f af05 	ble.w	4072f2 <_vfprintf_r+0xad6>
  4074e8:	2f10      	cmp	r7, #16
  4074ea:	4d92      	ldr	r5, [pc, #584]	; (407734 <_vfprintf_r+0xf18>)
  4074ec:	f340 810a 	ble.w	407704 <_vfprintf_r+0xee8>
  4074f0:	f04f 0a10 	mov.w	sl, #16
  4074f4:	f8dd b020 	ldr.w	fp, [sp, #32]
  4074f8:	e005      	b.n	407506 <_vfprintf_r+0xcea>
  4074fa:	f108 0808 	add.w	r8, r8, #8
  4074fe:	3f10      	subs	r7, #16
  407500:	2f10      	cmp	r7, #16
  407502:	f340 80ff 	ble.w	407704 <_vfprintf_r+0xee8>
  407506:	3601      	adds	r6, #1
  407508:	3410      	adds	r4, #16
  40750a:	2e07      	cmp	r6, #7
  40750c:	9425      	str	r4, [sp, #148]	; 0x94
  40750e:	9624      	str	r6, [sp, #144]	; 0x90
  407510:	e888 0420 	stmia.w	r8, {r5, sl}
  407514:	ddf1      	ble.n	4074fa <_vfprintf_r+0xcde>
  407516:	aa23      	add	r2, sp, #140	; 0x8c
  407518:	990a      	ldr	r1, [sp, #40]	; 0x28
  40751a:	4658      	mov	r0, fp
  40751c:	f002 ff28 	bl	40a370 <__sprint_r>
  407520:	2800      	cmp	r0, #0
  407522:	f47f af05 	bne.w	407330 <_vfprintf_r+0xb14>
  407526:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407528:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40752a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40752e:	e7e6      	b.n	4074fe <_vfprintf_r+0xce2>
  407530:	990e      	ldr	r1, [sp, #56]	; 0x38
  407532:	460a      	mov	r2, r1
  407534:	3204      	adds	r2, #4
  407536:	680c      	ldr	r4, [r1, #0]
  407538:	920e      	str	r2, [sp, #56]	; 0x38
  40753a:	2500      	movs	r5, #0
  40753c:	f7ff ba7a 	b.w	406a34 <_vfprintf_r+0x218>
  407540:	681c      	ldr	r4, [r3, #0]
  407542:	3304      	adds	r3, #4
  407544:	930e      	str	r3, [sp, #56]	; 0x38
  407546:	2500      	movs	r5, #0
  407548:	e426      	b.n	406d98 <_vfprintf_r+0x57c>
  40754a:	3301      	adds	r3, #1
  40754c:	4434      	add	r4, r6
  40754e:	2b07      	cmp	r3, #7
  407550:	9425      	str	r4, [sp, #148]	; 0x94
  407552:	9324      	str	r3, [sp, #144]	; 0x90
  407554:	e888 0060 	stmia.w	r8, {r5, r6}
  407558:	f77f ab63 	ble.w	406c22 <_vfprintf_r+0x406>
  40755c:	e6d6      	b.n	40730c <_vfprintf_r+0xaf0>
  40755e:	3204      	adds	r2, #4
  407560:	681c      	ldr	r4, [r3, #0]
  407562:	920e      	str	r2, [sp, #56]	; 0x38
  407564:	2301      	movs	r3, #1
  407566:	2500      	movs	r5, #0
  407568:	f7ff ba64 	b.w	406a34 <_vfprintf_r+0x218>
  40756c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40756e:	6814      	ldr	r4, [r2, #0]
  407570:	4613      	mov	r3, r2
  407572:	3304      	adds	r3, #4
  407574:	17e5      	asrs	r5, r4, #31
  407576:	930e      	str	r3, [sp, #56]	; 0x38
  407578:	4622      	mov	r2, r4
  40757a:	462b      	mov	r3, r5
  40757c:	e460      	b.n	406e40 <_vfprintf_r+0x624>
  40757e:	f8dd b018 	ldr.w	fp, [sp, #24]
  407582:	f8cd b018 	str.w	fp, [sp, #24]
  407586:	af40      	add	r7, sp, #256	; 0x100
  407588:	3430      	adds	r4, #48	; 0x30
  40758a:	2301      	movs	r3, #1
  40758c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  407590:	930d      	str	r3, [sp, #52]	; 0x34
  407592:	f7ff ba6d 	b.w	406a70 <_vfprintf_r+0x254>
  407596:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40759a:	f002 f895 	bl	4096c8 <__retarget_lock_release_recursive>
  40759e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4075a2:	e5af      	b.n	407104 <_vfprintf_r+0x8e8>
  4075a4:	4614      	mov	r4, r2
  4075a6:	3301      	adds	r3, #1
  4075a8:	4434      	add	r4, r6
  4075aa:	2b07      	cmp	r3, #7
  4075ac:	9425      	str	r4, [sp, #148]	; 0x94
  4075ae:	9324      	str	r3, [sp, #144]	; 0x90
  4075b0:	e888 0060 	stmia.w	r8, {r5, r6}
  4075b4:	f340 816d 	ble.w	407892 <_vfprintf_r+0x1076>
  4075b8:	aa23      	add	r2, sp, #140	; 0x8c
  4075ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4075bc:	9808      	ldr	r0, [sp, #32]
  4075be:	f002 fed7 	bl	40a370 <__sprint_r>
  4075c2:	2800      	cmp	r0, #0
  4075c4:	f47f aeb4 	bne.w	407330 <_vfprintf_r+0xb14>
  4075c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4075ca:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4075ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4075d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4075d2:	4293      	cmp	r3, r2
  4075d4:	f280 8158 	bge.w	407888 <_vfprintf_r+0x106c>
  4075d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4075da:	9814      	ldr	r0, [sp, #80]	; 0x50
  4075dc:	9915      	ldr	r1, [sp, #84]	; 0x54
  4075de:	f8c8 1000 	str.w	r1, [r8]
  4075e2:	3201      	adds	r2, #1
  4075e4:	4404      	add	r4, r0
  4075e6:	2a07      	cmp	r2, #7
  4075e8:	9425      	str	r4, [sp, #148]	; 0x94
  4075ea:	f8c8 0004 	str.w	r0, [r8, #4]
  4075ee:	9224      	str	r2, [sp, #144]	; 0x90
  4075f0:	f300 8152 	bgt.w	407898 <_vfprintf_r+0x107c>
  4075f4:	f108 0808 	add.w	r8, r8, #8
  4075f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4075fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4075fc:	1ad3      	subs	r3, r2, r3
  4075fe:	1a56      	subs	r6, r2, r1
  407600:	429e      	cmp	r6, r3
  407602:	bfa8      	it	ge
  407604:	461e      	movge	r6, r3
  407606:	2e00      	cmp	r6, #0
  407608:	dd0e      	ble.n	407628 <_vfprintf_r+0xe0c>
  40760a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40760c:	f8c8 6004 	str.w	r6, [r8, #4]
  407610:	3201      	adds	r2, #1
  407612:	440f      	add	r7, r1
  407614:	4434      	add	r4, r6
  407616:	2a07      	cmp	r2, #7
  407618:	f8c8 7000 	str.w	r7, [r8]
  40761c:	9425      	str	r4, [sp, #148]	; 0x94
  40761e:	9224      	str	r2, [sp, #144]	; 0x90
  407620:	f300 823c 	bgt.w	407a9c <_vfprintf_r+0x1280>
  407624:	f108 0808 	add.w	r8, r8, #8
  407628:	2e00      	cmp	r6, #0
  40762a:	bfac      	ite	ge
  40762c:	1b9e      	subge	r6, r3, r6
  40762e:	461e      	movlt	r6, r3
  407630:	2e00      	cmp	r6, #0
  407632:	f77f aaf8 	ble.w	406c26 <_vfprintf_r+0x40a>
  407636:	2e10      	cmp	r6, #16
  407638:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40763a:	4d3e      	ldr	r5, [pc, #248]	; (407734 <_vfprintf_r+0xf18>)
  40763c:	dd85      	ble.n	40754a <_vfprintf_r+0xd2e>
  40763e:	2710      	movs	r7, #16
  407640:	f8dd a020 	ldr.w	sl, [sp, #32]
  407644:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407648:	e005      	b.n	407656 <_vfprintf_r+0xe3a>
  40764a:	f108 0808 	add.w	r8, r8, #8
  40764e:	3e10      	subs	r6, #16
  407650:	2e10      	cmp	r6, #16
  407652:	f77f af7a 	ble.w	40754a <_vfprintf_r+0xd2e>
  407656:	3301      	adds	r3, #1
  407658:	3410      	adds	r4, #16
  40765a:	2b07      	cmp	r3, #7
  40765c:	9425      	str	r4, [sp, #148]	; 0x94
  40765e:	9324      	str	r3, [sp, #144]	; 0x90
  407660:	e888 00a0 	stmia.w	r8, {r5, r7}
  407664:	ddf1      	ble.n	40764a <_vfprintf_r+0xe2e>
  407666:	aa23      	add	r2, sp, #140	; 0x8c
  407668:	4659      	mov	r1, fp
  40766a:	4650      	mov	r0, sl
  40766c:	f002 fe80 	bl	40a370 <__sprint_r>
  407670:	2800      	cmp	r0, #0
  407672:	f040 8176 	bne.w	407962 <_vfprintf_r+0x1146>
  407676:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407678:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40767a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40767e:	e7e6      	b.n	40764e <_vfprintf_r+0xe32>
  407680:	9b06      	ldr	r3, [sp, #24]
  407682:	07d8      	lsls	r0, r3, #31
  407684:	f53f adff 	bmi.w	407286 <_vfprintf_r+0xa6a>
  407688:	3601      	adds	r6, #1
  40768a:	3401      	adds	r4, #1
  40768c:	2301      	movs	r3, #1
  40768e:	2e07      	cmp	r6, #7
  407690:	9425      	str	r4, [sp, #148]	; 0x94
  407692:	9624      	str	r6, [sp, #144]	; 0x90
  407694:	f8c8 7000 	str.w	r7, [r8]
  407698:	f8c8 3004 	str.w	r3, [r8, #4]
  40769c:	f77f ae27 	ble.w	4072ee <_vfprintf_r+0xad2>
  4076a0:	aa23      	add	r2, sp, #140	; 0x8c
  4076a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4076a4:	9808      	ldr	r0, [sp, #32]
  4076a6:	f002 fe63 	bl	40a370 <__sprint_r>
  4076aa:	2800      	cmp	r0, #0
  4076ac:	f47f ae40 	bne.w	407330 <_vfprintf_r+0xb14>
  4076b0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4076b2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4076b4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4076b8:	e61b      	b.n	4072f2 <_vfprintf_r+0xad6>
  4076ba:	aa23      	add	r2, sp, #140	; 0x8c
  4076bc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4076be:	9808      	ldr	r0, [sp, #32]
  4076c0:	f002 fe56 	bl	40a370 <__sprint_r>
  4076c4:	2800      	cmp	r0, #0
  4076c6:	f47f ae33 	bne.w	407330 <_vfprintf_r+0xb14>
  4076ca:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4076cc:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4076ce:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4076d2:	e5e6      	b.n	4072a2 <_vfprintf_r+0xa86>
  4076d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4076d6:	3507      	adds	r5, #7
  4076d8:	f025 0507 	bic.w	r5, r5, #7
  4076dc:	e9d5 2300 	ldrd	r2, r3, [r5]
  4076e0:	f105 0108 	add.w	r1, r5, #8
  4076e4:	910e      	str	r1, [sp, #56]	; 0x38
  4076e6:	4614      	mov	r4, r2
  4076e8:	461d      	mov	r5, r3
  4076ea:	f7ff bba9 	b.w	406e40 <_vfprintf_r+0x624>
  4076ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4076f0:	3507      	adds	r5, #7
  4076f2:	f025 0307 	bic.w	r3, r5, #7
  4076f6:	f103 0208 	add.w	r2, r3, #8
  4076fa:	920e      	str	r2, [sp, #56]	; 0x38
  4076fc:	e9d3 4500 	ldrd	r4, r5, [r3]
  407700:	f7ff bb4a 	b.w	406d98 <_vfprintf_r+0x57c>
  407704:	3601      	adds	r6, #1
  407706:	443c      	add	r4, r7
  407708:	2e07      	cmp	r6, #7
  40770a:	9425      	str	r4, [sp, #148]	; 0x94
  40770c:	9624      	str	r6, [sp, #144]	; 0x90
  40770e:	e888 00a0 	stmia.w	r8, {r5, r7}
  407712:	f77f adec 	ble.w	4072ee <_vfprintf_r+0xad2>
  407716:	e7c3      	b.n	4076a0 <_vfprintf_r+0xe84>
  407718:	aa23      	add	r2, sp, #140	; 0x8c
  40771a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40771c:	9808      	ldr	r0, [sp, #32]
  40771e:	f002 fe27 	bl	40a370 <__sprint_r>
  407722:	2800      	cmp	r0, #0
  407724:	f47f ae04 	bne.w	407330 <_vfprintf_r+0xb14>
  407728:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40772a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40772c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407730:	e5c6      	b.n	4072c0 <_vfprintf_r+0xaa4>
  407732:	bf00      	nop
  407734:	0040b4c0 	.word	0x0040b4c0
  407738:	af30      	add	r7, sp, #192	; 0xc0
  40773a:	f7ff b999 	b.w	406a70 <_vfprintf_r+0x254>
  40773e:	aa23      	add	r2, sp, #140	; 0x8c
  407740:	990a      	ldr	r1, [sp, #40]	; 0x28
  407742:	9808      	ldr	r0, [sp, #32]
  407744:	f002 fe14 	bl	40a370 <__sprint_r>
  407748:	2800      	cmp	r0, #0
  40774a:	f47f adf1 	bne.w	407330 <_vfprintf_r+0xb14>
  40774e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407750:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407754:	f7ff ba11 	b.w	406b7a <_vfprintf_r+0x35e>
  407758:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40775c:	4264      	negs	r4, r4
  40775e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407762:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  407766:	2301      	movs	r3, #1
  407768:	f7ff b968 	b.w	406a3c <_vfprintf_r+0x220>
  40776c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40776e:	4622      	mov	r2, r4
  407770:	4620      	mov	r0, r4
  407772:	9c12      	ldr	r4, [sp, #72]	; 0x48
  407774:	4623      	mov	r3, r4
  407776:	4621      	mov	r1, r4
  407778:	f7fd ff44 	bl	405604 <__aeabi_dcmpun>
  40777c:	2800      	cmp	r0, #0
  40777e:	f040 828c 	bne.w	407c9a <_vfprintf_r+0x147e>
  407782:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407784:	3301      	adds	r3, #1
  407786:	f026 0320 	bic.w	r3, r6, #32
  40778a:	930d      	str	r3, [sp, #52]	; 0x34
  40778c:	f000 8091 	beq.w	4078b2 <_vfprintf_r+0x1096>
  407790:	2b47      	cmp	r3, #71	; 0x47
  407792:	d104      	bne.n	40779e <_vfprintf_r+0xf82>
  407794:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407796:	2b00      	cmp	r3, #0
  407798:	bf08      	it	eq
  40779a:	2301      	moveq	r3, #1
  40779c:	9309      	str	r3, [sp, #36]	; 0x24
  40779e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4077a2:	9306      	str	r3, [sp, #24]
  4077a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4077a6:	f1b3 0a00 	subs.w	sl, r3, #0
  4077aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4077ac:	9307      	str	r3, [sp, #28]
  4077ae:	bfbb      	ittet	lt
  4077b0:	4653      	movlt	r3, sl
  4077b2:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  4077b6:	2300      	movge	r3, #0
  4077b8:	232d      	movlt	r3, #45	; 0x2d
  4077ba:	2e66      	cmp	r6, #102	; 0x66
  4077bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4077be:	f000 817f 	beq.w	407ac0 <_vfprintf_r+0x12a4>
  4077c2:	2e46      	cmp	r6, #70	; 0x46
  4077c4:	f000 81d4 	beq.w	407b70 <_vfprintf_r+0x1354>
  4077c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4077ca:	9a07      	ldr	r2, [sp, #28]
  4077cc:	2b45      	cmp	r3, #69	; 0x45
  4077ce:	bf0c      	ite	eq
  4077d0:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  4077d2:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  4077d4:	a821      	add	r0, sp, #132	; 0x84
  4077d6:	a91e      	add	r1, sp, #120	; 0x78
  4077d8:	bf08      	it	eq
  4077da:	1c5d      	addeq	r5, r3, #1
  4077dc:	9004      	str	r0, [sp, #16]
  4077de:	9103      	str	r1, [sp, #12]
  4077e0:	a81d      	add	r0, sp, #116	; 0x74
  4077e2:	2102      	movs	r1, #2
  4077e4:	9002      	str	r0, [sp, #8]
  4077e6:	4653      	mov	r3, sl
  4077e8:	9501      	str	r5, [sp, #4]
  4077ea:	9100      	str	r1, [sp, #0]
  4077ec:	9808      	ldr	r0, [sp, #32]
  4077ee:	f000 fc0b 	bl	408008 <_dtoa_r>
  4077f2:	2e67      	cmp	r6, #103	; 0x67
  4077f4:	4607      	mov	r7, r0
  4077f6:	f040 81af 	bne.w	407b58 <_vfprintf_r+0x133c>
  4077fa:	f01b 0f01 	tst.w	fp, #1
  4077fe:	f000 8213 	beq.w	407c28 <_vfprintf_r+0x140c>
  407802:	197c      	adds	r4, r7, r5
  407804:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407806:	9807      	ldr	r0, [sp, #28]
  407808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40780a:	4651      	mov	r1, sl
  40780c:	f7fd fec8 	bl	4055a0 <__aeabi_dcmpeq>
  407810:	2800      	cmp	r0, #0
  407812:	f040 8132 	bne.w	407a7a <_vfprintf_r+0x125e>
  407816:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407818:	42a3      	cmp	r3, r4
  40781a:	d206      	bcs.n	40782a <_vfprintf_r+0x100e>
  40781c:	2130      	movs	r1, #48	; 0x30
  40781e:	1c5a      	adds	r2, r3, #1
  407820:	9221      	str	r2, [sp, #132]	; 0x84
  407822:	7019      	strb	r1, [r3, #0]
  407824:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407826:	429c      	cmp	r4, r3
  407828:	d8f9      	bhi.n	40781e <_vfprintf_r+0x1002>
  40782a:	1bdb      	subs	r3, r3, r7
  40782c:	9311      	str	r3, [sp, #68]	; 0x44
  40782e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407830:	2b47      	cmp	r3, #71	; 0x47
  407832:	f000 80b9 	beq.w	4079a8 <_vfprintf_r+0x118c>
  407836:	2e65      	cmp	r6, #101	; 0x65
  407838:	f340 8276 	ble.w	407d28 <_vfprintf_r+0x150c>
  40783c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40783e:	9310      	str	r3, [sp, #64]	; 0x40
  407840:	2e66      	cmp	r6, #102	; 0x66
  407842:	f000 8162 	beq.w	407b0a <_vfprintf_r+0x12ee>
  407846:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407848:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40784a:	4619      	mov	r1, r3
  40784c:	4291      	cmp	r1, r2
  40784e:	f300 814f 	bgt.w	407af0 <_vfprintf_r+0x12d4>
  407852:	f01b 0f01 	tst.w	fp, #1
  407856:	f040 8209 	bne.w	407c6c <_vfprintf_r+0x1450>
  40785a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40785e:	9307      	str	r3, [sp, #28]
  407860:	920d      	str	r2, [sp, #52]	; 0x34
  407862:	2667      	movs	r6, #103	; 0x67
  407864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407866:	2b00      	cmp	r3, #0
  407868:	f040 8096 	bne.w	407998 <_vfprintf_r+0x117c>
  40786c:	9309      	str	r3, [sp, #36]	; 0x24
  40786e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407872:	f7ff b905 	b.w	406a80 <_vfprintf_r+0x264>
  407876:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40787a:	f001 ff25 	bl	4096c8 <__retarget_lock_release_recursive>
  40787e:	f04f 33ff 	mov.w	r3, #4294967295
  407882:	930b      	str	r3, [sp, #44]	; 0x2c
  407884:	f7ff ba30 	b.w	406ce8 <_vfprintf_r+0x4cc>
  407888:	9a06      	ldr	r2, [sp, #24]
  40788a:	07d5      	lsls	r5, r2, #31
  40788c:	f57f aeb4 	bpl.w	4075f8 <_vfprintf_r+0xddc>
  407890:	e6a2      	b.n	4075d8 <_vfprintf_r+0xdbc>
  407892:	f108 0808 	add.w	r8, r8, #8
  407896:	e69a      	b.n	4075ce <_vfprintf_r+0xdb2>
  407898:	aa23      	add	r2, sp, #140	; 0x8c
  40789a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40789c:	9808      	ldr	r0, [sp, #32]
  40789e:	f002 fd67 	bl	40a370 <__sprint_r>
  4078a2:	2800      	cmp	r0, #0
  4078a4:	f47f ad44 	bne.w	407330 <_vfprintf_r+0xb14>
  4078a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4078aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4078ac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4078b0:	e6a2      	b.n	4075f8 <_vfprintf_r+0xddc>
  4078b2:	2306      	movs	r3, #6
  4078b4:	9309      	str	r3, [sp, #36]	; 0x24
  4078b6:	e772      	b.n	40779e <_vfprintf_r+0xf82>
  4078b8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4078bc:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4078c0:	f7ff bbc7 	b.w	407052 <_vfprintf_r+0x836>
  4078c4:	aa23      	add	r2, sp, #140	; 0x8c
  4078c6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4078c8:	9808      	ldr	r0, [sp, #32]
  4078ca:	f002 fd51 	bl	40a370 <__sprint_r>
  4078ce:	2800      	cmp	r0, #0
  4078d0:	f47f ad2e 	bne.w	407330 <_vfprintf_r+0xb14>
  4078d4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4078d8:	e437      	b.n	40714a <_vfprintf_r+0x92e>
  4078da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4078dc:	4ab4      	ldr	r2, [pc, #720]	; (407bb0 <_vfprintf_r+0x1394>)
  4078de:	f8c8 2000 	str.w	r2, [r8]
  4078e2:	3301      	adds	r3, #1
  4078e4:	3401      	adds	r4, #1
  4078e6:	2201      	movs	r2, #1
  4078e8:	2b07      	cmp	r3, #7
  4078ea:	9425      	str	r4, [sp, #148]	; 0x94
  4078ec:	9324      	str	r3, [sp, #144]	; 0x90
  4078ee:	f8c8 2004 	str.w	r2, [r8, #4]
  4078f2:	f300 8124 	bgt.w	407b3e <_vfprintf_r+0x1322>
  4078f6:	f108 0808 	add.w	r8, r8, #8
  4078fa:	b929      	cbnz	r1, 407908 <_vfprintf_r+0x10ec>
  4078fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4078fe:	b91b      	cbnz	r3, 407908 <_vfprintf_r+0x10ec>
  407900:	9b06      	ldr	r3, [sp, #24]
  407902:	07de      	lsls	r6, r3, #31
  407904:	f57f a98f 	bpl.w	406c26 <_vfprintf_r+0x40a>
  407908:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40790a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40790c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40790e:	f8c8 2000 	str.w	r2, [r8]
  407912:	3301      	adds	r3, #1
  407914:	4602      	mov	r2, r0
  407916:	4422      	add	r2, r4
  407918:	2b07      	cmp	r3, #7
  40791a:	9225      	str	r2, [sp, #148]	; 0x94
  40791c:	f8c8 0004 	str.w	r0, [r8, #4]
  407920:	9324      	str	r3, [sp, #144]	; 0x90
  407922:	f300 8169 	bgt.w	407bf8 <_vfprintf_r+0x13dc>
  407926:	f108 0808 	add.w	r8, r8, #8
  40792a:	2900      	cmp	r1, #0
  40792c:	f2c0 8136 	blt.w	407b9c <_vfprintf_r+0x1380>
  407930:	9911      	ldr	r1, [sp, #68]	; 0x44
  407932:	f8c8 7000 	str.w	r7, [r8]
  407936:	3301      	adds	r3, #1
  407938:	188c      	adds	r4, r1, r2
  40793a:	2b07      	cmp	r3, #7
  40793c:	9425      	str	r4, [sp, #148]	; 0x94
  40793e:	9324      	str	r3, [sp, #144]	; 0x90
  407940:	f8c8 1004 	str.w	r1, [r8, #4]
  407944:	f77f a96d 	ble.w	406c22 <_vfprintf_r+0x406>
  407948:	e4e0      	b.n	40730c <_vfprintf_r+0xaf0>
  40794a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40794c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40794e:	6813      	ldr	r3, [r2, #0]
  407950:	17cd      	asrs	r5, r1, #31
  407952:	4608      	mov	r0, r1
  407954:	3204      	adds	r2, #4
  407956:	4629      	mov	r1, r5
  407958:	920e      	str	r2, [sp, #56]	; 0x38
  40795a:	e9c3 0100 	strd	r0, r1, [r3]
  40795e:	f7fe bfa9 	b.w	4068b4 <_vfprintf_r+0x98>
  407962:	46da      	mov	sl, fp
  407964:	f7ff bbc4 	b.w	4070f0 <_vfprintf_r+0x8d4>
  407968:	aa23      	add	r2, sp, #140	; 0x8c
  40796a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40796c:	9808      	ldr	r0, [sp, #32]
  40796e:	f002 fcff 	bl	40a370 <__sprint_r>
  407972:	2800      	cmp	r0, #0
  407974:	f47f acdc 	bne.w	407330 <_vfprintf_r+0xb14>
  407978:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40797a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40797e:	f7ff bbfd 	b.w	40717c <_vfprintf_r+0x960>
  407982:	4638      	mov	r0, r7
  407984:	9409      	str	r4, [sp, #36]	; 0x24
  407986:	f7fe fedb 	bl	406740 <strlen>
  40798a:	950e      	str	r5, [sp, #56]	; 0x38
  40798c:	900d      	str	r0, [sp, #52]	; 0x34
  40798e:	f8cd b018 	str.w	fp, [sp, #24]
  407992:	4603      	mov	r3, r0
  407994:	f7ff ba36 	b.w	406e04 <_vfprintf_r+0x5e8>
  407998:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40799c:	2300      	movs	r3, #0
  40799e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4079a2:	9309      	str	r3, [sp, #36]	; 0x24
  4079a4:	f7ff b86f 	b.w	406a86 <_vfprintf_r+0x26a>
  4079a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4079aa:	9310      	str	r3, [sp, #64]	; 0x40
  4079ac:	461a      	mov	r2, r3
  4079ae:	3303      	adds	r3, #3
  4079b0:	db04      	blt.n	4079bc <_vfprintf_r+0x11a0>
  4079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4079b4:	4619      	mov	r1, r3
  4079b6:	4291      	cmp	r1, r2
  4079b8:	f6bf af45 	bge.w	407846 <_vfprintf_r+0x102a>
  4079bc:	3e02      	subs	r6, #2
  4079be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4079c0:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4079c4:	3b01      	subs	r3, #1
  4079c6:	2b00      	cmp	r3, #0
  4079c8:	931d      	str	r3, [sp, #116]	; 0x74
  4079ca:	bfbd      	ittte	lt
  4079cc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  4079ce:	f1c3 0301 	rsblt	r3, r3, #1
  4079d2:	222d      	movlt	r2, #45	; 0x2d
  4079d4:	222b      	movge	r2, #43	; 0x2b
  4079d6:	2b09      	cmp	r3, #9
  4079d8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4079dc:	f340 813e 	ble.w	407c5c <_vfprintf_r+0x1440>
  4079e0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  4079e4:	4620      	mov	r0, r4
  4079e6:	4d73      	ldr	r5, [pc, #460]	; (407bb4 <_vfprintf_r+0x1398>)
  4079e8:	e000      	b.n	4079ec <_vfprintf_r+0x11d0>
  4079ea:	4610      	mov	r0, r2
  4079ec:	fb85 1203 	smull	r1, r2, r5, r3
  4079f0:	17d9      	asrs	r1, r3, #31
  4079f2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4079f6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4079fa:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4079fe:	3230      	adds	r2, #48	; 0x30
  407a00:	2909      	cmp	r1, #9
  407a02:	f800 2c01 	strb.w	r2, [r0, #-1]
  407a06:	460b      	mov	r3, r1
  407a08:	f100 32ff 	add.w	r2, r0, #4294967295
  407a0c:	dced      	bgt.n	4079ea <_vfprintf_r+0x11ce>
  407a0e:	3330      	adds	r3, #48	; 0x30
  407a10:	3802      	subs	r0, #2
  407a12:	b2d9      	uxtb	r1, r3
  407a14:	4284      	cmp	r4, r0
  407a16:	f802 1c01 	strb.w	r1, [r2, #-1]
  407a1a:	f240 8190 	bls.w	407d3e <_vfprintf_r+0x1522>
  407a1e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  407a22:	4613      	mov	r3, r2
  407a24:	e001      	b.n	407a2a <_vfprintf_r+0x120e>
  407a26:	f813 1b01 	ldrb.w	r1, [r3], #1
  407a2a:	f800 1b01 	strb.w	r1, [r0], #1
  407a2e:	42a3      	cmp	r3, r4
  407a30:	d1f9      	bne.n	407a26 <_vfprintf_r+0x120a>
  407a32:	3301      	adds	r3, #1
  407a34:	1a9b      	subs	r3, r3, r2
  407a36:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  407a3a:	4413      	add	r3, r2
  407a3c:	aa1f      	add	r2, sp, #124	; 0x7c
  407a3e:	1a9b      	subs	r3, r3, r2
  407a40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407a42:	9319      	str	r3, [sp, #100]	; 0x64
  407a44:	2a01      	cmp	r2, #1
  407a46:	4413      	add	r3, r2
  407a48:	930d      	str	r3, [sp, #52]	; 0x34
  407a4a:	f340 8145 	ble.w	407cd8 <_vfprintf_r+0x14bc>
  407a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407a50:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407a52:	4413      	add	r3, r2
  407a54:	930d      	str	r3, [sp, #52]	; 0x34
  407a56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407a5a:	9307      	str	r3, [sp, #28]
  407a5c:	2300      	movs	r3, #0
  407a5e:	9310      	str	r3, [sp, #64]	; 0x40
  407a60:	e700      	b.n	407864 <_vfprintf_r+0x1048>
  407a62:	aa23      	add	r2, sp, #140	; 0x8c
  407a64:	990a      	ldr	r1, [sp, #40]	; 0x28
  407a66:	9808      	ldr	r0, [sp, #32]
  407a68:	f002 fc82 	bl	40a370 <__sprint_r>
  407a6c:	2800      	cmp	r0, #0
  407a6e:	f47f ac5f 	bne.w	407330 <_vfprintf_r+0xb14>
  407a72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407a74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407a78:	e4d1      	b.n	40741e <_vfprintf_r+0xc02>
  407a7a:	4623      	mov	r3, r4
  407a7c:	e6d5      	b.n	40782a <_vfprintf_r+0x100e>
  407a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407a80:	9710      	str	r7, [sp, #64]	; 0x40
  407a82:	2b06      	cmp	r3, #6
  407a84:	bf28      	it	cs
  407a86:	2306      	movcs	r3, #6
  407a88:	9709      	str	r7, [sp, #36]	; 0x24
  407a8a:	46ba      	mov	sl, r7
  407a8c:	9307      	str	r3, [sp, #28]
  407a8e:	950e      	str	r5, [sp, #56]	; 0x38
  407a90:	f8cd b018 	str.w	fp, [sp, #24]
  407a94:	930d      	str	r3, [sp, #52]	; 0x34
  407a96:	4f48      	ldr	r7, [pc, #288]	; (407bb8 <_vfprintf_r+0x139c>)
  407a98:	f7fe bff2 	b.w	406a80 <_vfprintf_r+0x264>
  407a9c:	aa23      	add	r2, sp, #140	; 0x8c
  407a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407aa0:	9808      	ldr	r0, [sp, #32]
  407aa2:	f002 fc65 	bl	40a370 <__sprint_r>
  407aa6:	2800      	cmp	r0, #0
  407aa8:	f47f ac42 	bne.w	407330 <_vfprintf_r+0xb14>
  407aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407aae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407ab0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407ab2:	1ad3      	subs	r3, r2, r3
  407ab4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407ab8:	e5b6      	b.n	407628 <_vfprintf_r+0xe0c>
  407aba:	46a2      	mov	sl, r4
  407abc:	f7ff bb18 	b.w	4070f0 <_vfprintf_r+0x8d4>
  407ac0:	a821      	add	r0, sp, #132	; 0x84
  407ac2:	a91e      	add	r1, sp, #120	; 0x78
  407ac4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  407ac6:	9004      	str	r0, [sp, #16]
  407ac8:	9103      	str	r1, [sp, #12]
  407aca:	a81d      	add	r0, sp, #116	; 0x74
  407acc:	2103      	movs	r1, #3
  407ace:	9002      	str	r0, [sp, #8]
  407ad0:	9a07      	ldr	r2, [sp, #28]
  407ad2:	9501      	str	r5, [sp, #4]
  407ad4:	4653      	mov	r3, sl
  407ad6:	9100      	str	r1, [sp, #0]
  407ad8:	9808      	ldr	r0, [sp, #32]
  407ada:	f000 fa95 	bl	408008 <_dtoa_r>
  407ade:	4607      	mov	r7, r0
  407ae0:	1944      	adds	r4, r0, r5
  407ae2:	783b      	ldrb	r3, [r7, #0]
  407ae4:	2b30      	cmp	r3, #48	; 0x30
  407ae6:	f000 80ca 	beq.w	407c7e <_vfprintf_r+0x1462>
  407aea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  407aec:	442c      	add	r4, r5
  407aee:	e689      	b.n	407804 <_vfprintf_r+0xfe8>
  407af0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407af2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407af4:	4413      	add	r3, r2
  407af6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  407af8:	930d      	str	r3, [sp, #52]	; 0x34
  407afa:	2a00      	cmp	r2, #0
  407afc:	f340 80e4 	ble.w	407cc8 <_vfprintf_r+0x14ac>
  407b00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407b04:	9307      	str	r3, [sp, #28]
  407b06:	2667      	movs	r6, #103	; 0x67
  407b08:	e6ac      	b.n	407864 <_vfprintf_r+0x1048>
  407b0a:	2b00      	cmp	r3, #0
  407b0c:	f340 80fb 	ble.w	407d06 <_vfprintf_r+0x14ea>
  407b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407b12:	2a00      	cmp	r2, #0
  407b14:	f040 80ce 	bne.w	407cb4 <_vfprintf_r+0x1498>
  407b18:	f01b 0f01 	tst.w	fp, #1
  407b1c:	f040 80ca 	bne.w	407cb4 <_vfprintf_r+0x1498>
  407b20:	9307      	str	r3, [sp, #28]
  407b22:	930d      	str	r3, [sp, #52]	; 0x34
  407b24:	e69e      	b.n	407864 <_vfprintf_r+0x1048>
  407b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407b28:	9307      	str	r3, [sp, #28]
  407b2a:	930d      	str	r3, [sp, #52]	; 0x34
  407b2c:	9009      	str	r0, [sp, #36]	; 0x24
  407b2e:	950e      	str	r5, [sp, #56]	; 0x38
  407b30:	f8cd b018 	str.w	fp, [sp, #24]
  407b34:	9010      	str	r0, [sp, #64]	; 0x40
  407b36:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  407b3a:	f7fe bfa1 	b.w	406a80 <_vfprintf_r+0x264>
  407b3e:	aa23      	add	r2, sp, #140	; 0x8c
  407b40:	990a      	ldr	r1, [sp, #40]	; 0x28
  407b42:	9808      	ldr	r0, [sp, #32]
  407b44:	f002 fc14 	bl	40a370 <__sprint_r>
  407b48:	2800      	cmp	r0, #0
  407b4a:	f47f abf1 	bne.w	407330 <_vfprintf_r+0xb14>
  407b4e:	991d      	ldr	r1, [sp, #116]	; 0x74
  407b50:	9c25      	ldr	r4, [sp, #148]	; 0x94
  407b52:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407b56:	e6d0      	b.n	4078fa <_vfprintf_r+0x10de>
  407b58:	2e47      	cmp	r6, #71	; 0x47
  407b5a:	f47f ae52 	bne.w	407802 <_vfprintf_r+0xfe6>
  407b5e:	f01b 0f01 	tst.w	fp, #1
  407b62:	f000 80da 	beq.w	407d1a <_vfprintf_r+0x14fe>
  407b66:	2e46      	cmp	r6, #70	; 0x46
  407b68:	eb07 0405 	add.w	r4, r7, r5
  407b6c:	d0b9      	beq.n	407ae2 <_vfprintf_r+0x12c6>
  407b6e:	e649      	b.n	407804 <_vfprintf_r+0xfe8>
  407b70:	a821      	add	r0, sp, #132	; 0x84
  407b72:	a91e      	add	r1, sp, #120	; 0x78
  407b74:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407b76:	9004      	str	r0, [sp, #16]
  407b78:	9103      	str	r1, [sp, #12]
  407b7a:	a81d      	add	r0, sp, #116	; 0x74
  407b7c:	2103      	movs	r1, #3
  407b7e:	9002      	str	r0, [sp, #8]
  407b80:	9a07      	ldr	r2, [sp, #28]
  407b82:	9401      	str	r4, [sp, #4]
  407b84:	4653      	mov	r3, sl
  407b86:	9100      	str	r1, [sp, #0]
  407b88:	9808      	ldr	r0, [sp, #32]
  407b8a:	f000 fa3d 	bl	408008 <_dtoa_r>
  407b8e:	4625      	mov	r5, r4
  407b90:	4607      	mov	r7, r0
  407b92:	e7e8      	b.n	407b66 <_vfprintf_r+0x134a>
  407b94:	2300      	movs	r3, #0
  407b96:	9309      	str	r3, [sp, #36]	; 0x24
  407b98:	f7fe bec1 	b.w	40691e <_vfprintf_r+0x102>
  407b9c:	424e      	negs	r6, r1
  407b9e:	3110      	adds	r1, #16
  407ba0:	4d06      	ldr	r5, [pc, #24]	; (407bbc <_vfprintf_r+0x13a0>)
  407ba2:	da43      	bge.n	407c2c <_vfprintf_r+0x1410>
  407ba4:	2410      	movs	r4, #16
  407ba6:	f8dd a020 	ldr.w	sl, [sp, #32]
  407baa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407bae:	e00c      	b.n	407bca <_vfprintf_r+0x13ae>
  407bb0:	0040b4ac 	.word	0x0040b4ac
  407bb4:	66666667 	.word	0x66666667
  407bb8:	0040b4a4 	.word	0x0040b4a4
  407bbc:	0040b4c0 	.word	0x0040b4c0
  407bc0:	f108 0808 	add.w	r8, r8, #8
  407bc4:	3e10      	subs	r6, #16
  407bc6:	2e10      	cmp	r6, #16
  407bc8:	dd30      	ble.n	407c2c <_vfprintf_r+0x1410>
  407bca:	3301      	adds	r3, #1
  407bcc:	3210      	adds	r2, #16
  407bce:	2b07      	cmp	r3, #7
  407bd0:	9225      	str	r2, [sp, #148]	; 0x94
  407bd2:	9324      	str	r3, [sp, #144]	; 0x90
  407bd4:	f8c8 5000 	str.w	r5, [r8]
  407bd8:	f8c8 4004 	str.w	r4, [r8, #4]
  407bdc:	ddf0      	ble.n	407bc0 <_vfprintf_r+0x13a4>
  407bde:	aa23      	add	r2, sp, #140	; 0x8c
  407be0:	4659      	mov	r1, fp
  407be2:	4650      	mov	r0, sl
  407be4:	f002 fbc4 	bl	40a370 <__sprint_r>
  407be8:	2800      	cmp	r0, #0
  407bea:	f47f aeba 	bne.w	407962 <_vfprintf_r+0x1146>
  407bee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407bf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407bf2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407bf6:	e7e5      	b.n	407bc4 <_vfprintf_r+0x13a8>
  407bf8:	aa23      	add	r2, sp, #140	; 0x8c
  407bfa:	990a      	ldr	r1, [sp, #40]	; 0x28
  407bfc:	9808      	ldr	r0, [sp, #32]
  407bfe:	f002 fbb7 	bl	40a370 <__sprint_r>
  407c02:	2800      	cmp	r0, #0
  407c04:	f47f ab94 	bne.w	407330 <_vfprintf_r+0xb14>
  407c08:	991d      	ldr	r1, [sp, #116]	; 0x74
  407c0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407c0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c0e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407c12:	e68a      	b.n	40792a <_vfprintf_r+0x110e>
  407c14:	9808      	ldr	r0, [sp, #32]
  407c16:	aa23      	add	r2, sp, #140	; 0x8c
  407c18:	4651      	mov	r1, sl
  407c1a:	f002 fba9 	bl	40a370 <__sprint_r>
  407c1e:	2800      	cmp	r0, #0
  407c20:	f43f aa64 	beq.w	4070ec <_vfprintf_r+0x8d0>
  407c24:	f7ff ba64 	b.w	4070f0 <_vfprintf_r+0x8d4>
  407c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407c2a:	e5fe      	b.n	40782a <_vfprintf_r+0x100e>
  407c2c:	3301      	adds	r3, #1
  407c2e:	4432      	add	r2, r6
  407c30:	2b07      	cmp	r3, #7
  407c32:	e888 0060 	stmia.w	r8, {r5, r6}
  407c36:	9225      	str	r2, [sp, #148]	; 0x94
  407c38:	9324      	str	r3, [sp, #144]	; 0x90
  407c3a:	f108 0808 	add.w	r8, r8, #8
  407c3e:	f77f ae77 	ble.w	407930 <_vfprintf_r+0x1114>
  407c42:	aa23      	add	r2, sp, #140	; 0x8c
  407c44:	990a      	ldr	r1, [sp, #40]	; 0x28
  407c46:	9808      	ldr	r0, [sp, #32]
  407c48:	f002 fb92 	bl	40a370 <__sprint_r>
  407c4c:	2800      	cmp	r0, #0
  407c4e:	f47f ab6f 	bne.w	407330 <_vfprintf_r+0xb14>
  407c52:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407c54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c56:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  407c5a:	e669      	b.n	407930 <_vfprintf_r+0x1114>
  407c5c:	3330      	adds	r3, #48	; 0x30
  407c5e:	2230      	movs	r2, #48	; 0x30
  407c60:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  407c64:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  407c68:	ab20      	add	r3, sp, #128	; 0x80
  407c6a:	e6e7      	b.n	407a3c <_vfprintf_r+0x1220>
  407c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407c6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407c70:	4413      	add	r3, r2
  407c72:	930d      	str	r3, [sp, #52]	; 0x34
  407c74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407c78:	9307      	str	r3, [sp, #28]
  407c7a:	2667      	movs	r6, #103	; 0x67
  407c7c:	e5f2      	b.n	407864 <_vfprintf_r+0x1048>
  407c7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407c80:	9807      	ldr	r0, [sp, #28]
  407c82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407c84:	4651      	mov	r1, sl
  407c86:	f7fd fc8b 	bl	4055a0 <__aeabi_dcmpeq>
  407c8a:	2800      	cmp	r0, #0
  407c8c:	f47f af2d 	bne.w	407aea <_vfprintf_r+0x12ce>
  407c90:	f1c5 0501 	rsb	r5, r5, #1
  407c94:	951d      	str	r5, [sp, #116]	; 0x74
  407c96:	442c      	add	r4, r5
  407c98:	e5b4      	b.n	407804 <_vfprintf_r+0xfe8>
  407c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407c9c:	4f33      	ldr	r7, [pc, #204]	; (407d6c <_vfprintf_r+0x1550>)
  407c9e:	2b00      	cmp	r3, #0
  407ca0:	bfb6      	itet	lt
  407ca2:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  407ca6:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  407caa:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  407cae:	4b30      	ldr	r3, [pc, #192]	; (407d70 <_vfprintf_r+0x1554>)
  407cb0:	f7ff b9d1 	b.w	407056 <_vfprintf_r+0x83a>
  407cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407cb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407cb8:	4413      	add	r3, r2
  407cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407cbc:	441a      	add	r2, r3
  407cbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407cc2:	920d      	str	r2, [sp, #52]	; 0x34
  407cc4:	9307      	str	r3, [sp, #28]
  407cc6:	e5cd      	b.n	407864 <_vfprintf_r+0x1048>
  407cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407cca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407ccc:	f1c3 0301 	rsb	r3, r3, #1
  407cd0:	441a      	add	r2, r3
  407cd2:	4613      	mov	r3, r2
  407cd4:	920d      	str	r2, [sp, #52]	; 0x34
  407cd6:	e713      	b.n	407b00 <_vfprintf_r+0x12e4>
  407cd8:	f01b 0301 	ands.w	r3, fp, #1
  407cdc:	9310      	str	r3, [sp, #64]	; 0x40
  407cde:	f47f aeb6 	bne.w	407a4e <_vfprintf_r+0x1232>
  407ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407ce8:	9307      	str	r3, [sp, #28]
  407cea:	e5bb      	b.n	407864 <_vfprintf_r+0x1048>
  407cec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  407cee:	f899 6001 	ldrb.w	r6, [r9, #1]
  407cf2:	6823      	ldr	r3, [r4, #0]
  407cf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  407cf8:	9309      	str	r3, [sp, #36]	; 0x24
  407cfa:	4623      	mov	r3, r4
  407cfc:	3304      	adds	r3, #4
  407cfe:	4681      	mov	r9, r0
  407d00:	930e      	str	r3, [sp, #56]	; 0x38
  407d02:	f7fe be0a 	b.w	40691a <_vfprintf_r+0xfe>
  407d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407d08:	b913      	cbnz	r3, 407d10 <_vfprintf_r+0x14f4>
  407d0a:	f01b 0f01 	tst.w	fp, #1
  407d0e:	d002      	beq.n	407d16 <_vfprintf_r+0x14fa>
  407d10:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407d12:	3301      	adds	r3, #1
  407d14:	e7d1      	b.n	407cba <_vfprintf_r+0x149e>
  407d16:	2301      	movs	r3, #1
  407d18:	e702      	b.n	407b20 <_vfprintf_r+0x1304>
  407d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407d1c:	1bdb      	subs	r3, r3, r7
  407d1e:	9311      	str	r3, [sp, #68]	; 0x44
  407d20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407d22:	2b47      	cmp	r3, #71	; 0x47
  407d24:	f43f ae40 	beq.w	4079a8 <_vfprintf_r+0x118c>
  407d28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407d2a:	9310      	str	r3, [sp, #64]	; 0x40
  407d2c:	e647      	b.n	4079be <_vfprintf_r+0x11a2>
  407d2e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407d32:	f7ff b81d 	b.w	406d70 <_vfprintf_r+0x554>
  407d36:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407d3a:	f7ff b918 	b.w	406f6e <_vfprintf_r+0x752>
  407d3e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  407d42:	e67b      	b.n	407a3c <_vfprintf_r+0x1220>
  407d44:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407d48:	f7ff b866 	b.w	406e18 <_vfprintf_r+0x5fc>
  407d4c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407d50:	f7ff b9ac 	b.w	4070ac <_vfprintf_r+0x890>
  407d54:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407d58:	f7ff b934 	b.w	406fc4 <_vfprintf_r+0x7a8>
  407d5c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407d60:	f7ff b8b0 	b.w	406ec4 <_vfprintf_r+0x6a8>
  407d64:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  407d68:	f7ff b945 	b.w	406ff6 <_vfprintf_r+0x7da>
  407d6c:	0040b478 	.word	0x0040b478
  407d70:	0040b474 	.word	0x0040b474

00407d74 <__sbprintf>:
  407d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d78:	460c      	mov	r4, r1
  407d7a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  407d7e:	8989      	ldrh	r1, [r1, #12]
  407d80:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407d82:	89e5      	ldrh	r5, [r4, #14]
  407d84:	9619      	str	r6, [sp, #100]	; 0x64
  407d86:	f021 0102 	bic.w	r1, r1, #2
  407d8a:	4606      	mov	r6, r0
  407d8c:	69e0      	ldr	r0, [r4, #28]
  407d8e:	f8ad 100c 	strh.w	r1, [sp, #12]
  407d92:	4617      	mov	r7, r2
  407d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
  407d98:	6a62      	ldr	r2, [r4, #36]	; 0x24
  407d9a:	f8ad 500e 	strh.w	r5, [sp, #14]
  407d9e:	4698      	mov	r8, r3
  407da0:	ad1a      	add	r5, sp, #104	; 0x68
  407da2:	2300      	movs	r3, #0
  407da4:	9007      	str	r0, [sp, #28]
  407da6:	a816      	add	r0, sp, #88	; 0x58
  407da8:	9209      	str	r2, [sp, #36]	; 0x24
  407daa:	9306      	str	r3, [sp, #24]
  407dac:	9500      	str	r5, [sp, #0]
  407dae:	9504      	str	r5, [sp, #16]
  407db0:	9102      	str	r1, [sp, #8]
  407db2:	9105      	str	r1, [sp, #20]
  407db4:	f001 fc82 	bl	4096bc <__retarget_lock_init_recursive>
  407db8:	4643      	mov	r3, r8
  407dba:	463a      	mov	r2, r7
  407dbc:	4669      	mov	r1, sp
  407dbe:	4630      	mov	r0, r6
  407dc0:	f7fe fd2c 	bl	40681c <_vfprintf_r>
  407dc4:	1e05      	subs	r5, r0, #0
  407dc6:	db07      	blt.n	407dd8 <__sbprintf+0x64>
  407dc8:	4630      	mov	r0, r6
  407dca:	4669      	mov	r1, sp
  407dcc:	f001 f8e6 	bl	408f9c <_fflush_r>
  407dd0:	2800      	cmp	r0, #0
  407dd2:	bf18      	it	ne
  407dd4:	f04f 35ff 	movne.w	r5, #4294967295
  407dd8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407ddc:	065b      	lsls	r3, r3, #25
  407dde:	d503      	bpl.n	407de8 <__sbprintf+0x74>
  407de0:	89a3      	ldrh	r3, [r4, #12]
  407de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407de6:	81a3      	strh	r3, [r4, #12]
  407de8:	9816      	ldr	r0, [sp, #88]	; 0x58
  407dea:	f001 fc69 	bl	4096c0 <__retarget_lock_close_recursive>
  407dee:	4628      	mov	r0, r5
  407df0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407df8 <__swsetup_r>:
  407df8:	b538      	push	{r3, r4, r5, lr}
  407dfa:	4b30      	ldr	r3, [pc, #192]	; (407ebc <__swsetup_r+0xc4>)
  407dfc:	681b      	ldr	r3, [r3, #0]
  407dfe:	4605      	mov	r5, r0
  407e00:	460c      	mov	r4, r1
  407e02:	b113      	cbz	r3, 407e0a <__swsetup_r+0x12>
  407e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407e06:	2a00      	cmp	r2, #0
  407e08:	d038      	beq.n	407e7c <__swsetup_r+0x84>
  407e0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407e0e:	b293      	uxth	r3, r2
  407e10:	0718      	lsls	r0, r3, #28
  407e12:	d50c      	bpl.n	407e2e <__swsetup_r+0x36>
  407e14:	6920      	ldr	r0, [r4, #16]
  407e16:	b1a8      	cbz	r0, 407e44 <__swsetup_r+0x4c>
  407e18:	f013 0201 	ands.w	r2, r3, #1
  407e1c:	d01e      	beq.n	407e5c <__swsetup_r+0x64>
  407e1e:	6963      	ldr	r3, [r4, #20]
  407e20:	2200      	movs	r2, #0
  407e22:	425b      	negs	r3, r3
  407e24:	61a3      	str	r3, [r4, #24]
  407e26:	60a2      	str	r2, [r4, #8]
  407e28:	b1f0      	cbz	r0, 407e68 <__swsetup_r+0x70>
  407e2a:	2000      	movs	r0, #0
  407e2c:	bd38      	pop	{r3, r4, r5, pc}
  407e2e:	06d9      	lsls	r1, r3, #27
  407e30:	d53c      	bpl.n	407eac <__swsetup_r+0xb4>
  407e32:	0758      	lsls	r0, r3, #29
  407e34:	d426      	bmi.n	407e84 <__swsetup_r+0x8c>
  407e36:	6920      	ldr	r0, [r4, #16]
  407e38:	f042 0308 	orr.w	r3, r2, #8
  407e3c:	81a3      	strh	r3, [r4, #12]
  407e3e:	b29b      	uxth	r3, r3
  407e40:	2800      	cmp	r0, #0
  407e42:	d1e9      	bne.n	407e18 <__swsetup_r+0x20>
  407e44:	f403 7220 	and.w	r2, r3, #640	; 0x280
  407e48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407e4c:	d0e4      	beq.n	407e18 <__swsetup_r+0x20>
  407e4e:	4628      	mov	r0, r5
  407e50:	4621      	mov	r1, r4
  407e52:	f001 fc69 	bl	409728 <__smakebuf_r>
  407e56:	89a3      	ldrh	r3, [r4, #12]
  407e58:	6920      	ldr	r0, [r4, #16]
  407e5a:	e7dd      	b.n	407e18 <__swsetup_r+0x20>
  407e5c:	0799      	lsls	r1, r3, #30
  407e5e:	bf58      	it	pl
  407e60:	6962      	ldrpl	r2, [r4, #20]
  407e62:	60a2      	str	r2, [r4, #8]
  407e64:	2800      	cmp	r0, #0
  407e66:	d1e0      	bne.n	407e2a <__swsetup_r+0x32>
  407e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e6c:	061a      	lsls	r2, r3, #24
  407e6e:	d5dd      	bpl.n	407e2c <__swsetup_r+0x34>
  407e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407e74:	81a3      	strh	r3, [r4, #12]
  407e76:	f04f 30ff 	mov.w	r0, #4294967295
  407e7a:	bd38      	pop	{r3, r4, r5, pc}
  407e7c:	4618      	mov	r0, r3
  407e7e:	f001 f8e5 	bl	40904c <__sinit>
  407e82:	e7c2      	b.n	407e0a <__swsetup_r+0x12>
  407e84:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407e86:	b151      	cbz	r1, 407e9e <__swsetup_r+0xa6>
  407e88:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407e8c:	4299      	cmp	r1, r3
  407e8e:	d004      	beq.n	407e9a <__swsetup_r+0xa2>
  407e90:	4628      	mov	r0, r5
  407e92:	f001 f97d 	bl	409190 <_free_r>
  407e96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407e9a:	2300      	movs	r3, #0
  407e9c:	6323      	str	r3, [r4, #48]	; 0x30
  407e9e:	2300      	movs	r3, #0
  407ea0:	6920      	ldr	r0, [r4, #16]
  407ea2:	6063      	str	r3, [r4, #4]
  407ea4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407ea8:	6020      	str	r0, [r4, #0]
  407eaa:	e7c5      	b.n	407e38 <__swsetup_r+0x40>
  407eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407eb0:	2309      	movs	r3, #9
  407eb2:	602b      	str	r3, [r5, #0]
  407eb4:	f04f 30ff 	mov.w	r0, #4294967295
  407eb8:	81a2      	strh	r2, [r4, #12]
  407eba:	bd38      	pop	{r3, r4, r5, pc}
  407ebc:	20400028 	.word	0x20400028

00407ec0 <register_fini>:
  407ec0:	4b02      	ldr	r3, [pc, #8]	; (407ecc <register_fini+0xc>)
  407ec2:	b113      	cbz	r3, 407eca <register_fini+0xa>
  407ec4:	4802      	ldr	r0, [pc, #8]	; (407ed0 <register_fini+0x10>)
  407ec6:	f000 b805 	b.w	407ed4 <atexit>
  407eca:	4770      	bx	lr
  407ecc:	00000000 	.word	0x00000000
  407ed0:	004090bd 	.word	0x004090bd

00407ed4 <atexit>:
  407ed4:	2300      	movs	r3, #0
  407ed6:	4601      	mov	r1, r0
  407ed8:	461a      	mov	r2, r3
  407eda:	4618      	mov	r0, r3
  407edc:	f002 ba68 	b.w	40a3b0 <__register_exitproc>

00407ee0 <quorem>:
  407ee0:	6902      	ldr	r2, [r0, #16]
  407ee2:	690b      	ldr	r3, [r1, #16]
  407ee4:	4293      	cmp	r3, r2
  407ee6:	f300 808d 	bgt.w	408004 <quorem+0x124>
  407eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407eee:	f103 38ff 	add.w	r8, r3, #4294967295
  407ef2:	f101 0714 	add.w	r7, r1, #20
  407ef6:	f100 0b14 	add.w	fp, r0, #20
  407efa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  407efe:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  407f02:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407f06:	b083      	sub	sp, #12
  407f08:	3201      	adds	r2, #1
  407f0a:	fbb3 f9f2 	udiv	r9, r3, r2
  407f0e:	eb0b 0304 	add.w	r3, fp, r4
  407f12:	9400      	str	r4, [sp, #0]
  407f14:	eb07 0a04 	add.w	sl, r7, r4
  407f18:	9301      	str	r3, [sp, #4]
  407f1a:	f1b9 0f00 	cmp.w	r9, #0
  407f1e:	d039      	beq.n	407f94 <quorem+0xb4>
  407f20:	2500      	movs	r5, #0
  407f22:	462e      	mov	r6, r5
  407f24:	46bc      	mov	ip, r7
  407f26:	46de      	mov	lr, fp
  407f28:	f85c 4b04 	ldr.w	r4, [ip], #4
  407f2c:	f8de 3000 	ldr.w	r3, [lr]
  407f30:	b2a2      	uxth	r2, r4
  407f32:	fb09 5502 	mla	r5, r9, r2, r5
  407f36:	0c22      	lsrs	r2, r4, #16
  407f38:	0c2c      	lsrs	r4, r5, #16
  407f3a:	fb09 4202 	mla	r2, r9, r2, r4
  407f3e:	b2ad      	uxth	r5, r5
  407f40:	1b75      	subs	r5, r6, r5
  407f42:	b296      	uxth	r6, r2
  407f44:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  407f48:	fa15 f383 	uxtah	r3, r5, r3
  407f4c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407f50:	b29b      	uxth	r3, r3
  407f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  407f56:	45e2      	cmp	sl, ip
  407f58:	ea4f 4512 	mov.w	r5, r2, lsr #16
  407f5c:	f84e 3b04 	str.w	r3, [lr], #4
  407f60:	ea4f 4626 	mov.w	r6, r6, asr #16
  407f64:	d2e0      	bcs.n	407f28 <quorem+0x48>
  407f66:	9b00      	ldr	r3, [sp, #0]
  407f68:	f85b 3003 	ldr.w	r3, [fp, r3]
  407f6c:	b993      	cbnz	r3, 407f94 <quorem+0xb4>
  407f6e:	9c01      	ldr	r4, [sp, #4]
  407f70:	1f23      	subs	r3, r4, #4
  407f72:	459b      	cmp	fp, r3
  407f74:	d20c      	bcs.n	407f90 <quorem+0xb0>
  407f76:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407f7a:	b94b      	cbnz	r3, 407f90 <quorem+0xb0>
  407f7c:	f1a4 0308 	sub.w	r3, r4, #8
  407f80:	e002      	b.n	407f88 <quorem+0xa8>
  407f82:	681a      	ldr	r2, [r3, #0]
  407f84:	3b04      	subs	r3, #4
  407f86:	b91a      	cbnz	r2, 407f90 <quorem+0xb0>
  407f88:	459b      	cmp	fp, r3
  407f8a:	f108 38ff 	add.w	r8, r8, #4294967295
  407f8e:	d3f8      	bcc.n	407f82 <quorem+0xa2>
  407f90:	f8c0 8010 	str.w	r8, [r0, #16]
  407f94:	4604      	mov	r4, r0
  407f96:	f001 fec5 	bl	409d24 <__mcmp>
  407f9a:	2800      	cmp	r0, #0
  407f9c:	db2e      	blt.n	407ffc <quorem+0x11c>
  407f9e:	f109 0901 	add.w	r9, r9, #1
  407fa2:	465d      	mov	r5, fp
  407fa4:	2300      	movs	r3, #0
  407fa6:	f857 1b04 	ldr.w	r1, [r7], #4
  407faa:	6828      	ldr	r0, [r5, #0]
  407fac:	b28a      	uxth	r2, r1
  407fae:	1a9a      	subs	r2, r3, r2
  407fb0:	0c0b      	lsrs	r3, r1, #16
  407fb2:	fa12 f280 	uxtah	r2, r2, r0
  407fb6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407fba:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407fbe:	b292      	uxth	r2, r2
  407fc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407fc4:	45ba      	cmp	sl, r7
  407fc6:	f845 2b04 	str.w	r2, [r5], #4
  407fca:	ea4f 4323 	mov.w	r3, r3, asr #16
  407fce:	d2ea      	bcs.n	407fa6 <quorem+0xc6>
  407fd0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407fd4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407fd8:	b982      	cbnz	r2, 407ffc <quorem+0x11c>
  407fda:	1f1a      	subs	r2, r3, #4
  407fdc:	4593      	cmp	fp, r2
  407fde:	d20b      	bcs.n	407ff8 <quorem+0x118>
  407fe0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407fe4:	b942      	cbnz	r2, 407ff8 <quorem+0x118>
  407fe6:	3b08      	subs	r3, #8
  407fe8:	e002      	b.n	407ff0 <quorem+0x110>
  407fea:	681a      	ldr	r2, [r3, #0]
  407fec:	3b04      	subs	r3, #4
  407fee:	b91a      	cbnz	r2, 407ff8 <quorem+0x118>
  407ff0:	459b      	cmp	fp, r3
  407ff2:	f108 38ff 	add.w	r8, r8, #4294967295
  407ff6:	d3f8      	bcc.n	407fea <quorem+0x10a>
  407ff8:	f8c4 8010 	str.w	r8, [r4, #16]
  407ffc:	4648      	mov	r0, r9
  407ffe:	b003      	add	sp, #12
  408000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408004:	2000      	movs	r0, #0
  408006:	4770      	bx	lr

00408008 <_dtoa_r>:
  408008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40800c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40800e:	b09b      	sub	sp, #108	; 0x6c
  408010:	4604      	mov	r4, r0
  408012:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  408014:	4692      	mov	sl, r2
  408016:	469b      	mov	fp, r3
  408018:	b141      	cbz	r1, 40802c <_dtoa_r+0x24>
  40801a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40801c:	604a      	str	r2, [r1, #4]
  40801e:	2301      	movs	r3, #1
  408020:	4093      	lsls	r3, r2
  408022:	608b      	str	r3, [r1, #8]
  408024:	f001 fca6 	bl	409974 <_Bfree>
  408028:	2300      	movs	r3, #0
  40802a:	6423      	str	r3, [r4, #64]	; 0x40
  40802c:	f1bb 0f00 	cmp.w	fp, #0
  408030:	465d      	mov	r5, fp
  408032:	db35      	blt.n	4080a0 <_dtoa_r+0x98>
  408034:	2300      	movs	r3, #0
  408036:	6033      	str	r3, [r6, #0]
  408038:	4b9d      	ldr	r3, [pc, #628]	; (4082b0 <_dtoa_r+0x2a8>)
  40803a:	43ab      	bics	r3, r5
  40803c:	d015      	beq.n	40806a <_dtoa_r+0x62>
  40803e:	4650      	mov	r0, sl
  408040:	4659      	mov	r1, fp
  408042:	2200      	movs	r2, #0
  408044:	2300      	movs	r3, #0
  408046:	f7fd faab 	bl	4055a0 <__aeabi_dcmpeq>
  40804a:	4680      	mov	r8, r0
  40804c:	2800      	cmp	r0, #0
  40804e:	d02d      	beq.n	4080ac <_dtoa_r+0xa4>
  408050:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408052:	2301      	movs	r3, #1
  408054:	6013      	str	r3, [r2, #0]
  408056:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408058:	2b00      	cmp	r3, #0
  40805a:	f000 80bd 	beq.w	4081d8 <_dtoa_r+0x1d0>
  40805e:	4895      	ldr	r0, [pc, #596]	; (4082b4 <_dtoa_r+0x2ac>)
  408060:	6018      	str	r0, [r3, #0]
  408062:	3801      	subs	r0, #1
  408064:	b01b      	add	sp, #108	; 0x6c
  408066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40806a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40806c:	f242 730f 	movw	r3, #9999	; 0x270f
  408070:	6013      	str	r3, [r2, #0]
  408072:	f1ba 0f00 	cmp.w	sl, #0
  408076:	d10d      	bne.n	408094 <_dtoa_r+0x8c>
  408078:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40807c:	b955      	cbnz	r5, 408094 <_dtoa_r+0x8c>
  40807e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408080:	488d      	ldr	r0, [pc, #564]	; (4082b8 <_dtoa_r+0x2b0>)
  408082:	2b00      	cmp	r3, #0
  408084:	d0ee      	beq.n	408064 <_dtoa_r+0x5c>
  408086:	f100 0308 	add.w	r3, r0, #8
  40808a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40808c:	6013      	str	r3, [r2, #0]
  40808e:	b01b      	add	sp, #108	; 0x6c
  408090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408094:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408096:	4889      	ldr	r0, [pc, #548]	; (4082bc <_dtoa_r+0x2b4>)
  408098:	2b00      	cmp	r3, #0
  40809a:	d0e3      	beq.n	408064 <_dtoa_r+0x5c>
  40809c:	1cc3      	adds	r3, r0, #3
  40809e:	e7f4      	b.n	40808a <_dtoa_r+0x82>
  4080a0:	2301      	movs	r3, #1
  4080a2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4080a6:	6033      	str	r3, [r6, #0]
  4080a8:	46ab      	mov	fp, r5
  4080aa:	e7c5      	b.n	408038 <_dtoa_r+0x30>
  4080ac:	aa18      	add	r2, sp, #96	; 0x60
  4080ae:	ab19      	add	r3, sp, #100	; 0x64
  4080b0:	9201      	str	r2, [sp, #4]
  4080b2:	9300      	str	r3, [sp, #0]
  4080b4:	4652      	mov	r2, sl
  4080b6:	465b      	mov	r3, fp
  4080b8:	4620      	mov	r0, r4
  4080ba:	f001 fed3 	bl	409e64 <__d2b>
  4080be:	0d2b      	lsrs	r3, r5, #20
  4080c0:	4681      	mov	r9, r0
  4080c2:	d071      	beq.n	4081a8 <_dtoa_r+0x1a0>
  4080c4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4080c8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4080cc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4080ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4080d2:	4650      	mov	r0, sl
  4080d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4080d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4080dc:	2200      	movs	r2, #0
  4080de:	4b78      	ldr	r3, [pc, #480]	; (4082c0 <_dtoa_r+0x2b8>)
  4080e0:	f7fc fe42 	bl	404d68 <__aeabi_dsub>
  4080e4:	a36c      	add	r3, pc, #432	; (adr r3, 408298 <_dtoa_r+0x290>)
  4080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4080ea:	f7fc fff1 	bl	4050d0 <__aeabi_dmul>
  4080ee:	a36c      	add	r3, pc, #432	; (adr r3, 4082a0 <_dtoa_r+0x298>)
  4080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4080f4:	f7fc fe3a 	bl	404d6c <__adddf3>
  4080f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4080fc:	4630      	mov	r0, r6
  4080fe:	f7fc ff81 	bl	405004 <__aeabi_i2d>
  408102:	a369      	add	r3, pc, #420	; (adr r3, 4082a8 <_dtoa_r+0x2a0>)
  408104:	e9d3 2300 	ldrd	r2, r3, [r3]
  408108:	f7fc ffe2 	bl	4050d0 <__aeabi_dmul>
  40810c:	4602      	mov	r2, r0
  40810e:	460b      	mov	r3, r1
  408110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408114:	f7fc fe2a 	bl	404d6c <__adddf3>
  408118:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40811c:	f002 fbd8 	bl	40a8d0 <__aeabi_d2iz>
  408120:	2200      	movs	r2, #0
  408122:	9002      	str	r0, [sp, #8]
  408124:	2300      	movs	r3, #0
  408126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40812a:	f7fd fa43 	bl	4055b4 <__aeabi_dcmplt>
  40812e:	2800      	cmp	r0, #0
  408130:	f040 8173 	bne.w	40841a <_dtoa_r+0x412>
  408134:	9d02      	ldr	r5, [sp, #8]
  408136:	2d16      	cmp	r5, #22
  408138:	f200 815d 	bhi.w	4083f6 <_dtoa_r+0x3ee>
  40813c:	4b61      	ldr	r3, [pc, #388]	; (4082c4 <_dtoa_r+0x2bc>)
  40813e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  408142:	e9d3 0100 	ldrd	r0, r1, [r3]
  408146:	4652      	mov	r2, sl
  408148:	465b      	mov	r3, fp
  40814a:	f7fd fa51 	bl	4055f0 <__aeabi_dcmpgt>
  40814e:	2800      	cmp	r0, #0
  408150:	f000 81c5 	beq.w	4084de <_dtoa_r+0x4d6>
  408154:	1e6b      	subs	r3, r5, #1
  408156:	9302      	str	r3, [sp, #8]
  408158:	2300      	movs	r3, #0
  40815a:	930e      	str	r3, [sp, #56]	; 0x38
  40815c:	1bbf      	subs	r7, r7, r6
  40815e:	1e7b      	subs	r3, r7, #1
  408160:	9306      	str	r3, [sp, #24]
  408162:	f100 8154 	bmi.w	40840e <_dtoa_r+0x406>
  408166:	2300      	movs	r3, #0
  408168:	9308      	str	r3, [sp, #32]
  40816a:	9b02      	ldr	r3, [sp, #8]
  40816c:	2b00      	cmp	r3, #0
  40816e:	f2c0 8145 	blt.w	4083fc <_dtoa_r+0x3f4>
  408172:	9a06      	ldr	r2, [sp, #24]
  408174:	930d      	str	r3, [sp, #52]	; 0x34
  408176:	4611      	mov	r1, r2
  408178:	4419      	add	r1, r3
  40817a:	2300      	movs	r3, #0
  40817c:	9106      	str	r1, [sp, #24]
  40817e:	930c      	str	r3, [sp, #48]	; 0x30
  408180:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408182:	2b09      	cmp	r3, #9
  408184:	d82a      	bhi.n	4081dc <_dtoa_r+0x1d4>
  408186:	2b05      	cmp	r3, #5
  408188:	f340 865b 	ble.w	408e42 <_dtoa_r+0xe3a>
  40818c:	3b04      	subs	r3, #4
  40818e:	9324      	str	r3, [sp, #144]	; 0x90
  408190:	2500      	movs	r5, #0
  408192:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408194:	3b02      	subs	r3, #2
  408196:	2b03      	cmp	r3, #3
  408198:	f200 8642 	bhi.w	408e20 <_dtoa_r+0xe18>
  40819c:	e8df f013 	tbh	[pc, r3, lsl #1]
  4081a0:	02c903d4 	.word	0x02c903d4
  4081a4:	046103df 	.word	0x046103df
  4081a8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4081aa:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4081ac:	443e      	add	r6, r7
  4081ae:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4081b2:	2b20      	cmp	r3, #32
  4081b4:	f340 818e 	ble.w	4084d4 <_dtoa_r+0x4cc>
  4081b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4081bc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4081c0:	409d      	lsls	r5, r3
  4081c2:	fa2a f000 	lsr.w	r0, sl, r0
  4081c6:	4328      	orrs	r0, r5
  4081c8:	f7fc ff0c 	bl	404fe4 <__aeabi_ui2d>
  4081cc:	2301      	movs	r3, #1
  4081ce:	3e01      	subs	r6, #1
  4081d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4081d4:	9314      	str	r3, [sp, #80]	; 0x50
  4081d6:	e781      	b.n	4080dc <_dtoa_r+0xd4>
  4081d8:	483b      	ldr	r0, [pc, #236]	; (4082c8 <_dtoa_r+0x2c0>)
  4081da:	e743      	b.n	408064 <_dtoa_r+0x5c>
  4081dc:	2100      	movs	r1, #0
  4081de:	6461      	str	r1, [r4, #68]	; 0x44
  4081e0:	4620      	mov	r0, r4
  4081e2:	9125      	str	r1, [sp, #148]	; 0x94
  4081e4:	f001 fba0 	bl	409928 <_Balloc>
  4081e8:	f04f 33ff 	mov.w	r3, #4294967295
  4081ec:	930a      	str	r3, [sp, #40]	; 0x28
  4081ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4081f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4081f2:	2301      	movs	r3, #1
  4081f4:	9004      	str	r0, [sp, #16]
  4081f6:	6420      	str	r0, [r4, #64]	; 0x40
  4081f8:	9224      	str	r2, [sp, #144]	; 0x90
  4081fa:	930b      	str	r3, [sp, #44]	; 0x2c
  4081fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4081fe:	2b00      	cmp	r3, #0
  408200:	f2c0 80d9 	blt.w	4083b6 <_dtoa_r+0x3ae>
  408204:	9a02      	ldr	r2, [sp, #8]
  408206:	2a0e      	cmp	r2, #14
  408208:	f300 80d5 	bgt.w	4083b6 <_dtoa_r+0x3ae>
  40820c:	4b2d      	ldr	r3, [pc, #180]	; (4082c4 <_dtoa_r+0x2bc>)
  40820e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408212:	e9d3 2300 	ldrd	r2, r3, [r3]
  408216:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40821a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40821c:	2b00      	cmp	r3, #0
  40821e:	f2c0 83ba 	blt.w	408996 <_dtoa_r+0x98e>
  408222:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  408226:	4650      	mov	r0, sl
  408228:	462a      	mov	r2, r5
  40822a:	4633      	mov	r3, r6
  40822c:	4659      	mov	r1, fp
  40822e:	f7fd f879 	bl	405324 <__aeabi_ddiv>
  408232:	f002 fb4d 	bl	40a8d0 <__aeabi_d2iz>
  408236:	4680      	mov	r8, r0
  408238:	f7fc fee4 	bl	405004 <__aeabi_i2d>
  40823c:	462a      	mov	r2, r5
  40823e:	4633      	mov	r3, r6
  408240:	f7fc ff46 	bl	4050d0 <__aeabi_dmul>
  408244:	460b      	mov	r3, r1
  408246:	4602      	mov	r2, r0
  408248:	4659      	mov	r1, fp
  40824a:	4650      	mov	r0, sl
  40824c:	f7fc fd8c 	bl	404d68 <__aeabi_dsub>
  408250:	9d04      	ldr	r5, [sp, #16]
  408252:	f108 0330 	add.w	r3, r8, #48	; 0x30
  408256:	702b      	strb	r3, [r5, #0]
  408258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40825a:	2b01      	cmp	r3, #1
  40825c:	4606      	mov	r6, r0
  40825e:	460f      	mov	r7, r1
  408260:	f105 0501 	add.w	r5, r5, #1
  408264:	d068      	beq.n	408338 <_dtoa_r+0x330>
  408266:	2200      	movs	r2, #0
  408268:	4b18      	ldr	r3, [pc, #96]	; (4082cc <_dtoa_r+0x2c4>)
  40826a:	f7fc ff31 	bl	4050d0 <__aeabi_dmul>
  40826e:	2200      	movs	r2, #0
  408270:	2300      	movs	r3, #0
  408272:	4606      	mov	r6, r0
  408274:	460f      	mov	r7, r1
  408276:	f7fd f993 	bl	4055a0 <__aeabi_dcmpeq>
  40827a:	2800      	cmp	r0, #0
  40827c:	f040 8088 	bne.w	408390 <_dtoa_r+0x388>
  408280:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  408284:	f04f 0a00 	mov.w	sl, #0
  408288:	f8df b040 	ldr.w	fp, [pc, #64]	; 4082cc <_dtoa_r+0x2c4>
  40828c:	940c      	str	r4, [sp, #48]	; 0x30
  40828e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  408292:	e028      	b.n	4082e6 <_dtoa_r+0x2de>
  408294:	f3af 8000 	nop.w
  408298:	636f4361 	.word	0x636f4361
  40829c:	3fd287a7 	.word	0x3fd287a7
  4082a0:	8b60c8b3 	.word	0x8b60c8b3
  4082a4:	3fc68a28 	.word	0x3fc68a28
  4082a8:	509f79fb 	.word	0x509f79fb
  4082ac:	3fd34413 	.word	0x3fd34413
  4082b0:	7ff00000 	.word	0x7ff00000
  4082b4:	0040b4ad 	.word	0x0040b4ad
  4082b8:	0040b4d0 	.word	0x0040b4d0
  4082bc:	0040b4dc 	.word	0x0040b4dc
  4082c0:	3ff80000 	.word	0x3ff80000
  4082c4:	0040b508 	.word	0x0040b508
  4082c8:	0040b4ac 	.word	0x0040b4ac
  4082cc:	40240000 	.word	0x40240000
  4082d0:	f7fc fefe 	bl	4050d0 <__aeabi_dmul>
  4082d4:	2200      	movs	r2, #0
  4082d6:	2300      	movs	r3, #0
  4082d8:	4606      	mov	r6, r0
  4082da:	460f      	mov	r7, r1
  4082dc:	f7fd f960 	bl	4055a0 <__aeabi_dcmpeq>
  4082e0:	2800      	cmp	r0, #0
  4082e2:	f040 83c1 	bne.w	408a68 <_dtoa_r+0xa60>
  4082e6:	4642      	mov	r2, r8
  4082e8:	464b      	mov	r3, r9
  4082ea:	4630      	mov	r0, r6
  4082ec:	4639      	mov	r1, r7
  4082ee:	f7fd f819 	bl	405324 <__aeabi_ddiv>
  4082f2:	f002 faed 	bl	40a8d0 <__aeabi_d2iz>
  4082f6:	4604      	mov	r4, r0
  4082f8:	f7fc fe84 	bl	405004 <__aeabi_i2d>
  4082fc:	4642      	mov	r2, r8
  4082fe:	464b      	mov	r3, r9
  408300:	f7fc fee6 	bl	4050d0 <__aeabi_dmul>
  408304:	4602      	mov	r2, r0
  408306:	460b      	mov	r3, r1
  408308:	4630      	mov	r0, r6
  40830a:	4639      	mov	r1, r7
  40830c:	f7fc fd2c 	bl	404d68 <__aeabi_dsub>
  408310:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  408314:	9e04      	ldr	r6, [sp, #16]
  408316:	f805 eb01 	strb.w	lr, [r5], #1
  40831a:	eba5 0e06 	sub.w	lr, r5, r6
  40831e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  408320:	45b6      	cmp	lr, r6
  408322:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408326:	4652      	mov	r2, sl
  408328:	465b      	mov	r3, fp
  40832a:	d1d1      	bne.n	4082d0 <_dtoa_r+0x2c8>
  40832c:	46a0      	mov	r8, r4
  40832e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408332:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408334:	4606      	mov	r6, r0
  408336:	460f      	mov	r7, r1
  408338:	4632      	mov	r2, r6
  40833a:	463b      	mov	r3, r7
  40833c:	4630      	mov	r0, r6
  40833e:	4639      	mov	r1, r7
  408340:	f7fc fd14 	bl	404d6c <__adddf3>
  408344:	4606      	mov	r6, r0
  408346:	460f      	mov	r7, r1
  408348:	4602      	mov	r2, r0
  40834a:	460b      	mov	r3, r1
  40834c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408350:	f7fd f930 	bl	4055b4 <__aeabi_dcmplt>
  408354:	b948      	cbnz	r0, 40836a <_dtoa_r+0x362>
  408356:	4632      	mov	r2, r6
  408358:	463b      	mov	r3, r7
  40835a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40835e:	f7fd f91f 	bl	4055a0 <__aeabi_dcmpeq>
  408362:	b1a8      	cbz	r0, 408390 <_dtoa_r+0x388>
  408364:	f018 0f01 	tst.w	r8, #1
  408368:	d012      	beq.n	408390 <_dtoa_r+0x388>
  40836a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40836e:	9a04      	ldr	r2, [sp, #16]
  408370:	1e6b      	subs	r3, r5, #1
  408372:	e004      	b.n	40837e <_dtoa_r+0x376>
  408374:	429a      	cmp	r2, r3
  408376:	f000 8401 	beq.w	408b7c <_dtoa_r+0xb74>
  40837a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40837e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  408382:	f103 0501 	add.w	r5, r3, #1
  408386:	d0f5      	beq.n	408374 <_dtoa_r+0x36c>
  408388:	f108 0801 	add.w	r8, r8, #1
  40838c:	f883 8000 	strb.w	r8, [r3]
  408390:	4649      	mov	r1, r9
  408392:	4620      	mov	r0, r4
  408394:	f001 faee 	bl	409974 <_Bfree>
  408398:	2200      	movs	r2, #0
  40839a:	9b02      	ldr	r3, [sp, #8]
  40839c:	702a      	strb	r2, [r5, #0]
  40839e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4083a0:	3301      	adds	r3, #1
  4083a2:	6013      	str	r3, [r2, #0]
  4083a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4083a6:	2b00      	cmp	r3, #0
  4083a8:	f000 839e 	beq.w	408ae8 <_dtoa_r+0xae0>
  4083ac:	9804      	ldr	r0, [sp, #16]
  4083ae:	601d      	str	r5, [r3, #0]
  4083b0:	b01b      	add	sp, #108	; 0x6c
  4083b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4083b8:	2a00      	cmp	r2, #0
  4083ba:	d03e      	beq.n	40843a <_dtoa_r+0x432>
  4083bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4083be:	2a01      	cmp	r2, #1
  4083c0:	f340 8311 	ble.w	4089e6 <_dtoa_r+0x9de>
  4083c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4083c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4083c8:	1e5f      	subs	r7, r3, #1
  4083ca:	42ba      	cmp	r2, r7
  4083cc:	f2c0 838f 	blt.w	408aee <_dtoa_r+0xae6>
  4083d0:	1bd7      	subs	r7, r2, r7
  4083d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4083d4:	2b00      	cmp	r3, #0
  4083d6:	f2c0 848b 	blt.w	408cf0 <_dtoa_r+0xce8>
  4083da:	9d08      	ldr	r5, [sp, #32]
  4083dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4083de:	9a08      	ldr	r2, [sp, #32]
  4083e0:	441a      	add	r2, r3
  4083e2:	9208      	str	r2, [sp, #32]
  4083e4:	9a06      	ldr	r2, [sp, #24]
  4083e6:	2101      	movs	r1, #1
  4083e8:	441a      	add	r2, r3
  4083ea:	4620      	mov	r0, r4
  4083ec:	9206      	str	r2, [sp, #24]
  4083ee:	f001 fb5b 	bl	409aa8 <__i2b>
  4083f2:	4606      	mov	r6, r0
  4083f4:	e024      	b.n	408440 <_dtoa_r+0x438>
  4083f6:	2301      	movs	r3, #1
  4083f8:	930e      	str	r3, [sp, #56]	; 0x38
  4083fa:	e6af      	b.n	40815c <_dtoa_r+0x154>
  4083fc:	9a08      	ldr	r2, [sp, #32]
  4083fe:	9b02      	ldr	r3, [sp, #8]
  408400:	1ad2      	subs	r2, r2, r3
  408402:	425b      	negs	r3, r3
  408404:	930c      	str	r3, [sp, #48]	; 0x30
  408406:	2300      	movs	r3, #0
  408408:	9208      	str	r2, [sp, #32]
  40840a:	930d      	str	r3, [sp, #52]	; 0x34
  40840c:	e6b8      	b.n	408180 <_dtoa_r+0x178>
  40840e:	f1c7 0301 	rsb	r3, r7, #1
  408412:	9308      	str	r3, [sp, #32]
  408414:	2300      	movs	r3, #0
  408416:	9306      	str	r3, [sp, #24]
  408418:	e6a7      	b.n	40816a <_dtoa_r+0x162>
  40841a:	9d02      	ldr	r5, [sp, #8]
  40841c:	4628      	mov	r0, r5
  40841e:	f7fc fdf1 	bl	405004 <__aeabi_i2d>
  408422:	4602      	mov	r2, r0
  408424:	460b      	mov	r3, r1
  408426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40842a:	f7fd f8b9 	bl	4055a0 <__aeabi_dcmpeq>
  40842e:	2800      	cmp	r0, #0
  408430:	f47f ae80 	bne.w	408134 <_dtoa_r+0x12c>
  408434:	1e6b      	subs	r3, r5, #1
  408436:	9302      	str	r3, [sp, #8]
  408438:	e67c      	b.n	408134 <_dtoa_r+0x12c>
  40843a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40843c:	9d08      	ldr	r5, [sp, #32]
  40843e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  408440:	2d00      	cmp	r5, #0
  408442:	dd0c      	ble.n	40845e <_dtoa_r+0x456>
  408444:	9906      	ldr	r1, [sp, #24]
  408446:	2900      	cmp	r1, #0
  408448:	460b      	mov	r3, r1
  40844a:	dd08      	ble.n	40845e <_dtoa_r+0x456>
  40844c:	42a9      	cmp	r1, r5
  40844e:	9a08      	ldr	r2, [sp, #32]
  408450:	bfa8      	it	ge
  408452:	462b      	movge	r3, r5
  408454:	1ad2      	subs	r2, r2, r3
  408456:	1aed      	subs	r5, r5, r3
  408458:	1acb      	subs	r3, r1, r3
  40845a:	9208      	str	r2, [sp, #32]
  40845c:	9306      	str	r3, [sp, #24]
  40845e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408460:	b1d3      	cbz	r3, 408498 <_dtoa_r+0x490>
  408462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408464:	2b00      	cmp	r3, #0
  408466:	f000 82b7 	beq.w	4089d8 <_dtoa_r+0x9d0>
  40846a:	2f00      	cmp	r7, #0
  40846c:	dd10      	ble.n	408490 <_dtoa_r+0x488>
  40846e:	4631      	mov	r1, r6
  408470:	463a      	mov	r2, r7
  408472:	4620      	mov	r0, r4
  408474:	f001 fbb4 	bl	409be0 <__pow5mult>
  408478:	464a      	mov	r2, r9
  40847a:	4601      	mov	r1, r0
  40847c:	4606      	mov	r6, r0
  40847e:	4620      	mov	r0, r4
  408480:	f001 fb1c 	bl	409abc <__multiply>
  408484:	4649      	mov	r1, r9
  408486:	4680      	mov	r8, r0
  408488:	4620      	mov	r0, r4
  40848a:	f001 fa73 	bl	409974 <_Bfree>
  40848e:	46c1      	mov	r9, r8
  408490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408492:	1bda      	subs	r2, r3, r7
  408494:	f040 82a1 	bne.w	4089da <_dtoa_r+0x9d2>
  408498:	2101      	movs	r1, #1
  40849a:	4620      	mov	r0, r4
  40849c:	f001 fb04 	bl	409aa8 <__i2b>
  4084a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4084a2:	2b00      	cmp	r3, #0
  4084a4:	4680      	mov	r8, r0
  4084a6:	dd1c      	ble.n	4084e2 <_dtoa_r+0x4da>
  4084a8:	4601      	mov	r1, r0
  4084aa:	461a      	mov	r2, r3
  4084ac:	4620      	mov	r0, r4
  4084ae:	f001 fb97 	bl	409be0 <__pow5mult>
  4084b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4084b4:	2b01      	cmp	r3, #1
  4084b6:	4680      	mov	r8, r0
  4084b8:	f340 8254 	ble.w	408964 <_dtoa_r+0x95c>
  4084bc:	2300      	movs	r3, #0
  4084be:	930c      	str	r3, [sp, #48]	; 0x30
  4084c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4084c4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4084c8:	6918      	ldr	r0, [r3, #16]
  4084ca:	f001 fa9d 	bl	409a08 <__hi0bits>
  4084ce:	f1c0 0020 	rsb	r0, r0, #32
  4084d2:	e010      	b.n	4084f6 <_dtoa_r+0x4ee>
  4084d4:	f1c3 0520 	rsb	r5, r3, #32
  4084d8:	fa0a f005 	lsl.w	r0, sl, r5
  4084dc:	e674      	b.n	4081c8 <_dtoa_r+0x1c0>
  4084de:	900e      	str	r0, [sp, #56]	; 0x38
  4084e0:	e63c      	b.n	40815c <_dtoa_r+0x154>
  4084e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4084e4:	2b01      	cmp	r3, #1
  4084e6:	f340 8287 	ble.w	4089f8 <_dtoa_r+0x9f0>
  4084ea:	2300      	movs	r3, #0
  4084ec:	930c      	str	r3, [sp, #48]	; 0x30
  4084ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4084f0:	2001      	movs	r0, #1
  4084f2:	2b00      	cmp	r3, #0
  4084f4:	d1e4      	bne.n	4084c0 <_dtoa_r+0x4b8>
  4084f6:	9a06      	ldr	r2, [sp, #24]
  4084f8:	4410      	add	r0, r2
  4084fa:	f010 001f 	ands.w	r0, r0, #31
  4084fe:	f000 80a1 	beq.w	408644 <_dtoa_r+0x63c>
  408502:	f1c0 0320 	rsb	r3, r0, #32
  408506:	2b04      	cmp	r3, #4
  408508:	f340 849e 	ble.w	408e48 <_dtoa_r+0xe40>
  40850c:	9b08      	ldr	r3, [sp, #32]
  40850e:	f1c0 001c 	rsb	r0, r0, #28
  408512:	4403      	add	r3, r0
  408514:	9308      	str	r3, [sp, #32]
  408516:	4613      	mov	r3, r2
  408518:	4403      	add	r3, r0
  40851a:	4405      	add	r5, r0
  40851c:	9306      	str	r3, [sp, #24]
  40851e:	9b08      	ldr	r3, [sp, #32]
  408520:	2b00      	cmp	r3, #0
  408522:	dd05      	ble.n	408530 <_dtoa_r+0x528>
  408524:	4649      	mov	r1, r9
  408526:	461a      	mov	r2, r3
  408528:	4620      	mov	r0, r4
  40852a:	f001 fba9 	bl	409c80 <__lshift>
  40852e:	4681      	mov	r9, r0
  408530:	9b06      	ldr	r3, [sp, #24]
  408532:	2b00      	cmp	r3, #0
  408534:	dd05      	ble.n	408542 <_dtoa_r+0x53a>
  408536:	4641      	mov	r1, r8
  408538:	461a      	mov	r2, r3
  40853a:	4620      	mov	r0, r4
  40853c:	f001 fba0 	bl	409c80 <__lshift>
  408540:	4680      	mov	r8, r0
  408542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408544:	2b00      	cmp	r3, #0
  408546:	f040 8086 	bne.w	408656 <_dtoa_r+0x64e>
  40854a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40854c:	2b00      	cmp	r3, #0
  40854e:	f340 8266 	ble.w	408a1e <_dtoa_r+0xa16>
  408552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408554:	2b00      	cmp	r3, #0
  408556:	f000 8098 	beq.w	40868a <_dtoa_r+0x682>
  40855a:	2d00      	cmp	r5, #0
  40855c:	dd05      	ble.n	40856a <_dtoa_r+0x562>
  40855e:	4631      	mov	r1, r6
  408560:	462a      	mov	r2, r5
  408562:	4620      	mov	r0, r4
  408564:	f001 fb8c 	bl	409c80 <__lshift>
  408568:	4606      	mov	r6, r0
  40856a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40856c:	2b00      	cmp	r3, #0
  40856e:	f040 8337 	bne.w	408be0 <_dtoa_r+0xbd8>
  408572:	9606      	str	r6, [sp, #24]
  408574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408576:	9a04      	ldr	r2, [sp, #16]
  408578:	f8dd b018 	ldr.w	fp, [sp, #24]
  40857c:	3b01      	subs	r3, #1
  40857e:	18d3      	adds	r3, r2, r3
  408580:	930b      	str	r3, [sp, #44]	; 0x2c
  408582:	f00a 0301 	and.w	r3, sl, #1
  408586:	930c      	str	r3, [sp, #48]	; 0x30
  408588:	4617      	mov	r7, r2
  40858a:	46c2      	mov	sl, r8
  40858c:	4651      	mov	r1, sl
  40858e:	4648      	mov	r0, r9
  408590:	f7ff fca6 	bl	407ee0 <quorem>
  408594:	4631      	mov	r1, r6
  408596:	4605      	mov	r5, r0
  408598:	4648      	mov	r0, r9
  40859a:	f001 fbc3 	bl	409d24 <__mcmp>
  40859e:	465a      	mov	r2, fp
  4085a0:	900a      	str	r0, [sp, #40]	; 0x28
  4085a2:	4651      	mov	r1, sl
  4085a4:	4620      	mov	r0, r4
  4085a6:	f001 fbd9 	bl	409d5c <__mdiff>
  4085aa:	68c2      	ldr	r2, [r0, #12]
  4085ac:	4680      	mov	r8, r0
  4085ae:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4085b2:	2a00      	cmp	r2, #0
  4085b4:	f040 822b 	bne.w	408a0e <_dtoa_r+0xa06>
  4085b8:	4601      	mov	r1, r0
  4085ba:	4648      	mov	r0, r9
  4085bc:	9308      	str	r3, [sp, #32]
  4085be:	f001 fbb1 	bl	409d24 <__mcmp>
  4085c2:	4641      	mov	r1, r8
  4085c4:	9006      	str	r0, [sp, #24]
  4085c6:	4620      	mov	r0, r4
  4085c8:	f001 f9d4 	bl	409974 <_Bfree>
  4085cc:	9a06      	ldr	r2, [sp, #24]
  4085ce:	9b08      	ldr	r3, [sp, #32]
  4085d0:	b932      	cbnz	r2, 4085e0 <_dtoa_r+0x5d8>
  4085d2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4085d4:	b921      	cbnz	r1, 4085e0 <_dtoa_r+0x5d8>
  4085d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4085d8:	2a00      	cmp	r2, #0
  4085da:	f000 83ef 	beq.w	408dbc <_dtoa_r+0xdb4>
  4085de:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4085e0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4085e2:	2900      	cmp	r1, #0
  4085e4:	f2c0 829f 	blt.w	408b26 <_dtoa_r+0xb1e>
  4085e8:	d105      	bne.n	4085f6 <_dtoa_r+0x5ee>
  4085ea:	9924      	ldr	r1, [sp, #144]	; 0x90
  4085ec:	b919      	cbnz	r1, 4085f6 <_dtoa_r+0x5ee>
  4085ee:	990c      	ldr	r1, [sp, #48]	; 0x30
  4085f0:	2900      	cmp	r1, #0
  4085f2:	f000 8298 	beq.w	408b26 <_dtoa_r+0xb1e>
  4085f6:	2a00      	cmp	r2, #0
  4085f8:	f300 8306 	bgt.w	408c08 <_dtoa_r+0xc00>
  4085fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4085fe:	703b      	strb	r3, [r7, #0]
  408600:	f107 0801 	add.w	r8, r7, #1
  408604:	4297      	cmp	r7, r2
  408606:	4645      	mov	r5, r8
  408608:	f000 830c 	beq.w	408c24 <_dtoa_r+0xc1c>
  40860c:	4649      	mov	r1, r9
  40860e:	2300      	movs	r3, #0
  408610:	220a      	movs	r2, #10
  408612:	4620      	mov	r0, r4
  408614:	f001 f9b8 	bl	409988 <__multadd>
  408618:	455e      	cmp	r6, fp
  40861a:	4681      	mov	r9, r0
  40861c:	4631      	mov	r1, r6
  40861e:	f04f 0300 	mov.w	r3, #0
  408622:	f04f 020a 	mov.w	r2, #10
  408626:	4620      	mov	r0, r4
  408628:	f000 81eb 	beq.w	408a02 <_dtoa_r+0x9fa>
  40862c:	f001 f9ac 	bl	409988 <__multadd>
  408630:	4659      	mov	r1, fp
  408632:	4606      	mov	r6, r0
  408634:	2300      	movs	r3, #0
  408636:	220a      	movs	r2, #10
  408638:	4620      	mov	r0, r4
  40863a:	f001 f9a5 	bl	409988 <__multadd>
  40863e:	4647      	mov	r7, r8
  408640:	4683      	mov	fp, r0
  408642:	e7a3      	b.n	40858c <_dtoa_r+0x584>
  408644:	201c      	movs	r0, #28
  408646:	9b08      	ldr	r3, [sp, #32]
  408648:	4403      	add	r3, r0
  40864a:	9308      	str	r3, [sp, #32]
  40864c:	9b06      	ldr	r3, [sp, #24]
  40864e:	4403      	add	r3, r0
  408650:	4405      	add	r5, r0
  408652:	9306      	str	r3, [sp, #24]
  408654:	e763      	b.n	40851e <_dtoa_r+0x516>
  408656:	4641      	mov	r1, r8
  408658:	4648      	mov	r0, r9
  40865a:	f001 fb63 	bl	409d24 <__mcmp>
  40865e:	2800      	cmp	r0, #0
  408660:	f6bf af73 	bge.w	40854a <_dtoa_r+0x542>
  408664:	9f02      	ldr	r7, [sp, #8]
  408666:	4649      	mov	r1, r9
  408668:	2300      	movs	r3, #0
  40866a:	220a      	movs	r2, #10
  40866c:	4620      	mov	r0, r4
  40866e:	3f01      	subs	r7, #1
  408670:	9702      	str	r7, [sp, #8]
  408672:	f001 f989 	bl	409988 <__multadd>
  408676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408678:	4681      	mov	r9, r0
  40867a:	2b00      	cmp	r3, #0
  40867c:	f040 83b6 	bne.w	408dec <_dtoa_r+0xde4>
  408680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408682:	2b00      	cmp	r3, #0
  408684:	f340 83bf 	ble.w	408e06 <_dtoa_r+0xdfe>
  408688:	930a      	str	r3, [sp, #40]	; 0x28
  40868a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40868e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408690:	465d      	mov	r5, fp
  408692:	e002      	b.n	40869a <_dtoa_r+0x692>
  408694:	f001 f978 	bl	409988 <__multadd>
  408698:	4681      	mov	r9, r0
  40869a:	4641      	mov	r1, r8
  40869c:	4648      	mov	r0, r9
  40869e:	f7ff fc1f 	bl	407ee0 <quorem>
  4086a2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4086a6:	f805 ab01 	strb.w	sl, [r5], #1
  4086aa:	eba5 030b 	sub.w	r3, r5, fp
  4086ae:	42bb      	cmp	r3, r7
  4086b0:	f04f 020a 	mov.w	r2, #10
  4086b4:	f04f 0300 	mov.w	r3, #0
  4086b8:	4649      	mov	r1, r9
  4086ba:	4620      	mov	r0, r4
  4086bc:	dbea      	blt.n	408694 <_dtoa_r+0x68c>
  4086be:	9b04      	ldr	r3, [sp, #16]
  4086c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4086c2:	2a01      	cmp	r2, #1
  4086c4:	bfac      	ite	ge
  4086c6:	189b      	addge	r3, r3, r2
  4086c8:	3301      	addlt	r3, #1
  4086ca:	461d      	mov	r5, r3
  4086cc:	f04f 0b00 	mov.w	fp, #0
  4086d0:	4649      	mov	r1, r9
  4086d2:	2201      	movs	r2, #1
  4086d4:	4620      	mov	r0, r4
  4086d6:	f001 fad3 	bl	409c80 <__lshift>
  4086da:	4641      	mov	r1, r8
  4086dc:	4681      	mov	r9, r0
  4086de:	f001 fb21 	bl	409d24 <__mcmp>
  4086e2:	2800      	cmp	r0, #0
  4086e4:	f340 823d 	ble.w	408b62 <_dtoa_r+0xb5a>
  4086e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4086ec:	9904      	ldr	r1, [sp, #16]
  4086ee:	1e6b      	subs	r3, r5, #1
  4086f0:	e004      	b.n	4086fc <_dtoa_r+0x6f4>
  4086f2:	428b      	cmp	r3, r1
  4086f4:	f000 81ae 	beq.w	408a54 <_dtoa_r+0xa4c>
  4086f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4086fc:	2a39      	cmp	r2, #57	; 0x39
  4086fe:	f103 0501 	add.w	r5, r3, #1
  408702:	d0f6      	beq.n	4086f2 <_dtoa_r+0x6ea>
  408704:	3201      	adds	r2, #1
  408706:	701a      	strb	r2, [r3, #0]
  408708:	4641      	mov	r1, r8
  40870a:	4620      	mov	r0, r4
  40870c:	f001 f932 	bl	409974 <_Bfree>
  408710:	2e00      	cmp	r6, #0
  408712:	f43f ae3d 	beq.w	408390 <_dtoa_r+0x388>
  408716:	f1bb 0f00 	cmp.w	fp, #0
  40871a:	d005      	beq.n	408728 <_dtoa_r+0x720>
  40871c:	45b3      	cmp	fp, r6
  40871e:	d003      	beq.n	408728 <_dtoa_r+0x720>
  408720:	4659      	mov	r1, fp
  408722:	4620      	mov	r0, r4
  408724:	f001 f926 	bl	409974 <_Bfree>
  408728:	4631      	mov	r1, r6
  40872a:	4620      	mov	r0, r4
  40872c:	f001 f922 	bl	409974 <_Bfree>
  408730:	e62e      	b.n	408390 <_dtoa_r+0x388>
  408732:	2300      	movs	r3, #0
  408734:	930b      	str	r3, [sp, #44]	; 0x2c
  408736:	9b02      	ldr	r3, [sp, #8]
  408738:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40873a:	4413      	add	r3, r2
  40873c:	930f      	str	r3, [sp, #60]	; 0x3c
  40873e:	3301      	adds	r3, #1
  408740:	2b01      	cmp	r3, #1
  408742:	461f      	mov	r7, r3
  408744:	461e      	mov	r6, r3
  408746:	930a      	str	r3, [sp, #40]	; 0x28
  408748:	bfb8      	it	lt
  40874a:	2701      	movlt	r7, #1
  40874c:	2100      	movs	r1, #0
  40874e:	2f17      	cmp	r7, #23
  408750:	6461      	str	r1, [r4, #68]	; 0x44
  408752:	d90a      	bls.n	40876a <_dtoa_r+0x762>
  408754:	2201      	movs	r2, #1
  408756:	2304      	movs	r3, #4
  408758:	005b      	lsls	r3, r3, #1
  40875a:	f103 0014 	add.w	r0, r3, #20
  40875e:	4287      	cmp	r7, r0
  408760:	4611      	mov	r1, r2
  408762:	f102 0201 	add.w	r2, r2, #1
  408766:	d2f7      	bcs.n	408758 <_dtoa_r+0x750>
  408768:	6461      	str	r1, [r4, #68]	; 0x44
  40876a:	4620      	mov	r0, r4
  40876c:	f001 f8dc 	bl	409928 <_Balloc>
  408770:	2e0e      	cmp	r6, #14
  408772:	9004      	str	r0, [sp, #16]
  408774:	6420      	str	r0, [r4, #64]	; 0x40
  408776:	f63f ad41 	bhi.w	4081fc <_dtoa_r+0x1f4>
  40877a:	2d00      	cmp	r5, #0
  40877c:	f43f ad3e 	beq.w	4081fc <_dtoa_r+0x1f4>
  408780:	9902      	ldr	r1, [sp, #8]
  408782:	2900      	cmp	r1, #0
  408784:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  408788:	f340 8202 	ble.w	408b90 <_dtoa_r+0xb88>
  40878c:	4bb8      	ldr	r3, [pc, #736]	; (408a70 <_dtoa_r+0xa68>)
  40878e:	f001 020f 	and.w	r2, r1, #15
  408792:	110d      	asrs	r5, r1, #4
  408794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408798:	06e9      	lsls	r1, r5, #27
  40879a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40879e:	f140 81ae 	bpl.w	408afe <_dtoa_r+0xaf6>
  4087a2:	4bb4      	ldr	r3, [pc, #720]	; (408a74 <_dtoa_r+0xa6c>)
  4087a4:	4650      	mov	r0, sl
  4087a6:	4659      	mov	r1, fp
  4087a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4087ac:	f7fc fdba 	bl	405324 <__aeabi_ddiv>
  4087b0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4087b4:	f005 050f 	and.w	r5, r5, #15
  4087b8:	f04f 0a03 	mov.w	sl, #3
  4087bc:	b18d      	cbz	r5, 4087e2 <_dtoa_r+0x7da>
  4087be:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 408a74 <_dtoa_r+0xa6c>
  4087c2:	07ea      	lsls	r2, r5, #31
  4087c4:	d509      	bpl.n	4087da <_dtoa_r+0x7d2>
  4087c6:	4630      	mov	r0, r6
  4087c8:	4639      	mov	r1, r7
  4087ca:	e9d8 2300 	ldrd	r2, r3, [r8]
  4087ce:	f7fc fc7f 	bl	4050d0 <__aeabi_dmul>
  4087d2:	f10a 0a01 	add.w	sl, sl, #1
  4087d6:	4606      	mov	r6, r0
  4087d8:	460f      	mov	r7, r1
  4087da:	106d      	asrs	r5, r5, #1
  4087dc:	f108 0808 	add.w	r8, r8, #8
  4087e0:	d1ef      	bne.n	4087c2 <_dtoa_r+0x7ba>
  4087e2:	463b      	mov	r3, r7
  4087e4:	4632      	mov	r2, r6
  4087e6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4087ea:	f7fc fd9b 	bl	405324 <__aeabi_ddiv>
  4087ee:	4607      	mov	r7, r0
  4087f0:	4688      	mov	r8, r1
  4087f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4087f4:	b143      	cbz	r3, 408808 <_dtoa_r+0x800>
  4087f6:	2200      	movs	r2, #0
  4087f8:	4b9f      	ldr	r3, [pc, #636]	; (408a78 <_dtoa_r+0xa70>)
  4087fa:	4638      	mov	r0, r7
  4087fc:	4641      	mov	r1, r8
  4087fe:	f7fc fed9 	bl	4055b4 <__aeabi_dcmplt>
  408802:	2800      	cmp	r0, #0
  408804:	f040 8286 	bne.w	408d14 <_dtoa_r+0xd0c>
  408808:	4650      	mov	r0, sl
  40880a:	f7fc fbfb 	bl	405004 <__aeabi_i2d>
  40880e:	463a      	mov	r2, r7
  408810:	4643      	mov	r3, r8
  408812:	f7fc fc5d 	bl	4050d0 <__aeabi_dmul>
  408816:	4b99      	ldr	r3, [pc, #612]	; (408a7c <_dtoa_r+0xa74>)
  408818:	2200      	movs	r2, #0
  40881a:	f7fc faa7 	bl	404d6c <__adddf3>
  40881e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408820:	4605      	mov	r5, r0
  408822:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408826:	2b00      	cmp	r3, #0
  408828:	f000 813e 	beq.w	408aa8 <_dtoa_r+0xaa0>
  40882c:	9b02      	ldr	r3, [sp, #8]
  40882e:	9315      	str	r3, [sp, #84]	; 0x54
  408830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408832:	9312      	str	r3, [sp, #72]	; 0x48
  408834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408836:	2b00      	cmp	r3, #0
  408838:	f000 81fa 	beq.w	408c30 <_dtoa_r+0xc28>
  40883c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40883e:	4b8c      	ldr	r3, [pc, #560]	; (408a70 <_dtoa_r+0xa68>)
  408840:	498f      	ldr	r1, [pc, #572]	; (408a80 <_dtoa_r+0xa78>)
  408842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408846:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40884a:	2000      	movs	r0, #0
  40884c:	f7fc fd6a 	bl	405324 <__aeabi_ddiv>
  408850:	462a      	mov	r2, r5
  408852:	4633      	mov	r3, r6
  408854:	f7fc fa88 	bl	404d68 <__aeabi_dsub>
  408858:	4682      	mov	sl, r0
  40885a:	468b      	mov	fp, r1
  40885c:	4638      	mov	r0, r7
  40885e:	4641      	mov	r1, r8
  408860:	f002 f836 	bl	40a8d0 <__aeabi_d2iz>
  408864:	4605      	mov	r5, r0
  408866:	f7fc fbcd 	bl	405004 <__aeabi_i2d>
  40886a:	4602      	mov	r2, r0
  40886c:	460b      	mov	r3, r1
  40886e:	4638      	mov	r0, r7
  408870:	4641      	mov	r1, r8
  408872:	f7fc fa79 	bl	404d68 <__aeabi_dsub>
  408876:	3530      	adds	r5, #48	; 0x30
  408878:	fa5f f885 	uxtb.w	r8, r5
  40887c:	9d04      	ldr	r5, [sp, #16]
  40887e:	4606      	mov	r6, r0
  408880:	460f      	mov	r7, r1
  408882:	f885 8000 	strb.w	r8, [r5]
  408886:	4602      	mov	r2, r0
  408888:	460b      	mov	r3, r1
  40888a:	4650      	mov	r0, sl
  40888c:	4659      	mov	r1, fp
  40888e:	3501      	adds	r5, #1
  408890:	f7fc feae 	bl	4055f0 <__aeabi_dcmpgt>
  408894:	2800      	cmp	r0, #0
  408896:	d154      	bne.n	408942 <_dtoa_r+0x93a>
  408898:	4632      	mov	r2, r6
  40889a:	463b      	mov	r3, r7
  40889c:	2000      	movs	r0, #0
  40889e:	4976      	ldr	r1, [pc, #472]	; (408a78 <_dtoa_r+0xa70>)
  4088a0:	f7fc fa62 	bl	404d68 <__aeabi_dsub>
  4088a4:	4602      	mov	r2, r0
  4088a6:	460b      	mov	r3, r1
  4088a8:	4650      	mov	r0, sl
  4088aa:	4659      	mov	r1, fp
  4088ac:	f7fc fea0 	bl	4055f0 <__aeabi_dcmpgt>
  4088b0:	2800      	cmp	r0, #0
  4088b2:	f040 8270 	bne.w	408d96 <_dtoa_r+0xd8e>
  4088b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4088b8:	2a01      	cmp	r2, #1
  4088ba:	f000 8111 	beq.w	408ae0 <_dtoa_r+0xad8>
  4088be:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4088c0:	9a04      	ldr	r2, [sp, #16]
  4088c2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4088c6:	4413      	add	r3, r2
  4088c8:	4699      	mov	r9, r3
  4088ca:	e00d      	b.n	4088e8 <_dtoa_r+0x8e0>
  4088cc:	2000      	movs	r0, #0
  4088ce:	496a      	ldr	r1, [pc, #424]	; (408a78 <_dtoa_r+0xa70>)
  4088d0:	f7fc fa4a 	bl	404d68 <__aeabi_dsub>
  4088d4:	4652      	mov	r2, sl
  4088d6:	465b      	mov	r3, fp
  4088d8:	f7fc fe6c 	bl	4055b4 <__aeabi_dcmplt>
  4088dc:	2800      	cmp	r0, #0
  4088de:	f040 8258 	bne.w	408d92 <_dtoa_r+0xd8a>
  4088e2:	454d      	cmp	r5, r9
  4088e4:	f000 80fa 	beq.w	408adc <_dtoa_r+0xad4>
  4088e8:	4650      	mov	r0, sl
  4088ea:	4659      	mov	r1, fp
  4088ec:	2200      	movs	r2, #0
  4088ee:	4b65      	ldr	r3, [pc, #404]	; (408a84 <_dtoa_r+0xa7c>)
  4088f0:	f7fc fbee 	bl	4050d0 <__aeabi_dmul>
  4088f4:	2200      	movs	r2, #0
  4088f6:	4b63      	ldr	r3, [pc, #396]	; (408a84 <_dtoa_r+0xa7c>)
  4088f8:	4682      	mov	sl, r0
  4088fa:	468b      	mov	fp, r1
  4088fc:	4630      	mov	r0, r6
  4088fe:	4639      	mov	r1, r7
  408900:	f7fc fbe6 	bl	4050d0 <__aeabi_dmul>
  408904:	460f      	mov	r7, r1
  408906:	4606      	mov	r6, r0
  408908:	f001 ffe2 	bl	40a8d0 <__aeabi_d2iz>
  40890c:	4680      	mov	r8, r0
  40890e:	f7fc fb79 	bl	405004 <__aeabi_i2d>
  408912:	4602      	mov	r2, r0
  408914:	460b      	mov	r3, r1
  408916:	4630      	mov	r0, r6
  408918:	4639      	mov	r1, r7
  40891a:	f7fc fa25 	bl	404d68 <__aeabi_dsub>
  40891e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408922:	fa5f f888 	uxtb.w	r8, r8
  408926:	4652      	mov	r2, sl
  408928:	465b      	mov	r3, fp
  40892a:	f805 8b01 	strb.w	r8, [r5], #1
  40892e:	4606      	mov	r6, r0
  408930:	460f      	mov	r7, r1
  408932:	f7fc fe3f 	bl	4055b4 <__aeabi_dcmplt>
  408936:	4632      	mov	r2, r6
  408938:	463b      	mov	r3, r7
  40893a:	2800      	cmp	r0, #0
  40893c:	d0c6      	beq.n	4088cc <_dtoa_r+0x8c4>
  40893e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408942:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408944:	9302      	str	r3, [sp, #8]
  408946:	e523      	b.n	408390 <_dtoa_r+0x388>
  408948:	2300      	movs	r3, #0
  40894a:	930b      	str	r3, [sp, #44]	; 0x2c
  40894c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40894e:	2b00      	cmp	r3, #0
  408950:	f340 80dc 	ble.w	408b0c <_dtoa_r+0xb04>
  408954:	461f      	mov	r7, r3
  408956:	461e      	mov	r6, r3
  408958:	930f      	str	r3, [sp, #60]	; 0x3c
  40895a:	930a      	str	r3, [sp, #40]	; 0x28
  40895c:	e6f6      	b.n	40874c <_dtoa_r+0x744>
  40895e:	2301      	movs	r3, #1
  408960:	930b      	str	r3, [sp, #44]	; 0x2c
  408962:	e7f3      	b.n	40894c <_dtoa_r+0x944>
  408964:	f1ba 0f00 	cmp.w	sl, #0
  408968:	f47f ada8 	bne.w	4084bc <_dtoa_r+0x4b4>
  40896c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408970:	2b00      	cmp	r3, #0
  408972:	f47f adba 	bne.w	4084ea <_dtoa_r+0x4e2>
  408976:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40897a:	0d3f      	lsrs	r7, r7, #20
  40897c:	053f      	lsls	r7, r7, #20
  40897e:	2f00      	cmp	r7, #0
  408980:	f000 820d 	beq.w	408d9e <_dtoa_r+0xd96>
  408984:	9b08      	ldr	r3, [sp, #32]
  408986:	3301      	adds	r3, #1
  408988:	9308      	str	r3, [sp, #32]
  40898a:	9b06      	ldr	r3, [sp, #24]
  40898c:	3301      	adds	r3, #1
  40898e:	9306      	str	r3, [sp, #24]
  408990:	2301      	movs	r3, #1
  408992:	930c      	str	r3, [sp, #48]	; 0x30
  408994:	e5ab      	b.n	4084ee <_dtoa_r+0x4e6>
  408996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408998:	2b00      	cmp	r3, #0
  40899a:	f73f ac42 	bgt.w	408222 <_dtoa_r+0x21a>
  40899e:	f040 8221 	bne.w	408de4 <_dtoa_r+0xddc>
  4089a2:	2200      	movs	r2, #0
  4089a4:	4b38      	ldr	r3, [pc, #224]	; (408a88 <_dtoa_r+0xa80>)
  4089a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4089aa:	f7fc fb91 	bl	4050d0 <__aeabi_dmul>
  4089ae:	4652      	mov	r2, sl
  4089b0:	465b      	mov	r3, fp
  4089b2:	f7fc fe13 	bl	4055dc <__aeabi_dcmpge>
  4089b6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4089ba:	4646      	mov	r6, r8
  4089bc:	2800      	cmp	r0, #0
  4089be:	d041      	beq.n	408a44 <_dtoa_r+0xa3c>
  4089c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4089c2:	9d04      	ldr	r5, [sp, #16]
  4089c4:	43db      	mvns	r3, r3
  4089c6:	9302      	str	r3, [sp, #8]
  4089c8:	4641      	mov	r1, r8
  4089ca:	4620      	mov	r0, r4
  4089cc:	f000 ffd2 	bl	409974 <_Bfree>
  4089d0:	2e00      	cmp	r6, #0
  4089d2:	f43f acdd 	beq.w	408390 <_dtoa_r+0x388>
  4089d6:	e6a7      	b.n	408728 <_dtoa_r+0x720>
  4089d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4089da:	4649      	mov	r1, r9
  4089dc:	4620      	mov	r0, r4
  4089de:	f001 f8ff 	bl	409be0 <__pow5mult>
  4089e2:	4681      	mov	r9, r0
  4089e4:	e558      	b.n	408498 <_dtoa_r+0x490>
  4089e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4089e8:	2a00      	cmp	r2, #0
  4089ea:	f000 8187 	beq.w	408cfc <_dtoa_r+0xcf4>
  4089ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4089f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4089f4:	9d08      	ldr	r5, [sp, #32]
  4089f6:	e4f2      	b.n	4083de <_dtoa_r+0x3d6>
  4089f8:	f1ba 0f00 	cmp.w	sl, #0
  4089fc:	f47f ad75 	bne.w	4084ea <_dtoa_r+0x4e2>
  408a00:	e7b4      	b.n	40896c <_dtoa_r+0x964>
  408a02:	f000 ffc1 	bl	409988 <__multadd>
  408a06:	4647      	mov	r7, r8
  408a08:	4606      	mov	r6, r0
  408a0a:	4683      	mov	fp, r0
  408a0c:	e5be      	b.n	40858c <_dtoa_r+0x584>
  408a0e:	4601      	mov	r1, r0
  408a10:	4620      	mov	r0, r4
  408a12:	9306      	str	r3, [sp, #24]
  408a14:	f000 ffae 	bl	409974 <_Bfree>
  408a18:	2201      	movs	r2, #1
  408a1a:	9b06      	ldr	r3, [sp, #24]
  408a1c:	e5e0      	b.n	4085e0 <_dtoa_r+0x5d8>
  408a1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a20:	2b02      	cmp	r3, #2
  408a22:	f77f ad96 	ble.w	408552 <_dtoa_r+0x54a>
  408a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408a28:	2b00      	cmp	r3, #0
  408a2a:	d1c9      	bne.n	4089c0 <_dtoa_r+0x9b8>
  408a2c:	4641      	mov	r1, r8
  408a2e:	2205      	movs	r2, #5
  408a30:	4620      	mov	r0, r4
  408a32:	f000 ffa9 	bl	409988 <__multadd>
  408a36:	4601      	mov	r1, r0
  408a38:	4680      	mov	r8, r0
  408a3a:	4648      	mov	r0, r9
  408a3c:	f001 f972 	bl	409d24 <__mcmp>
  408a40:	2800      	cmp	r0, #0
  408a42:	ddbd      	ble.n	4089c0 <_dtoa_r+0x9b8>
  408a44:	9a02      	ldr	r2, [sp, #8]
  408a46:	9904      	ldr	r1, [sp, #16]
  408a48:	2331      	movs	r3, #49	; 0x31
  408a4a:	3201      	adds	r2, #1
  408a4c:	9202      	str	r2, [sp, #8]
  408a4e:	700b      	strb	r3, [r1, #0]
  408a50:	1c4d      	adds	r5, r1, #1
  408a52:	e7b9      	b.n	4089c8 <_dtoa_r+0x9c0>
  408a54:	9a02      	ldr	r2, [sp, #8]
  408a56:	3201      	adds	r2, #1
  408a58:	9202      	str	r2, [sp, #8]
  408a5a:	9a04      	ldr	r2, [sp, #16]
  408a5c:	2331      	movs	r3, #49	; 0x31
  408a5e:	7013      	strb	r3, [r2, #0]
  408a60:	e652      	b.n	408708 <_dtoa_r+0x700>
  408a62:	2301      	movs	r3, #1
  408a64:	930b      	str	r3, [sp, #44]	; 0x2c
  408a66:	e666      	b.n	408736 <_dtoa_r+0x72e>
  408a68:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408a6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408a6e:	e48f      	b.n	408390 <_dtoa_r+0x388>
  408a70:	0040b508 	.word	0x0040b508
  408a74:	0040b4e0 	.word	0x0040b4e0
  408a78:	3ff00000 	.word	0x3ff00000
  408a7c:	401c0000 	.word	0x401c0000
  408a80:	3fe00000 	.word	0x3fe00000
  408a84:	40240000 	.word	0x40240000
  408a88:	40140000 	.word	0x40140000
  408a8c:	4650      	mov	r0, sl
  408a8e:	f7fc fab9 	bl	405004 <__aeabi_i2d>
  408a92:	463a      	mov	r2, r7
  408a94:	4643      	mov	r3, r8
  408a96:	f7fc fb1b 	bl	4050d0 <__aeabi_dmul>
  408a9a:	2200      	movs	r2, #0
  408a9c:	4bc1      	ldr	r3, [pc, #772]	; (408da4 <_dtoa_r+0xd9c>)
  408a9e:	f7fc f965 	bl	404d6c <__adddf3>
  408aa2:	4605      	mov	r5, r0
  408aa4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408aa8:	4641      	mov	r1, r8
  408aaa:	2200      	movs	r2, #0
  408aac:	4bbe      	ldr	r3, [pc, #760]	; (408da8 <_dtoa_r+0xda0>)
  408aae:	4638      	mov	r0, r7
  408ab0:	f7fc f95a 	bl	404d68 <__aeabi_dsub>
  408ab4:	462a      	mov	r2, r5
  408ab6:	4633      	mov	r3, r6
  408ab8:	4682      	mov	sl, r0
  408aba:	468b      	mov	fp, r1
  408abc:	f7fc fd98 	bl	4055f0 <__aeabi_dcmpgt>
  408ac0:	4680      	mov	r8, r0
  408ac2:	2800      	cmp	r0, #0
  408ac4:	f040 8110 	bne.w	408ce8 <_dtoa_r+0xce0>
  408ac8:	462a      	mov	r2, r5
  408aca:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  408ace:	4650      	mov	r0, sl
  408ad0:	4659      	mov	r1, fp
  408ad2:	f7fc fd6f 	bl	4055b4 <__aeabi_dcmplt>
  408ad6:	b118      	cbz	r0, 408ae0 <_dtoa_r+0xad8>
  408ad8:	4646      	mov	r6, r8
  408ada:	e771      	b.n	4089c0 <_dtoa_r+0x9b8>
  408adc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408ae0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408ae4:	f7ff bb8a 	b.w	4081fc <_dtoa_r+0x1f4>
  408ae8:	9804      	ldr	r0, [sp, #16]
  408aea:	f7ff babb 	b.w	408064 <_dtoa_r+0x5c>
  408aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408af0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408af2:	970c      	str	r7, [sp, #48]	; 0x30
  408af4:	1afb      	subs	r3, r7, r3
  408af6:	441a      	add	r2, r3
  408af8:	920d      	str	r2, [sp, #52]	; 0x34
  408afa:	2700      	movs	r7, #0
  408afc:	e469      	b.n	4083d2 <_dtoa_r+0x3ca>
  408afe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408b02:	f04f 0a02 	mov.w	sl, #2
  408b06:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  408b0a:	e657      	b.n	4087bc <_dtoa_r+0x7b4>
  408b0c:	2100      	movs	r1, #0
  408b0e:	2301      	movs	r3, #1
  408b10:	6461      	str	r1, [r4, #68]	; 0x44
  408b12:	4620      	mov	r0, r4
  408b14:	9325      	str	r3, [sp, #148]	; 0x94
  408b16:	f000 ff07 	bl	409928 <_Balloc>
  408b1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408b1c:	9004      	str	r0, [sp, #16]
  408b1e:	6420      	str	r0, [r4, #64]	; 0x40
  408b20:	930a      	str	r3, [sp, #40]	; 0x28
  408b22:	930f      	str	r3, [sp, #60]	; 0x3c
  408b24:	e629      	b.n	40877a <_dtoa_r+0x772>
  408b26:	2a00      	cmp	r2, #0
  408b28:	46d0      	mov	r8, sl
  408b2a:	f8cd b018 	str.w	fp, [sp, #24]
  408b2e:	469a      	mov	sl, r3
  408b30:	dd11      	ble.n	408b56 <_dtoa_r+0xb4e>
  408b32:	4649      	mov	r1, r9
  408b34:	2201      	movs	r2, #1
  408b36:	4620      	mov	r0, r4
  408b38:	f001 f8a2 	bl	409c80 <__lshift>
  408b3c:	4641      	mov	r1, r8
  408b3e:	4681      	mov	r9, r0
  408b40:	f001 f8f0 	bl	409d24 <__mcmp>
  408b44:	2800      	cmp	r0, #0
  408b46:	f340 8146 	ble.w	408dd6 <_dtoa_r+0xdce>
  408b4a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  408b4e:	f000 8106 	beq.w	408d5e <_dtoa_r+0xd56>
  408b52:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  408b56:	46b3      	mov	fp, r6
  408b58:	f887 a000 	strb.w	sl, [r7]
  408b5c:	1c7d      	adds	r5, r7, #1
  408b5e:	9e06      	ldr	r6, [sp, #24]
  408b60:	e5d2      	b.n	408708 <_dtoa_r+0x700>
  408b62:	d104      	bne.n	408b6e <_dtoa_r+0xb66>
  408b64:	f01a 0f01 	tst.w	sl, #1
  408b68:	d001      	beq.n	408b6e <_dtoa_r+0xb66>
  408b6a:	e5bd      	b.n	4086e8 <_dtoa_r+0x6e0>
  408b6c:	4615      	mov	r5, r2
  408b6e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408b72:	2b30      	cmp	r3, #48	; 0x30
  408b74:	f105 32ff 	add.w	r2, r5, #4294967295
  408b78:	d0f8      	beq.n	408b6c <_dtoa_r+0xb64>
  408b7a:	e5c5      	b.n	408708 <_dtoa_r+0x700>
  408b7c:	9904      	ldr	r1, [sp, #16]
  408b7e:	2230      	movs	r2, #48	; 0x30
  408b80:	700a      	strb	r2, [r1, #0]
  408b82:	9a02      	ldr	r2, [sp, #8]
  408b84:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408b88:	3201      	adds	r2, #1
  408b8a:	9202      	str	r2, [sp, #8]
  408b8c:	f7ff bbfc 	b.w	408388 <_dtoa_r+0x380>
  408b90:	f000 80bb 	beq.w	408d0a <_dtoa_r+0xd02>
  408b94:	9b02      	ldr	r3, [sp, #8]
  408b96:	425d      	negs	r5, r3
  408b98:	4b84      	ldr	r3, [pc, #528]	; (408dac <_dtoa_r+0xda4>)
  408b9a:	f005 020f 	and.w	r2, r5, #15
  408b9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ba6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  408baa:	f7fc fa91 	bl	4050d0 <__aeabi_dmul>
  408bae:	112d      	asrs	r5, r5, #4
  408bb0:	4607      	mov	r7, r0
  408bb2:	4688      	mov	r8, r1
  408bb4:	f000 812c 	beq.w	408e10 <_dtoa_r+0xe08>
  408bb8:	4e7d      	ldr	r6, [pc, #500]	; (408db0 <_dtoa_r+0xda8>)
  408bba:	f04f 0a02 	mov.w	sl, #2
  408bbe:	07eb      	lsls	r3, r5, #31
  408bc0:	d509      	bpl.n	408bd6 <_dtoa_r+0xbce>
  408bc2:	4638      	mov	r0, r7
  408bc4:	4641      	mov	r1, r8
  408bc6:	e9d6 2300 	ldrd	r2, r3, [r6]
  408bca:	f7fc fa81 	bl	4050d0 <__aeabi_dmul>
  408bce:	f10a 0a01 	add.w	sl, sl, #1
  408bd2:	4607      	mov	r7, r0
  408bd4:	4688      	mov	r8, r1
  408bd6:	106d      	asrs	r5, r5, #1
  408bd8:	f106 0608 	add.w	r6, r6, #8
  408bdc:	d1ef      	bne.n	408bbe <_dtoa_r+0xbb6>
  408bde:	e608      	b.n	4087f2 <_dtoa_r+0x7ea>
  408be0:	6871      	ldr	r1, [r6, #4]
  408be2:	4620      	mov	r0, r4
  408be4:	f000 fea0 	bl	409928 <_Balloc>
  408be8:	6933      	ldr	r3, [r6, #16]
  408bea:	3302      	adds	r3, #2
  408bec:	009a      	lsls	r2, r3, #2
  408bee:	4605      	mov	r5, r0
  408bf0:	f106 010c 	add.w	r1, r6, #12
  408bf4:	300c      	adds	r0, #12
  408bf6:	f7fd fb53 	bl	4062a0 <memcpy>
  408bfa:	4629      	mov	r1, r5
  408bfc:	2201      	movs	r2, #1
  408bfe:	4620      	mov	r0, r4
  408c00:	f001 f83e 	bl	409c80 <__lshift>
  408c04:	9006      	str	r0, [sp, #24]
  408c06:	e4b5      	b.n	408574 <_dtoa_r+0x56c>
  408c08:	2b39      	cmp	r3, #57	; 0x39
  408c0a:	f8cd b018 	str.w	fp, [sp, #24]
  408c0e:	46d0      	mov	r8, sl
  408c10:	f000 80a5 	beq.w	408d5e <_dtoa_r+0xd56>
  408c14:	f103 0a01 	add.w	sl, r3, #1
  408c18:	46b3      	mov	fp, r6
  408c1a:	f887 a000 	strb.w	sl, [r7]
  408c1e:	1c7d      	adds	r5, r7, #1
  408c20:	9e06      	ldr	r6, [sp, #24]
  408c22:	e571      	b.n	408708 <_dtoa_r+0x700>
  408c24:	465a      	mov	r2, fp
  408c26:	46d0      	mov	r8, sl
  408c28:	46b3      	mov	fp, r6
  408c2a:	469a      	mov	sl, r3
  408c2c:	4616      	mov	r6, r2
  408c2e:	e54f      	b.n	4086d0 <_dtoa_r+0x6c8>
  408c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c32:	495e      	ldr	r1, [pc, #376]	; (408dac <_dtoa_r+0xda4>)
  408c34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408c38:	462a      	mov	r2, r5
  408c3a:	4633      	mov	r3, r6
  408c3c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  408c40:	f7fc fa46 	bl	4050d0 <__aeabi_dmul>
  408c44:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  408c48:	4638      	mov	r0, r7
  408c4a:	4641      	mov	r1, r8
  408c4c:	f001 fe40 	bl	40a8d0 <__aeabi_d2iz>
  408c50:	4605      	mov	r5, r0
  408c52:	f7fc f9d7 	bl	405004 <__aeabi_i2d>
  408c56:	460b      	mov	r3, r1
  408c58:	4602      	mov	r2, r0
  408c5a:	4641      	mov	r1, r8
  408c5c:	4638      	mov	r0, r7
  408c5e:	f7fc f883 	bl	404d68 <__aeabi_dsub>
  408c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c64:	460f      	mov	r7, r1
  408c66:	9904      	ldr	r1, [sp, #16]
  408c68:	3530      	adds	r5, #48	; 0x30
  408c6a:	2b01      	cmp	r3, #1
  408c6c:	700d      	strb	r5, [r1, #0]
  408c6e:	4606      	mov	r6, r0
  408c70:	f101 0501 	add.w	r5, r1, #1
  408c74:	d026      	beq.n	408cc4 <_dtoa_r+0xcbc>
  408c76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c78:	9a04      	ldr	r2, [sp, #16]
  408c7a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408db8 <_dtoa_r+0xdb0>
  408c7e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408c82:	4413      	add	r3, r2
  408c84:	f04f 0a00 	mov.w	sl, #0
  408c88:	4699      	mov	r9, r3
  408c8a:	4652      	mov	r2, sl
  408c8c:	465b      	mov	r3, fp
  408c8e:	4630      	mov	r0, r6
  408c90:	4639      	mov	r1, r7
  408c92:	f7fc fa1d 	bl	4050d0 <__aeabi_dmul>
  408c96:	460f      	mov	r7, r1
  408c98:	4606      	mov	r6, r0
  408c9a:	f001 fe19 	bl	40a8d0 <__aeabi_d2iz>
  408c9e:	4680      	mov	r8, r0
  408ca0:	f7fc f9b0 	bl	405004 <__aeabi_i2d>
  408ca4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408ca8:	4602      	mov	r2, r0
  408caa:	460b      	mov	r3, r1
  408cac:	4630      	mov	r0, r6
  408cae:	4639      	mov	r1, r7
  408cb0:	f7fc f85a 	bl	404d68 <__aeabi_dsub>
  408cb4:	f805 8b01 	strb.w	r8, [r5], #1
  408cb8:	454d      	cmp	r5, r9
  408cba:	4606      	mov	r6, r0
  408cbc:	460f      	mov	r7, r1
  408cbe:	d1e4      	bne.n	408c8a <_dtoa_r+0xc82>
  408cc0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408cc4:	4b3b      	ldr	r3, [pc, #236]	; (408db4 <_dtoa_r+0xdac>)
  408cc6:	2200      	movs	r2, #0
  408cc8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408ccc:	f7fc f84e 	bl	404d6c <__adddf3>
  408cd0:	4632      	mov	r2, r6
  408cd2:	463b      	mov	r3, r7
  408cd4:	f7fc fc6e 	bl	4055b4 <__aeabi_dcmplt>
  408cd8:	2800      	cmp	r0, #0
  408cda:	d046      	beq.n	408d6a <_dtoa_r+0xd62>
  408cdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408cde:	9302      	str	r3, [sp, #8]
  408ce0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408ce4:	f7ff bb43 	b.w	40836e <_dtoa_r+0x366>
  408ce8:	f04f 0800 	mov.w	r8, #0
  408cec:	4646      	mov	r6, r8
  408cee:	e6a9      	b.n	408a44 <_dtoa_r+0xa3c>
  408cf0:	9b08      	ldr	r3, [sp, #32]
  408cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408cf4:	1a9d      	subs	r5, r3, r2
  408cf6:	2300      	movs	r3, #0
  408cf8:	f7ff bb71 	b.w	4083de <_dtoa_r+0x3d6>
  408cfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  408cfe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408d00:	9d08      	ldr	r5, [sp, #32]
  408d02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408d06:	f7ff bb6a 	b.w	4083de <_dtoa_r+0x3d6>
  408d0a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  408d0e:	f04f 0a02 	mov.w	sl, #2
  408d12:	e56e      	b.n	4087f2 <_dtoa_r+0x7ea>
  408d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408d16:	2b00      	cmp	r3, #0
  408d18:	f43f aeb8 	beq.w	408a8c <_dtoa_r+0xa84>
  408d1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408d1e:	2b00      	cmp	r3, #0
  408d20:	f77f aede 	ble.w	408ae0 <_dtoa_r+0xad8>
  408d24:	2200      	movs	r2, #0
  408d26:	4b24      	ldr	r3, [pc, #144]	; (408db8 <_dtoa_r+0xdb0>)
  408d28:	4638      	mov	r0, r7
  408d2a:	4641      	mov	r1, r8
  408d2c:	f7fc f9d0 	bl	4050d0 <__aeabi_dmul>
  408d30:	4607      	mov	r7, r0
  408d32:	4688      	mov	r8, r1
  408d34:	f10a 0001 	add.w	r0, sl, #1
  408d38:	f7fc f964 	bl	405004 <__aeabi_i2d>
  408d3c:	463a      	mov	r2, r7
  408d3e:	4643      	mov	r3, r8
  408d40:	f7fc f9c6 	bl	4050d0 <__aeabi_dmul>
  408d44:	2200      	movs	r2, #0
  408d46:	4b17      	ldr	r3, [pc, #92]	; (408da4 <_dtoa_r+0xd9c>)
  408d48:	f7fc f810 	bl	404d6c <__adddf3>
  408d4c:	9a02      	ldr	r2, [sp, #8]
  408d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408d50:	9312      	str	r3, [sp, #72]	; 0x48
  408d52:	3a01      	subs	r2, #1
  408d54:	4605      	mov	r5, r0
  408d56:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408d5a:	9215      	str	r2, [sp, #84]	; 0x54
  408d5c:	e56a      	b.n	408834 <_dtoa_r+0x82c>
  408d5e:	2239      	movs	r2, #57	; 0x39
  408d60:	46b3      	mov	fp, r6
  408d62:	703a      	strb	r2, [r7, #0]
  408d64:	9e06      	ldr	r6, [sp, #24]
  408d66:	1c7d      	adds	r5, r7, #1
  408d68:	e4c0      	b.n	4086ec <_dtoa_r+0x6e4>
  408d6a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  408d6e:	2000      	movs	r0, #0
  408d70:	4910      	ldr	r1, [pc, #64]	; (408db4 <_dtoa_r+0xdac>)
  408d72:	f7fb fff9 	bl	404d68 <__aeabi_dsub>
  408d76:	4632      	mov	r2, r6
  408d78:	463b      	mov	r3, r7
  408d7a:	f7fc fc39 	bl	4055f0 <__aeabi_dcmpgt>
  408d7e:	b908      	cbnz	r0, 408d84 <_dtoa_r+0xd7c>
  408d80:	e6ae      	b.n	408ae0 <_dtoa_r+0xad8>
  408d82:	4615      	mov	r5, r2
  408d84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408d88:	2b30      	cmp	r3, #48	; 0x30
  408d8a:	f105 32ff 	add.w	r2, r5, #4294967295
  408d8e:	d0f8      	beq.n	408d82 <_dtoa_r+0xd7a>
  408d90:	e5d7      	b.n	408942 <_dtoa_r+0x93a>
  408d92:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408d96:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408d98:	9302      	str	r3, [sp, #8]
  408d9a:	f7ff bae8 	b.w	40836e <_dtoa_r+0x366>
  408d9e:	970c      	str	r7, [sp, #48]	; 0x30
  408da0:	f7ff bba5 	b.w	4084ee <_dtoa_r+0x4e6>
  408da4:	401c0000 	.word	0x401c0000
  408da8:	40140000 	.word	0x40140000
  408dac:	0040b508 	.word	0x0040b508
  408db0:	0040b4e0 	.word	0x0040b4e0
  408db4:	3fe00000 	.word	0x3fe00000
  408db8:	40240000 	.word	0x40240000
  408dbc:	2b39      	cmp	r3, #57	; 0x39
  408dbe:	f8cd b018 	str.w	fp, [sp, #24]
  408dc2:	46d0      	mov	r8, sl
  408dc4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408dc8:	469a      	mov	sl, r3
  408dca:	d0c8      	beq.n	408d5e <_dtoa_r+0xd56>
  408dcc:	f1bb 0f00 	cmp.w	fp, #0
  408dd0:	f73f aebf 	bgt.w	408b52 <_dtoa_r+0xb4a>
  408dd4:	e6bf      	b.n	408b56 <_dtoa_r+0xb4e>
  408dd6:	f47f aebe 	bne.w	408b56 <_dtoa_r+0xb4e>
  408dda:	f01a 0f01 	tst.w	sl, #1
  408dde:	f43f aeba 	beq.w	408b56 <_dtoa_r+0xb4e>
  408de2:	e6b2      	b.n	408b4a <_dtoa_r+0xb42>
  408de4:	f04f 0800 	mov.w	r8, #0
  408de8:	4646      	mov	r6, r8
  408dea:	e5e9      	b.n	4089c0 <_dtoa_r+0x9b8>
  408dec:	4631      	mov	r1, r6
  408dee:	2300      	movs	r3, #0
  408df0:	220a      	movs	r2, #10
  408df2:	4620      	mov	r0, r4
  408df4:	f000 fdc8 	bl	409988 <__multadd>
  408df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408dfa:	2b00      	cmp	r3, #0
  408dfc:	4606      	mov	r6, r0
  408dfe:	dd0a      	ble.n	408e16 <_dtoa_r+0xe0e>
  408e00:	930a      	str	r3, [sp, #40]	; 0x28
  408e02:	f7ff bbaa 	b.w	40855a <_dtoa_r+0x552>
  408e06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408e08:	2b02      	cmp	r3, #2
  408e0a:	dc23      	bgt.n	408e54 <_dtoa_r+0xe4c>
  408e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408e0e:	e43b      	b.n	408688 <_dtoa_r+0x680>
  408e10:	f04f 0a02 	mov.w	sl, #2
  408e14:	e4ed      	b.n	4087f2 <_dtoa_r+0x7ea>
  408e16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408e18:	2b02      	cmp	r3, #2
  408e1a:	dc1b      	bgt.n	408e54 <_dtoa_r+0xe4c>
  408e1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408e1e:	e7ef      	b.n	408e00 <_dtoa_r+0xdf8>
  408e20:	2500      	movs	r5, #0
  408e22:	6465      	str	r5, [r4, #68]	; 0x44
  408e24:	4629      	mov	r1, r5
  408e26:	4620      	mov	r0, r4
  408e28:	f000 fd7e 	bl	409928 <_Balloc>
  408e2c:	f04f 33ff 	mov.w	r3, #4294967295
  408e30:	930a      	str	r3, [sp, #40]	; 0x28
  408e32:	930f      	str	r3, [sp, #60]	; 0x3c
  408e34:	2301      	movs	r3, #1
  408e36:	9004      	str	r0, [sp, #16]
  408e38:	9525      	str	r5, [sp, #148]	; 0x94
  408e3a:	6420      	str	r0, [r4, #64]	; 0x40
  408e3c:	930b      	str	r3, [sp, #44]	; 0x2c
  408e3e:	f7ff b9dd 	b.w	4081fc <_dtoa_r+0x1f4>
  408e42:	2501      	movs	r5, #1
  408e44:	f7ff b9a5 	b.w	408192 <_dtoa_r+0x18a>
  408e48:	f43f ab69 	beq.w	40851e <_dtoa_r+0x516>
  408e4c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408e50:	f7ff bbf9 	b.w	408646 <_dtoa_r+0x63e>
  408e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408e56:	930a      	str	r3, [sp, #40]	; 0x28
  408e58:	e5e5      	b.n	408a26 <_dtoa_r+0xa1e>
  408e5a:	bf00      	nop

00408e5c <__sflush_r>:
  408e5c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  408e60:	b29a      	uxth	r2, r3
  408e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408e66:	460d      	mov	r5, r1
  408e68:	0711      	lsls	r1, r2, #28
  408e6a:	4680      	mov	r8, r0
  408e6c:	d43a      	bmi.n	408ee4 <__sflush_r+0x88>
  408e6e:	686a      	ldr	r2, [r5, #4]
  408e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  408e74:	2a00      	cmp	r2, #0
  408e76:	81ab      	strh	r3, [r5, #12]
  408e78:	dd6f      	ble.n	408f5a <__sflush_r+0xfe>
  408e7a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408e7c:	2c00      	cmp	r4, #0
  408e7e:	d049      	beq.n	408f14 <__sflush_r+0xb8>
  408e80:	2200      	movs	r2, #0
  408e82:	b29b      	uxth	r3, r3
  408e84:	f8d8 6000 	ldr.w	r6, [r8]
  408e88:	f8c8 2000 	str.w	r2, [r8]
  408e8c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  408e90:	d067      	beq.n	408f62 <__sflush_r+0x106>
  408e92:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  408e94:	075f      	lsls	r7, r3, #29
  408e96:	d505      	bpl.n	408ea4 <__sflush_r+0x48>
  408e98:	6869      	ldr	r1, [r5, #4]
  408e9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  408e9c:	1a52      	subs	r2, r2, r1
  408e9e:	b10b      	cbz	r3, 408ea4 <__sflush_r+0x48>
  408ea0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  408ea2:	1ad2      	subs	r2, r2, r3
  408ea4:	2300      	movs	r3, #0
  408ea6:	69e9      	ldr	r1, [r5, #28]
  408ea8:	4640      	mov	r0, r8
  408eaa:	47a0      	blx	r4
  408eac:	1c44      	adds	r4, r0, #1
  408eae:	d03c      	beq.n	408f2a <__sflush_r+0xce>
  408eb0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  408eb4:	692a      	ldr	r2, [r5, #16]
  408eb6:	602a      	str	r2, [r5, #0]
  408eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408ebc:	2200      	movs	r2, #0
  408ebe:	81ab      	strh	r3, [r5, #12]
  408ec0:	04db      	lsls	r3, r3, #19
  408ec2:	606a      	str	r2, [r5, #4]
  408ec4:	d447      	bmi.n	408f56 <__sflush_r+0xfa>
  408ec6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408ec8:	f8c8 6000 	str.w	r6, [r8]
  408ecc:	b311      	cbz	r1, 408f14 <__sflush_r+0xb8>
  408ece:	f105 0340 	add.w	r3, r5, #64	; 0x40
  408ed2:	4299      	cmp	r1, r3
  408ed4:	d002      	beq.n	408edc <__sflush_r+0x80>
  408ed6:	4640      	mov	r0, r8
  408ed8:	f000 f95a 	bl	409190 <_free_r>
  408edc:	2000      	movs	r0, #0
  408ede:	6328      	str	r0, [r5, #48]	; 0x30
  408ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408ee4:	692e      	ldr	r6, [r5, #16]
  408ee6:	b1ae      	cbz	r6, 408f14 <__sflush_r+0xb8>
  408ee8:	682c      	ldr	r4, [r5, #0]
  408eea:	602e      	str	r6, [r5, #0]
  408eec:	0791      	lsls	r1, r2, #30
  408eee:	bf0c      	ite	eq
  408ef0:	696b      	ldreq	r3, [r5, #20]
  408ef2:	2300      	movne	r3, #0
  408ef4:	1ba4      	subs	r4, r4, r6
  408ef6:	60ab      	str	r3, [r5, #8]
  408ef8:	e00a      	b.n	408f10 <__sflush_r+0xb4>
  408efa:	4623      	mov	r3, r4
  408efc:	4632      	mov	r2, r6
  408efe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408f00:	69e9      	ldr	r1, [r5, #28]
  408f02:	4640      	mov	r0, r8
  408f04:	47b8      	blx	r7
  408f06:	2800      	cmp	r0, #0
  408f08:	eba4 0400 	sub.w	r4, r4, r0
  408f0c:	4406      	add	r6, r0
  408f0e:	dd04      	ble.n	408f1a <__sflush_r+0xbe>
  408f10:	2c00      	cmp	r4, #0
  408f12:	dcf2      	bgt.n	408efa <__sflush_r+0x9e>
  408f14:	2000      	movs	r0, #0
  408f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408f1a:	89ab      	ldrh	r3, [r5, #12]
  408f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408f20:	81ab      	strh	r3, [r5, #12]
  408f22:	f04f 30ff 	mov.w	r0, #4294967295
  408f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408f2a:	f8d8 4000 	ldr.w	r4, [r8]
  408f2e:	2c1d      	cmp	r4, #29
  408f30:	d8f3      	bhi.n	408f1a <__sflush_r+0xbe>
  408f32:	4b19      	ldr	r3, [pc, #100]	; (408f98 <__sflush_r+0x13c>)
  408f34:	40e3      	lsrs	r3, r4
  408f36:	43db      	mvns	r3, r3
  408f38:	f013 0301 	ands.w	r3, r3, #1
  408f3c:	d1ed      	bne.n	408f1a <__sflush_r+0xbe>
  408f3e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  408f42:	606b      	str	r3, [r5, #4]
  408f44:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  408f48:	6929      	ldr	r1, [r5, #16]
  408f4a:	81ab      	strh	r3, [r5, #12]
  408f4c:	04da      	lsls	r2, r3, #19
  408f4e:	6029      	str	r1, [r5, #0]
  408f50:	d5b9      	bpl.n	408ec6 <__sflush_r+0x6a>
  408f52:	2c00      	cmp	r4, #0
  408f54:	d1b7      	bne.n	408ec6 <__sflush_r+0x6a>
  408f56:	6528      	str	r0, [r5, #80]	; 0x50
  408f58:	e7b5      	b.n	408ec6 <__sflush_r+0x6a>
  408f5a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  408f5c:	2a00      	cmp	r2, #0
  408f5e:	dc8c      	bgt.n	408e7a <__sflush_r+0x1e>
  408f60:	e7d8      	b.n	408f14 <__sflush_r+0xb8>
  408f62:	2301      	movs	r3, #1
  408f64:	69e9      	ldr	r1, [r5, #28]
  408f66:	4640      	mov	r0, r8
  408f68:	47a0      	blx	r4
  408f6a:	1c43      	adds	r3, r0, #1
  408f6c:	4602      	mov	r2, r0
  408f6e:	d002      	beq.n	408f76 <__sflush_r+0x11a>
  408f70:	89ab      	ldrh	r3, [r5, #12]
  408f72:	6aac      	ldr	r4, [r5, #40]	; 0x28
  408f74:	e78e      	b.n	408e94 <__sflush_r+0x38>
  408f76:	f8d8 3000 	ldr.w	r3, [r8]
  408f7a:	2b00      	cmp	r3, #0
  408f7c:	d0f8      	beq.n	408f70 <__sflush_r+0x114>
  408f7e:	2b1d      	cmp	r3, #29
  408f80:	d001      	beq.n	408f86 <__sflush_r+0x12a>
  408f82:	2b16      	cmp	r3, #22
  408f84:	d102      	bne.n	408f8c <__sflush_r+0x130>
  408f86:	f8c8 6000 	str.w	r6, [r8]
  408f8a:	e7c3      	b.n	408f14 <__sflush_r+0xb8>
  408f8c:	89ab      	ldrh	r3, [r5, #12]
  408f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408f92:	81ab      	strh	r3, [r5, #12]
  408f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408f98:	20400001 	.word	0x20400001

00408f9c <_fflush_r>:
  408f9c:	b538      	push	{r3, r4, r5, lr}
  408f9e:	460d      	mov	r5, r1
  408fa0:	4604      	mov	r4, r0
  408fa2:	b108      	cbz	r0, 408fa8 <_fflush_r+0xc>
  408fa4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408fa6:	b1bb      	cbz	r3, 408fd8 <_fflush_r+0x3c>
  408fa8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408fac:	b188      	cbz	r0, 408fd2 <_fflush_r+0x36>
  408fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408fb0:	07db      	lsls	r3, r3, #31
  408fb2:	d401      	bmi.n	408fb8 <_fflush_r+0x1c>
  408fb4:	0581      	lsls	r1, r0, #22
  408fb6:	d517      	bpl.n	408fe8 <_fflush_r+0x4c>
  408fb8:	4620      	mov	r0, r4
  408fba:	4629      	mov	r1, r5
  408fbc:	f7ff ff4e 	bl	408e5c <__sflush_r>
  408fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408fc2:	07da      	lsls	r2, r3, #31
  408fc4:	4604      	mov	r4, r0
  408fc6:	d402      	bmi.n	408fce <_fflush_r+0x32>
  408fc8:	89ab      	ldrh	r3, [r5, #12]
  408fca:	059b      	lsls	r3, r3, #22
  408fcc:	d507      	bpl.n	408fde <_fflush_r+0x42>
  408fce:	4620      	mov	r0, r4
  408fd0:	bd38      	pop	{r3, r4, r5, pc}
  408fd2:	4604      	mov	r4, r0
  408fd4:	4620      	mov	r0, r4
  408fd6:	bd38      	pop	{r3, r4, r5, pc}
  408fd8:	f000 f838 	bl	40904c <__sinit>
  408fdc:	e7e4      	b.n	408fa8 <_fflush_r+0xc>
  408fde:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408fe0:	f000 fb72 	bl	4096c8 <__retarget_lock_release_recursive>
  408fe4:	4620      	mov	r0, r4
  408fe6:	bd38      	pop	{r3, r4, r5, pc}
  408fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408fea:	f000 fb6b 	bl	4096c4 <__retarget_lock_acquire_recursive>
  408fee:	e7e3      	b.n	408fb8 <_fflush_r+0x1c>

00408ff0 <_cleanup_r>:
  408ff0:	4901      	ldr	r1, [pc, #4]	; (408ff8 <_cleanup_r+0x8>)
  408ff2:	f000 bb2b 	b.w	40964c <_fwalk_reent>
  408ff6:	bf00      	nop
  408ff8:	0040a4f9 	.word	0x0040a4f9

00408ffc <std.isra.0>:
  408ffc:	b510      	push	{r4, lr}
  408ffe:	2300      	movs	r3, #0
  409000:	4604      	mov	r4, r0
  409002:	8181      	strh	r1, [r0, #12]
  409004:	81c2      	strh	r2, [r0, #14]
  409006:	6003      	str	r3, [r0, #0]
  409008:	6043      	str	r3, [r0, #4]
  40900a:	6083      	str	r3, [r0, #8]
  40900c:	6643      	str	r3, [r0, #100]	; 0x64
  40900e:	6103      	str	r3, [r0, #16]
  409010:	6143      	str	r3, [r0, #20]
  409012:	6183      	str	r3, [r0, #24]
  409014:	4619      	mov	r1, r3
  409016:	2208      	movs	r2, #8
  409018:	305c      	adds	r0, #92	; 0x5c
  40901a:	f7fd f9db 	bl	4063d4 <memset>
  40901e:	4807      	ldr	r0, [pc, #28]	; (40903c <std.isra.0+0x40>)
  409020:	4907      	ldr	r1, [pc, #28]	; (409040 <std.isra.0+0x44>)
  409022:	4a08      	ldr	r2, [pc, #32]	; (409044 <std.isra.0+0x48>)
  409024:	4b08      	ldr	r3, [pc, #32]	; (409048 <std.isra.0+0x4c>)
  409026:	6220      	str	r0, [r4, #32]
  409028:	61e4      	str	r4, [r4, #28]
  40902a:	6261      	str	r1, [r4, #36]	; 0x24
  40902c:	62a2      	str	r2, [r4, #40]	; 0x28
  40902e:	62e3      	str	r3, [r4, #44]	; 0x2c
  409030:	f104 0058 	add.w	r0, r4, #88	; 0x58
  409034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409038:	f000 bb40 	b.w	4096bc <__retarget_lock_init_recursive>
  40903c:	0040a269 	.word	0x0040a269
  409040:	0040a28d 	.word	0x0040a28d
  409044:	0040a2c9 	.word	0x0040a2c9
  409048:	0040a2e9 	.word	0x0040a2e9

0040904c <__sinit>:
  40904c:	b510      	push	{r4, lr}
  40904e:	4604      	mov	r4, r0
  409050:	4812      	ldr	r0, [pc, #72]	; (40909c <__sinit+0x50>)
  409052:	f000 fb37 	bl	4096c4 <__retarget_lock_acquire_recursive>
  409056:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  409058:	b9d2      	cbnz	r2, 409090 <__sinit+0x44>
  40905a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40905e:	4810      	ldr	r0, [pc, #64]	; (4090a0 <__sinit+0x54>)
  409060:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  409064:	2103      	movs	r1, #3
  409066:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40906a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40906c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  409070:	6860      	ldr	r0, [r4, #4]
  409072:	2104      	movs	r1, #4
  409074:	f7ff ffc2 	bl	408ffc <std.isra.0>
  409078:	2201      	movs	r2, #1
  40907a:	2109      	movs	r1, #9
  40907c:	68a0      	ldr	r0, [r4, #8]
  40907e:	f7ff ffbd 	bl	408ffc <std.isra.0>
  409082:	2202      	movs	r2, #2
  409084:	2112      	movs	r1, #18
  409086:	68e0      	ldr	r0, [r4, #12]
  409088:	f7ff ffb8 	bl	408ffc <std.isra.0>
  40908c:	2301      	movs	r3, #1
  40908e:	63a3      	str	r3, [r4, #56]	; 0x38
  409090:	4802      	ldr	r0, [pc, #8]	; (40909c <__sinit+0x50>)
  409092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409096:	f000 bb17 	b.w	4096c8 <__retarget_lock_release_recursive>
  40909a:	bf00      	nop
  40909c:	20400e48 	.word	0x20400e48
  4090a0:	00408ff1 	.word	0x00408ff1

004090a4 <__sfp_lock_acquire>:
  4090a4:	4801      	ldr	r0, [pc, #4]	; (4090ac <__sfp_lock_acquire+0x8>)
  4090a6:	f000 bb0d 	b.w	4096c4 <__retarget_lock_acquire_recursive>
  4090aa:	bf00      	nop
  4090ac:	20400e5c 	.word	0x20400e5c

004090b0 <__sfp_lock_release>:
  4090b0:	4801      	ldr	r0, [pc, #4]	; (4090b8 <__sfp_lock_release+0x8>)
  4090b2:	f000 bb09 	b.w	4096c8 <__retarget_lock_release_recursive>
  4090b6:	bf00      	nop
  4090b8:	20400e5c 	.word	0x20400e5c

004090bc <__libc_fini_array>:
  4090bc:	b538      	push	{r3, r4, r5, lr}
  4090be:	4c0a      	ldr	r4, [pc, #40]	; (4090e8 <__libc_fini_array+0x2c>)
  4090c0:	4d0a      	ldr	r5, [pc, #40]	; (4090ec <__libc_fini_array+0x30>)
  4090c2:	1b64      	subs	r4, r4, r5
  4090c4:	10a4      	asrs	r4, r4, #2
  4090c6:	d00a      	beq.n	4090de <__libc_fini_array+0x22>
  4090c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4090cc:	3b01      	subs	r3, #1
  4090ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4090d2:	3c01      	subs	r4, #1
  4090d4:	f855 3904 	ldr.w	r3, [r5], #-4
  4090d8:	4798      	blx	r3
  4090da:	2c00      	cmp	r4, #0
  4090dc:	d1f9      	bne.n	4090d2 <__libc_fini_array+0x16>
  4090de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4090e2:	f002 bb0f 	b.w	40b704 <_fini>
  4090e6:	bf00      	nop
  4090e8:	0040b714 	.word	0x0040b714
  4090ec:	0040b710 	.word	0x0040b710

004090f0 <_malloc_trim_r>:
  4090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4090f2:	4f24      	ldr	r7, [pc, #144]	; (409184 <_malloc_trim_r+0x94>)
  4090f4:	460c      	mov	r4, r1
  4090f6:	4606      	mov	r6, r0
  4090f8:	f7fd f9ba 	bl	406470 <__malloc_lock>
  4090fc:	68bb      	ldr	r3, [r7, #8]
  4090fe:	685d      	ldr	r5, [r3, #4]
  409100:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  409104:	310f      	adds	r1, #15
  409106:	f025 0503 	bic.w	r5, r5, #3
  40910a:	4429      	add	r1, r5
  40910c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  409110:	f021 010f 	bic.w	r1, r1, #15
  409114:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  409118:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40911c:	db07      	blt.n	40912e <_malloc_trim_r+0x3e>
  40911e:	2100      	movs	r1, #0
  409120:	4630      	mov	r0, r6
  409122:	f7fd fa1b 	bl	40655c <_sbrk_r>
  409126:	68bb      	ldr	r3, [r7, #8]
  409128:	442b      	add	r3, r5
  40912a:	4298      	cmp	r0, r3
  40912c:	d004      	beq.n	409138 <_malloc_trim_r+0x48>
  40912e:	4630      	mov	r0, r6
  409130:	f7fd f9a4 	bl	40647c <__malloc_unlock>
  409134:	2000      	movs	r0, #0
  409136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409138:	4261      	negs	r1, r4
  40913a:	4630      	mov	r0, r6
  40913c:	f7fd fa0e 	bl	40655c <_sbrk_r>
  409140:	3001      	adds	r0, #1
  409142:	d00d      	beq.n	409160 <_malloc_trim_r+0x70>
  409144:	4b10      	ldr	r3, [pc, #64]	; (409188 <_malloc_trim_r+0x98>)
  409146:	68ba      	ldr	r2, [r7, #8]
  409148:	6819      	ldr	r1, [r3, #0]
  40914a:	1b2d      	subs	r5, r5, r4
  40914c:	f045 0501 	orr.w	r5, r5, #1
  409150:	4630      	mov	r0, r6
  409152:	1b09      	subs	r1, r1, r4
  409154:	6055      	str	r5, [r2, #4]
  409156:	6019      	str	r1, [r3, #0]
  409158:	f7fd f990 	bl	40647c <__malloc_unlock>
  40915c:	2001      	movs	r0, #1
  40915e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409160:	2100      	movs	r1, #0
  409162:	4630      	mov	r0, r6
  409164:	f7fd f9fa 	bl	40655c <_sbrk_r>
  409168:	68ba      	ldr	r2, [r7, #8]
  40916a:	1a83      	subs	r3, r0, r2
  40916c:	2b0f      	cmp	r3, #15
  40916e:	ddde      	ble.n	40912e <_malloc_trim_r+0x3e>
  409170:	4c06      	ldr	r4, [pc, #24]	; (40918c <_malloc_trim_r+0x9c>)
  409172:	4905      	ldr	r1, [pc, #20]	; (409188 <_malloc_trim_r+0x98>)
  409174:	6824      	ldr	r4, [r4, #0]
  409176:	f043 0301 	orr.w	r3, r3, #1
  40917a:	1b00      	subs	r0, r0, r4
  40917c:	6053      	str	r3, [r2, #4]
  40917e:	6008      	str	r0, [r1, #0]
  409180:	e7d5      	b.n	40912e <_malloc_trim_r+0x3e>
  409182:	bf00      	nop
  409184:	20400458 	.word	0x20400458
  409188:	20400db4 	.word	0x20400db4
  40918c:	20400860 	.word	0x20400860

00409190 <_free_r>:
  409190:	2900      	cmp	r1, #0
  409192:	d044      	beq.n	40921e <_free_r+0x8e>
  409194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409198:	460d      	mov	r5, r1
  40919a:	4680      	mov	r8, r0
  40919c:	f7fd f968 	bl	406470 <__malloc_lock>
  4091a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4091a4:	4969      	ldr	r1, [pc, #420]	; (40934c <_free_r+0x1bc>)
  4091a6:	f027 0301 	bic.w	r3, r7, #1
  4091aa:	f1a5 0408 	sub.w	r4, r5, #8
  4091ae:	18e2      	adds	r2, r4, r3
  4091b0:	688e      	ldr	r6, [r1, #8]
  4091b2:	6850      	ldr	r0, [r2, #4]
  4091b4:	42b2      	cmp	r2, r6
  4091b6:	f020 0003 	bic.w	r0, r0, #3
  4091ba:	d05e      	beq.n	40927a <_free_r+0xea>
  4091bc:	07fe      	lsls	r6, r7, #31
  4091be:	6050      	str	r0, [r2, #4]
  4091c0:	d40b      	bmi.n	4091da <_free_r+0x4a>
  4091c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4091c6:	1be4      	subs	r4, r4, r7
  4091c8:	f101 0e08 	add.w	lr, r1, #8
  4091cc:	68a5      	ldr	r5, [r4, #8]
  4091ce:	4575      	cmp	r5, lr
  4091d0:	443b      	add	r3, r7
  4091d2:	d06d      	beq.n	4092b0 <_free_r+0x120>
  4091d4:	68e7      	ldr	r7, [r4, #12]
  4091d6:	60ef      	str	r7, [r5, #12]
  4091d8:	60bd      	str	r5, [r7, #8]
  4091da:	1815      	adds	r5, r2, r0
  4091dc:	686d      	ldr	r5, [r5, #4]
  4091de:	07ed      	lsls	r5, r5, #31
  4091e0:	d53e      	bpl.n	409260 <_free_r+0xd0>
  4091e2:	f043 0201 	orr.w	r2, r3, #1
  4091e6:	6062      	str	r2, [r4, #4]
  4091e8:	50e3      	str	r3, [r4, r3]
  4091ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4091ee:	d217      	bcs.n	409220 <_free_r+0x90>
  4091f0:	08db      	lsrs	r3, r3, #3
  4091f2:	1c58      	adds	r0, r3, #1
  4091f4:	109a      	asrs	r2, r3, #2
  4091f6:	684d      	ldr	r5, [r1, #4]
  4091f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4091fc:	60a7      	str	r7, [r4, #8]
  4091fe:	2301      	movs	r3, #1
  409200:	4093      	lsls	r3, r2
  409202:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  409206:	432b      	orrs	r3, r5
  409208:	3a08      	subs	r2, #8
  40920a:	60e2      	str	r2, [r4, #12]
  40920c:	604b      	str	r3, [r1, #4]
  40920e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  409212:	60fc      	str	r4, [r7, #12]
  409214:	4640      	mov	r0, r8
  409216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40921a:	f7fd b92f 	b.w	40647c <__malloc_unlock>
  40921e:	4770      	bx	lr
  409220:	0a5a      	lsrs	r2, r3, #9
  409222:	2a04      	cmp	r2, #4
  409224:	d852      	bhi.n	4092cc <_free_r+0x13c>
  409226:	099a      	lsrs	r2, r3, #6
  409228:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40922c:	00ff      	lsls	r7, r7, #3
  40922e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  409232:	19c8      	adds	r0, r1, r7
  409234:	59ca      	ldr	r2, [r1, r7]
  409236:	3808      	subs	r0, #8
  409238:	4290      	cmp	r0, r2
  40923a:	d04f      	beq.n	4092dc <_free_r+0x14c>
  40923c:	6851      	ldr	r1, [r2, #4]
  40923e:	f021 0103 	bic.w	r1, r1, #3
  409242:	428b      	cmp	r3, r1
  409244:	d232      	bcs.n	4092ac <_free_r+0x11c>
  409246:	6892      	ldr	r2, [r2, #8]
  409248:	4290      	cmp	r0, r2
  40924a:	d1f7      	bne.n	40923c <_free_r+0xac>
  40924c:	68c3      	ldr	r3, [r0, #12]
  40924e:	60a0      	str	r0, [r4, #8]
  409250:	60e3      	str	r3, [r4, #12]
  409252:	609c      	str	r4, [r3, #8]
  409254:	60c4      	str	r4, [r0, #12]
  409256:	4640      	mov	r0, r8
  409258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40925c:	f7fd b90e 	b.w	40647c <__malloc_unlock>
  409260:	6895      	ldr	r5, [r2, #8]
  409262:	4f3b      	ldr	r7, [pc, #236]	; (409350 <_free_r+0x1c0>)
  409264:	42bd      	cmp	r5, r7
  409266:	4403      	add	r3, r0
  409268:	d040      	beq.n	4092ec <_free_r+0x15c>
  40926a:	68d0      	ldr	r0, [r2, #12]
  40926c:	60e8      	str	r0, [r5, #12]
  40926e:	f043 0201 	orr.w	r2, r3, #1
  409272:	6085      	str	r5, [r0, #8]
  409274:	6062      	str	r2, [r4, #4]
  409276:	50e3      	str	r3, [r4, r3]
  409278:	e7b7      	b.n	4091ea <_free_r+0x5a>
  40927a:	07ff      	lsls	r7, r7, #31
  40927c:	4403      	add	r3, r0
  40927e:	d407      	bmi.n	409290 <_free_r+0x100>
  409280:	f855 2c08 	ldr.w	r2, [r5, #-8]
  409284:	1aa4      	subs	r4, r4, r2
  409286:	4413      	add	r3, r2
  409288:	68a0      	ldr	r0, [r4, #8]
  40928a:	68e2      	ldr	r2, [r4, #12]
  40928c:	60c2      	str	r2, [r0, #12]
  40928e:	6090      	str	r0, [r2, #8]
  409290:	4a30      	ldr	r2, [pc, #192]	; (409354 <_free_r+0x1c4>)
  409292:	6812      	ldr	r2, [r2, #0]
  409294:	f043 0001 	orr.w	r0, r3, #1
  409298:	4293      	cmp	r3, r2
  40929a:	6060      	str	r0, [r4, #4]
  40929c:	608c      	str	r4, [r1, #8]
  40929e:	d3b9      	bcc.n	409214 <_free_r+0x84>
  4092a0:	4b2d      	ldr	r3, [pc, #180]	; (409358 <_free_r+0x1c8>)
  4092a2:	4640      	mov	r0, r8
  4092a4:	6819      	ldr	r1, [r3, #0]
  4092a6:	f7ff ff23 	bl	4090f0 <_malloc_trim_r>
  4092aa:	e7b3      	b.n	409214 <_free_r+0x84>
  4092ac:	4610      	mov	r0, r2
  4092ae:	e7cd      	b.n	40924c <_free_r+0xbc>
  4092b0:	1811      	adds	r1, r2, r0
  4092b2:	6849      	ldr	r1, [r1, #4]
  4092b4:	07c9      	lsls	r1, r1, #31
  4092b6:	d444      	bmi.n	409342 <_free_r+0x1b2>
  4092b8:	6891      	ldr	r1, [r2, #8]
  4092ba:	68d2      	ldr	r2, [r2, #12]
  4092bc:	60ca      	str	r2, [r1, #12]
  4092be:	4403      	add	r3, r0
  4092c0:	f043 0001 	orr.w	r0, r3, #1
  4092c4:	6091      	str	r1, [r2, #8]
  4092c6:	6060      	str	r0, [r4, #4]
  4092c8:	50e3      	str	r3, [r4, r3]
  4092ca:	e7a3      	b.n	409214 <_free_r+0x84>
  4092cc:	2a14      	cmp	r2, #20
  4092ce:	d816      	bhi.n	4092fe <_free_r+0x16e>
  4092d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4092d4:	00ff      	lsls	r7, r7, #3
  4092d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4092da:	e7aa      	b.n	409232 <_free_r+0xa2>
  4092dc:	10aa      	asrs	r2, r5, #2
  4092de:	2301      	movs	r3, #1
  4092e0:	684d      	ldr	r5, [r1, #4]
  4092e2:	4093      	lsls	r3, r2
  4092e4:	432b      	orrs	r3, r5
  4092e6:	604b      	str	r3, [r1, #4]
  4092e8:	4603      	mov	r3, r0
  4092ea:	e7b0      	b.n	40924e <_free_r+0xbe>
  4092ec:	f043 0201 	orr.w	r2, r3, #1
  4092f0:	614c      	str	r4, [r1, #20]
  4092f2:	610c      	str	r4, [r1, #16]
  4092f4:	60e5      	str	r5, [r4, #12]
  4092f6:	60a5      	str	r5, [r4, #8]
  4092f8:	6062      	str	r2, [r4, #4]
  4092fa:	50e3      	str	r3, [r4, r3]
  4092fc:	e78a      	b.n	409214 <_free_r+0x84>
  4092fe:	2a54      	cmp	r2, #84	; 0x54
  409300:	d806      	bhi.n	409310 <_free_r+0x180>
  409302:	0b1a      	lsrs	r2, r3, #12
  409304:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  409308:	00ff      	lsls	r7, r7, #3
  40930a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40930e:	e790      	b.n	409232 <_free_r+0xa2>
  409310:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409314:	d806      	bhi.n	409324 <_free_r+0x194>
  409316:	0bda      	lsrs	r2, r3, #15
  409318:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40931c:	00ff      	lsls	r7, r7, #3
  40931e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  409322:	e786      	b.n	409232 <_free_r+0xa2>
  409324:	f240 5054 	movw	r0, #1364	; 0x554
  409328:	4282      	cmp	r2, r0
  40932a:	d806      	bhi.n	40933a <_free_r+0x1aa>
  40932c:	0c9a      	lsrs	r2, r3, #18
  40932e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  409332:	00ff      	lsls	r7, r7, #3
  409334:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  409338:	e77b      	b.n	409232 <_free_r+0xa2>
  40933a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40933e:	257e      	movs	r5, #126	; 0x7e
  409340:	e777      	b.n	409232 <_free_r+0xa2>
  409342:	f043 0101 	orr.w	r1, r3, #1
  409346:	6061      	str	r1, [r4, #4]
  409348:	6013      	str	r3, [r2, #0]
  40934a:	e763      	b.n	409214 <_free_r+0x84>
  40934c:	20400458 	.word	0x20400458
  409350:	20400460 	.word	0x20400460
  409354:	20400864 	.word	0x20400864
  409358:	20400de4 	.word	0x20400de4

0040935c <__sfvwrite_r>:
  40935c:	6893      	ldr	r3, [r2, #8]
  40935e:	2b00      	cmp	r3, #0
  409360:	d073      	beq.n	40944a <__sfvwrite_r+0xee>
  409362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409366:	898b      	ldrh	r3, [r1, #12]
  409368:	b083      	sub	sp, #12
  40936a:	460c      	mov	r4, r1
  40936c:	0719      	lsls	r1, r3, #28
  40936e:	9000      	str	r0, [sp, #0]
  409370:	4616      	mov	r6, r2
  409372:	d526      	bpl.n	4093c2 <__sfvwrite_r+0x66>
  409374:	6922      	ldr	r2, [r4, #16]
  409376:	b322      	cbz	r2, 4093c2 <__sfvwrite_r+0x66>
  409378:	f013 0002 	ands.w	r0, r3, #2
  40937c:	6835      	ldr	r5, [r6, #0]
  40937e:	d02c      	beq.n	4093da <__sfvwrite_r+0x7e>
  409380:	f04f 0900 	mov.w	r9, #0
  409384:	4fb0      	ldr	r7, [pc, #704]	; (409648 <__sfvwrite_r+0x2ec>)
  409386:	46c8      	mov	r8, r9
  409388:	46b2      	mov	sl, r6
  40938a:	45b8      	cmp	r8, r7
  40938c:	4643      	mov	r3, r8
  40938e:	464a      	mov	r2, r9
  409390:	bf28      	it	cs
  409392:	463b      	movcs	r3, r7
  409394:	9800      	ldr	r0, [sp, #0]
  409396:	f1b8 0f00 	cmp.w	r8, #0
  40939a:	d050      	beq.n	40943e <__sfvwrite_r+0xe2>
  40939c:	69e1      	ldr	r1, [r4, #28]
  40939e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4093a0:	47b0      	blx	r6
  4093a2:	2800      	cmp	r0, #0
  4093a4:	dd58      	ble.n	409458 <__sfvwrite_r+0xfc>
  4093a6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4093aa:	1a1b      	subs	r3, r3, r0
  4093ac:	4481      	add	r9, r0
  4093ae:	eba8 0800 	sub.w	r8, r8, r0
  4093b2:	f8ca 3008 	str.w	r3, [sl, #8]
  4093b6:	2b00      	cmp	r3, #0
  4093b8:	d1e7      	bne.n	40938a <__sfvwrite_r+0x2e>
  4093ba:	2000      	movs	r0, #0
  4093bc:	b003      	add	sp, #12
  4093be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4093c2:	4621      	mov	r1, r4
  4093c4:	9800      	ldr	r0, [sp, #0]
  4093c6:	f7fe fd17 	bl	407df8 <__swsetup_r>
  4093ca:	2800      	cmp	r0, #0
  4093cc:	f040 8133 	bne.w	409636 <__sfvwrite_r+0x2da>
  4093d0:	89a3      	ldrh	r3, [r4, #12]
  4093d2:	6835      	ldr	r5, [r6, #0]
  4093d4:	f013 0002 	ands.w	r0, r3, #2
  4093d8:	d1d2      	bne.n	409380 <__sfvwrite_r+0x24>
  4093da:	f013 0901 	ands.w	r9, r3, #1
  4093de:	d145      	bne.n	40946c <__sfvwrite_r+0x110>
  4093e0:	464f      	mov	r7, r9
  4093e2:	9601      	str	r6, [sp, #4]
  4093e4:	b337      	cbz	r7, 409434 <__sfvwrite_r+0xd8>
  4093e6:	059a      	lsls	r2, r3, #22
  4093e8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4093ec:	f140 8083 	bpl.w	4094f6 <__sfvwrite_r+0x19a>
  4093f0:	4547      	cmp	r7, r8
  4093f2:	46c3      	mov	fp, r8
  4093f4:	f0c0 80ab 	bcc.w	40954e <__sfvwrite_r+0x1f2>
  4093f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4093fc:	f040 80ac 	bne.w	409558 <__sfvwrite_r+0x1fc>
  409400:	6820      	ldr	r0, [r4, #0]
  409402:	46ba      	mov	sl, r7
  409404:	465a      	mov	r2, fp
  409406:	4649      	mov	r1, r9
  409408:	f000 fa2a 	bl	409860 <memmove>
  40940c:	68a2      	ldr	r2, [r4, #8]
  40940e:	6823      	ldr	r3, [r4, #0]
  409410:	eba2 0208 	sub.w	r2, r2, r8
  409414:	445b      	add	r3, fp
  409416:	60a2      	str	r2, [r4, #8]
  409418:	6023      	str	r3, [r4, #0]
  40941a:	9a01      	ldr	r2, [sp, #4]
  40941c:	6893      	ldr	r3, [r2, #8]
  40941e:	eba3 030a 	sub.w	r3, r3, sl
  409422:	44d1      	add	r9, sl
  409424:	eba7 070a 	sub.w	r7, r7, sl
  409428:	6093      	str	r3, [r2, #8]
  40942a:	2b00      	cmp	r3, #0
  40942c:	d0c5      	beq.n	4093ba <__sfvwrite_r+0x5e>
  40942e:	89a3      	ldrh	r3, [r4, #12]
  409430:	2f00      	cmp	r7, #0
  409432:	d1d8      	bne.n	4093e6 <__sfvwrite_r+0x8a>
  409434:	f8d5 9000 	ldr.w	r9, [r5]
  409438:	686f      	ldr	r7, [r5, #4]
  40943a:	3508      	adds	r5, #8
  40943c:	e7d2      	b.n	4093e4 <__sfvwrite_r+0x88>
  40943e:	f8d5 9000 	ldr.w	r9, [r5]
  409442:	f8d5 8004 	ldr.w	r8, [r5, #4]
  409446:	3508      	adds	r5, #8
  409448:	e79f      	b.n	40938a <__sfvwrite_r+0x2e>
  40944a:	2000      	movs	r0, #0
  40944c:	4770      	bx	lr
  40944e:	4621      	mov	r1, r4
  409450:	9800      	ldr	r0, [sp, #0]
  409452:	f7ff fda3 	bl	408f9c <_fflush_r>
  409456:	b370      	cbz	r0, 4094b6 <__sfvwrite_r+0x15a>
  409458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40945c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409460:	f04f 30ff 	mov.w	r0, #4294967295
  409464:	81a3      	strh	r3, [r4, #12]
  409466:	b003      	add	sp, #12
  409468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40946c:	4681      	mov	r9, r0
  40946e:	4633      	mov	r3, r6
  409470:	464e      	mov	r6, r9
  409472:	46a8      	mov	r8, r5
  409474:	469a      	mov	sl, r3
  409476:	464d      	mov	r5, r9
  409478:	b34e      	cbz	r6, 4094ce <__sfvwrite_r+0x172>
  40947a:	b380      	cbz	r0, 4094de <__sfvwrite_r+0x182>
  40947c:	6820      	ldr	r0, [r4, #0]
  40947e:	6923      	ldr	r3, [r4, #16]
  409480:	6962      	ldr	r2, [r4, #20]
  409482:	45b1      	cmp	r9, r6
  409484:	46cb      	mov	fp, r9
  409486:	bf28      	it	cs
  409488:	46b3      	movcs	fp, r6
  40948a:	4298      	cmp	r0, r3
  40948c:	465f      	mov	r7, fp
  40948e:	d904      	bls.n	40949a <__sfvwrite_r+0x13e>
  409490:	68a3      	ldr	r3, [r4, #8]
  409492:	4413      	add	r3, r2
  409494:	459b      	cmp	fp, r3
  409496:	f300 80a6 	bgt.w	4095e6 <__sfvwrite_r+0x28a>
  40949a:	4593      	cmp	fp, r2
  40949c:	db4b      	blt.n	409536 <__sfvwrite_r+0x1da>
  40949e:	4613      	mov	r3, r2
  4094a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4094a2:	69e1      	ldr	r1, [r4, #28]
  4094a4:	9800      	ldr	r0, [sp, #0]
  4094a6:	462a      	mov	r2, r5
  4094a8:	47b8      	blx	r7
  4094aa:	1e07      	subs	r7, r0, #0
  4094ac:	ddd4      	ble.n	409458 <__sfvwrite_r+0xfc>
  4094ae:	ebb9 0907 	subs.w	r9, r9, r7
  4094b2:	d0cc      	beq.n	40944e <__sfvwrite_r+0xf2>
  4094b4:	2001      	movs	r0, #1
  4094b6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4094ba:	1bdb      	subs	r3, r3, r7
  4094bc:	443d      	add	r5, r7
  4094be:	1bf6      	subs	r6, r6, r7
  4094c0:	f8ca 3008 	str.w	r3, [sl, #8]
  4094c4:	2b00      	cmp	r3, #0
  4094c6:	f43f af78 	beq.w	4093ba <__sfvwrite_r+0x5e>
  4094ca:	2e00      	cmp	r6, #0
  4094cc:	d1d5      	bne.n	40947a <__sfvwrite_r+0x11e>
  4094ce:	f108 0308 	add.w	r3, r8, #8
  4094d2:	e913 0060 	ldmdb	r3, {r5, r6}
  4094d6:	4698      	mov	r8, r3
  4094d8:	3308      	adds	r3, #8
  4094da:	2e00      	cmp	r6, #0
  4094dc:	d0f9      	beq.n	4094d2 <__sfvwrite_r+0x176>
  4094de:	4632      	mov	r2, r6
  4094e0:	210a      	movs	r1, #10
  4094e2:	4628      	mov	r0, r5
  4094e4:	f000 f96c 	bl	4097c0 <memchr>
  4094e8:	2800      	cmp	r0, #0
  4094ea:	f000 80a1 	beq.w	409630 <__sfvwrite_r+0x2d4>
  4094ee:	3001      	adds	r0, #1
  4094f0:	eba0 0905 	sub.w	r9, r0, r5
  4094f4:	e7c2      	b.n	40947c <__sfvwrite_r+0x120>
  4094f6:	6820      	ldr	r0, [r4, #0]
  4094f8:	6923      	ldr	r3, [r4, #16]
  4094fa:	4298      	cmp	r0, r3
  4094fc:	d802      	bhi.n	409504 <__sfvwrite_r+0x1a8>
  4094fe:	6963      	ldr	r3, [r4, #20]
  409500:	429f      	cmp	r7, r3
  409502:	d25d      	bcs.n	4095c0 <__sfvwrite_r+0x264>
  409504:	45b8      	cmp	r8, r7
  409506:	bf28      	it	cs
  409508:	46b8      	movcs	r8, r7
  40950a:	4642      	mov	r2, r8
  40950c:	4649      	mov	r1, r9
  40950e:	f000 f9a7 	bl	409860 <memmove>
  409512:	68a3      	ldr	r3, [r4, #8]
  409514:	6822      	ldr	r2, [r4, #0]
  409516:	eba3 0308 	sub.w	r3, r3, r8
  40951a:	4442      	add	r2, r8
  40951c:	60a3      	str	r3, [r4, #8]
  40951e:	6022      	str	r2, [r4, #0]
  409520:	b10b      	cbz	r3, 409526 <__sfvwrite_r+0x1ca>
  409522:	46c2      	mov	sl, r8
  409524:	e779      	b.n	40941a <__sfvwrite_r+0xbe>
  409526:	4621      	mov	r1, r4
  409528:	9800      	ldr	r0, [sp, #0]
  40952a:	f7ff fd37 	bl	408f9c <_fflush_r>
  40952e:	2800      	cmp	r0, #0
  409530:	d192      	bne.n	409458 <__sfvwrite_r+0xfc>
  409532:	46c2      	mov	sl, r8
  409534:	e771      	b.n	40941a <__sfvwrite_r+0xbe>
  409536:	465a      	mov	r2, fp
  409538:	4629      	mov	r1, r5
  40953a:	f000 f991 	bl	409860 <memmove>
  40953e:	68a2      	ldr	r2, [r4, #8]
  409540:	6823      	ldr	r3, [r4, #0]
  409542:	eba2 020b 	sub.w	r2, r2, fp
  409546:	445b      	add	r3, fp
  409548:	60a2      	str	r2, [r4, #8]
  40954a:	6023      	str	r3, [r4, #0]
  40954c:	e7af      	b.n	4094ae <__sfvwrite_r+0x152>
  40954e:	6820      	ldr	r0, [r4, #0]
  409550:	46b8      	mov	r8, r7
  409552:	46ba      	mov	sl, r7
  409554:	46bb      	mov	fp, r7
  409556:	e755      	b.n	409404 <__sfvwrite_r+0xa8>
  409558:	6962      	ldr	r2, [r4, #20]
  40955a:	6820      	ldr	r0, [r4, #0]
  40955c:	6921      	ldr	r1, [r4, #16]
  40955e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  409562:	eba0 0a01 	sub.w	sl, r0, r1
  409566:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40956a:	f10a 0001 	add.w	r0, sl, #1
  40956e:	ea4f 0868 	mov.w	r8, r8, asr #1
  409572:	4438      	add	r0, r7
  409574:	4540      	cmp	r0, r8
  409576:	4642      	mov	r2, r8
  409578:	bf84      	itt	hi
  40957a:	4680      	movhi	r8, r0
  40957c:	4642      	movhi	r2, r8
  40957e:	055b      	lsls	r3, r3, #21
  409580:	d544      	bpl.n	40960c <__sfvwrite_r+0x2b0>
  409582:	4611      	mov	r1, r2
  409584:	9800      	ldr	r0, [sp, #0]
  409586:	f7fc fbdb 	bl	405d40 <_malloc_r>
  40958a:	4683      	mov	fp, r0
  40958c:	2800      	cmp	r0, #0
  40958e:	d055      	beq.n	40963c <__sfvwrite_r+0x2e0>
  409590:	4652      	mov	r2, sl
  409592:	6921      	ldr	r1, [r4, #16]
  409594:	f7fc fe84 	bl	4062a0 <memcpy>
  409598:	89a3      	ldrh	r3, [r4, #12]
  40959a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40959e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4095a2:	81a3      	strh	r3, [r4, #12]
  4095a4:	eb0b 000a 	add.w	r0, fp, sl
  4095a8:	eba8 030a 	sub.w	r3, r8, sl
  4095ac:	f8c4 b010 	str.w	fp, [r4, #16]
  4095b0:	f8c4 8014 	str.w	r8, [r4, #20]
  4095b4:	6020      	str	r0, [r4, #0]
  4095b6:	60a3      	str	r3, [r4, #8]
  4095b8:	46b8      	mov	r8, r7
  4095ba:	46ba      	mov	sl, r7
  4095bc:	46bb      	mov	fp, r7
  4095be:	e721      	b.n	409404 <__sfvwrite_r+0xa8>
  4095c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4095c4:	42b9      	cmp	r1, r7
  4095c6:	bf28      	it	cs
  4095c8:	4639      	movcs	r1, r7
  4095ca:	464a      	mov	r2, r9
  4095cc:	fb91 f1f3 	sdiv	r1, r1, r3
  4095d0:	9800      	ldr	r0, [sp, #0]
  4095d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4095d4:	fb03 f301 	mul.w	r3, r3, r1
  4095d8:	69e1      	ldr	r1, [r4, #28]
  4095da:	47b0      	blx	r6
  4095dc:	f1b0 0a00 	subs.w	sl, r0, #0
  4095e0:	f73f af1b 	bgt.w	40941a <__sfvwrite_r+0xbe>
  4095e4:	e738      	b.n	409458 <__sfvwrite_r+0xfc>
  4095e6:	461a      	mov	r2, r3
  4095e8:	4629      	mov	r1, r5
  4095ea:	9301      	str	r3, [sp, #4]
  4095ec:	f000 f938 	bl	409860 <memmove>
  4095f0:	6822      	ldr	r2, [r4, #0]
  4095f2:	9b01      	ldr	r3, [sp, #4]
  4095f4:	9800      	ldr	r0, [sp, #0]
  4095f6:	441a      	add	r2, r3
  4095f8:	6022      	str	r2, [r4, #0]
  4095fa:	4621      	mov	r1, r4
  4095fc:	f7ff fcce 	bl	408f9c <_fflush_r>
  409600:	9b01      	ldr	r3, [sp, #4]
  409602:	2800      	cmp	r0, #0
  409604:	f47f af28 	bne.w	409458 <__sfvwrite_r+0xfc>
  409608:	461f      	mov	r7, r3
  40960a:	e750      	b.n	4094ae <__sfvwrite_r+0x152>
  40960c:	9800      	ldr	r0, [sp, #0]
  40960e:	f000 fc85 	bl	409f1c <_realloc_r>
  409612:	4683      	mov	fp, r0
  409614:	2800      	cmp	r0, #0
  409616:	d1c5      	bne.n	4095a4 <__sfvwrite_r+0x248>
  409618:	9d00      	ldr	r5, [sp, #0]
  40961a:	6921      	ldr	r1, [r4, #16]
  40961c:	4628      	mov	r0, r5
  40961e:	f7ff fdb7 	bl	409190 <_free_r>
  409622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409626:	220c      	movs	r2, #12
  409628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40962c:	602a      	str	r2, [r5, #0]
  40962e:	e715      	b.n	40945c <__sfvwrite_r+0x100>
  409630:	f106 0901 	add.w	r9, r6, #1
  409634:	e722      	b.n	40947c <__sfvwrite_r+0x120>
  409636:	f04f 30ff 	mov.w	r0, #4294967295
  40963a:	e6bf      	b.n	4093bc <__sfvwrite_r+0x60>
  40963c:	9a00      	ldr	r2, [sp, #0]
  40963e:	230c      	movs	r3, #12
  409640:	6013      	str	r3, [r2, #0]
  409642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409646:	e709      	b.n	40945c <__sfvwrite_r+0x100>
  409648:	7ffffc00 	.word	0x7ffffc00

0040964c <_fwalk_reent>:
  40964c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409650:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  409654:	d01f      	beq.n	409696 <_fwalk_reent+0x4a>
  409656:	4688      	mov	r8, r1
  409658:	4606      	mov	r6, r0
  40965a:	f04f 0900 	mov.w	r9, #0
  40965e:	687d      	ldr	r5, [r7, #4]
  409660:	68bc      	ldr	r4, [r7, #8]
  409662:	3d01      	subs	r5, #1
  409664:	d411      	bmi.n	40968a <_fwalk_reent+0x3e>
  409666:	89a3      	ldrh	r3, [r4, #12]
  409668:	2b01      	cmp	r3, #1
  40966a:	f105 35ff 	add.w	r5, r5, #4294967295
  40966e:	d908      	bls.n	409682 <_fwalk_reent+0x36>
  409670:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  409674:	3301      	adds	r3, #1
  409676:	4621      	mov	r1, r4
  409678:	4630      	mov	r0, r6
  40967a:	d002      	beq.n	409682 <_fwalk_reent+0x36>
  40967c:	47c0      	blx	r8
  40967e:	ea49 0900 	orr.w	r9, r9, r0
  409682:	1c6b      	adds	r3, r5, #1
  409684:	f104 0468 	add.w	r4, r4, #104	; 0x68
  409688:	d1ed      	bne.n	409666 <_fwalk_reent+0x1a>
  40968a:	683f      	ldr	r7, [r7, #0]
  40968c:	2f00      	cmp	r7, #0
  40968e:	d1e6      	bne.n	40965e <_fwalk_reent+0x12>
  409690:	4648      	mov	r0, r9
  409692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409696:	46b9      	mov	r9, r7
  409698:	4648      	mov	r0, r9
  40969a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40969e:	bf00      	nop

004096a0 <_localeconv_r>:
  4096a0:	4a04      	ldr	r2, [pc, #16]	; (4096b4 <_localeconv_r+0x14>)
  4096a2:	4b05      	ldr	r3, [pc, #20]	; (4096b8 <_localeconv_r+0x18>)
  4096a4:	6812      	ldr	r2, [r2, #0]
  4096a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4096a8:	2800      	cmp	r0, #0
  4096aa:	bf08      	it	eq
  4096ac:	4618      	moveq	r0, r3
  4096ae:	30f0      	adds	r0, #240	; 0xf0
  4096b0:	4770      	bx	lr
  4096b2:	bf00      	nop
  4096b4:	20400028 	.word	0x20400028
  4096b8:	2040086c 	.word	0x2040086c

004096bc <__retarget_lock_init_recursive>:
  4096bc:	4770      	bx	lr
  4096be:	bf00      	nop

004096c0 <__retarget_lock_close_recursive>:
  4096c0:	4770      	bx	lr
  4096c2:	bf00      	nop

004096c4 <__retarget_lock_acquire_recursive>:
  4096c4:	4770      	bx	lr
  4096c6:	bf00      	nop

004096c8 <__retarget_lock_release_recursive>:
  4096c8:	4770      	bx	lr
  4096ca:	bf00      	nop

004096cc <__swhatbuf_r>:
  4096cc:	b570      	push	{r4, r5, r6, lr}
  4096ce:	460c      	mov	r4, r1
  4096d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4096d4:	2900      	cmp	r1, #0
  4096d6:	b090      	sub	sp, #64	; 0x40
  4096d8:	4615      	mov	r5, r2
  4096da:	461e      	mov	r6, r3
  4096dc:	db14      	blt.n	409708 <__swhatbuf_r+0x3c>
  4096de:	aa01      	add	r2, sp, #4
  4096e0:	f000 fff0 	bl	40a6c4 <_fstat_r>
  4096e4:	2800      	cmp	r0, #0
  4096e6:	db0f      	blt.n	409708 <__swhatbuf_r+0x3c>
  4096e8:	9a02      	ldr	r2, [sp, #8]
  4096ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4096ee:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4096f2:	fab2 f282 	clz	r2, r2
  4096f6:	0952      	lsrs	r2, r2, #5
  4096f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4096fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  409700:	6032      	str	r2, [r6, #0]
  409702:	602b      	str	r3, [r5, #0]
  409704:	b010      	add	sp, #64	; 0x40
  409706:	bd70      	pop	{r4, r5, r6, pc}
  409708:	89a2      	ldrh	r2, [r4, #12]
  40970a:	2300      	movs	r3, #0
  40970c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  409710:	6033      	str	r3, [r6, #0]
  409712:	d004      	beq.n	40971e <__swhatbuf_r+0x52>
  409714:	2240      	movs	r2, #64	; 0x40
  409716:	4618      	mov	r0, r3
  409718:	602a      	str	r2, [r5, #0]
  40971a:	b010      	add	sp, #64	; 0x40
  40971c:	bd70      	pop	{r4, r5, r6, pc}
  40971e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  409722:	602b      	str	r3, [r5, #0]
  409724:	b010      	add	sp, #64	; 0x40
  409726:	bd70      	pop	{r4, r5, r6, pc}

00409728 <__smakebuf_r>:
  409728:	898a      	ldrh	r2, [r1, #12]
  40972a:	0792      	lsls	r2, r2, #30
  40972c:	460b      	mov	r3, r1
  40972e:	d506      	bpl.n	40973e <__smakebuf_r+0x16>
  409730:	f101 0243 	add.w	r2, r1, #67	; 0x43
  409734:	2101      	movs	r1, #1
  409736:	601a      	str	r2, [r3, #0]
  409738:	611a      	str	r2, [r3, #16]
  40973a:	6159      	str	r1, [r3, #20]
  40973c:	4770      	bx	lr
  40973e:	b5f0      	push	{r4, r5, r6, r7, lr}
  409740:	b083      	sub	sp, #12
  409742:	ab01      	add	r3, sp, #4
  409744:	466a      	mov	r2, sp
  409746:	460c      	mov	r4, r1
  409748:	4606      	mov	r6, r0
  40974a:	f7ff ffbf 	bl	4096cc <__swhatbuf_r>
  40974e:	9900      	ldr	r1, [sp, #0]
  409750:	4605      	mov	r5, r0
  409752:	4630      	mov	r0, r6
  409754:	f7fc faf4 	bl	405d40 <_malloc_r>
  409758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40975c:	b1d8      	cbz	r0, 409796 <__smakebuf_r+0x6e>
  40975e:	9a01      	ldr	r2, [sp, #4]
  409760:	4f15      	ldr	r7, [pc, #84]	; (4097b8 <__smakebuf_r+0x90>)
  409762:	9900      	ldr	r1, [sp, #0]
  409764:	63f7      	str	r7, [r6, #60]	; 0x3c
  409766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40976a:	81a3      	strh	r3, [r4, #12]
  40976c:	6020      	str	r0, [r4, #0]
  40976e:	6120      	str	r0, [r4, #16]
  409770:	6161      	str	r1, [r4, #20]
  409772:	b91a      	cbnz	r2, 40977c <__smakebuf_r+0x54>
  409774:	432b      	orrs	r3, r5
  409776:	81a3      	strh	r3, [r4, #12]
  409778:	b003      	add	sp, #12
  40977a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40977c:	4630      	mov	r0, r6
  40977e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409782:	f000 ffb3 	bl	40a6ec <_isatty_r>
  409786:	b1a0      	cbz	r0, 4097b2 <__smakebuf_r+0x8a>
  409788:	89a3      	ldrh	r3, [r4, #12]
  40978a:	f023 0303 	bic.w	r3, r3, #3
  40978e:	f043 0301 	orr.w	r3, r3, #1
  409792:	b21b      	sxth	r3, r3
  409794:	e7ee      	b.n	409774 <__smakebuf_r+0x4c>
  409796:	059a      	lsls	r2, r3, #22
  409798:	d4ee      	bmi.n	409778 <__smakebuf_r+0x50>
  40979a:	f023 0303 	bic.w	r3, r3, #3
  40979e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4097a2:	f043 0302 	orr.w	r3, r3, #2
  4097a6:	2101      	movs	r1, #1
  4097a8:	81a3      	strh	r3, [r4, #12]
  4097aa:	6022      	str	r2, [r4, #0]
  4097ac:	6122      	str	r2, [r4, #16]
  4097ae:	6161      	str	r1, [r4, #20]
  4097b0:	e7e2      	b.n	409778 <__smakebuf_r+0x50>
  4097b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4097b6:	e7dd      	b.n	409774 <__smakebuf_r+0x4c>
  4097b8:	00408ff1 	.word	0x00408ff1
  4097bc:	00000000 	.word	0x00000000

004097c0 <memchr>:
  4097c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4097c4:	2a10      	cmp	r2, #16
  4097c6:	db2b      	blt.n	409820 <memchr+0x60>
  4097c8:	f010 0f07 	tst.w	r0, #7
  4097cc:	d008      	beq.n	4097e0 <memchr+0x20>
  4097ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  4097d2:	3a01      	subs	r2, #1
  4097d4:	428b      	cmp	r3, r1
  4097d6:	d02d      	beq.n	409834 <memchr+0x74>
  4097d8:	f010 0f07 	tst.w	r0, #7
  4097dc:	b342      	cbz	r2, 409830 <memchr+0x70>
  4097de:	d1f6      	bne.n	4097ce <memchr+0xe>
  4097e0:	b4f0      	push	{r4, r5, r6, r7}
  4097e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4097e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4097ea:	f022 0407 	bic.w	r4, r2, #7
  4097ee:	f07f 0700 	mvns.w	r7, #0
  4097f2:	2300      	movs	r3, #0
  4097f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4097f8:	3c08      	subs	r4, #8
  4097fa:	ea85 0501 	eor.w	r5, r5, r1
  4097fe:	ea86 0601 	eor.w	r6, r6, r1
  409802:	fa85 f547 	uadd8	r5, r5, r7
  409806:	faa3 f587 	sel	r5, r3, r7
  40980a:	fa86 f647 	uadd8	r6, r6, r7
  40980e:	faa5 f687 	sel	r6, r5, r7
  409812:	b98e      	cbnz	r6, 409838 <memchr+0x78>
  409814:	d1ee      	bne.n	4097f4 <memchr+0x34>
  409816:	bcf0      	pop	{r4, r5, r6, r7}
  409818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40981c:	f002 0207 	and.w	r2, r2, #7
  409820:	b132      	cbz	r2, 409830 <memchr+0x70>
  409822:	f810 3b01 	ldrb.w	r3, [r0], #1
  409826:	3a01      	subs	r2, #1
  409828:	ea83 0301 	eor.w	r3, r3, r1
  40982c:	b113      	cbz	r3, 409834 <memchr+0x74>
  40982e:	d1f8      	bne.n	409822 <memchr+0x62>
  409830:	2000      	movs	r0, #0
  409832:	4770      	bx	lr
  409834:	3801      	subs	r0, #1
  409836:	4770      	bx	lr
  409838:	2d00      	cmp	r5, #0
  40983a:	bf06      	itte	eq
  40983c:	4635      	moveq	r5, r6
  40983e:	3803      	subeq	r0, #3
  409840:	3807      	subne	r0, #7
  409842:	f015 0f01 	tst.w	r5, #1
  409846:	d107      	bne.n	409858 <memchr+0x98>
  409848:	3001      	adds	r0, #1
  40984a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40984e:	bf02      	ittt	eq
  409850:	3001      	addeq	r0, #1
  409852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409856:	3001      	addeq	r0, #1
  409858:	bcf0      	pop	{r4, r5, r6, r7}
  40985a:	3801      	subs	r0, #1
  40985c:	4770      	bx	lr
  40985e:	bf00      	nop

00409860 <memmove>:
  409860:	4288      	cmp	r0, r1
  409862:	b5f0      	push	{r4, r5, r6, r7, lr}
  409864:	d90d      	bls.n	409882 <memmove+0x22>
  409866:	188b      	adds	r3, r1, r2
  409868:	4298      	cmp	r0, r3
  40986a:	d20a      	bcs.n	409882 <memmove+0x22>
  40986c:	1884      	adds	r4, r0, r2
  40986e:	2a00      	cmp	r2, #0
  409870:	d051      	beq.n	409916 <memmove+0xb6>
  409872:	4622      	mov	r2, r4
  409874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409878:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40987c:	4299      	cmp	r1, r3
  40987e:	d1f9      	bne.n	409874 <memmove+0x14>
  409880:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409882:	2a0f      	cmp	r2, #15
  409884:	d948      	bls.n	409918 <memmove+0xb8>
  409886:	ea41 0300 	orr.w	r3, r1, r0
  40988a:	079b      	lsls	r3, r3, #30
  40988c:	d146      	bne.n	40991c <memmove+0xbc>
  40988e:	f100 0410 	add.w	r4, r0, #16
  409892:	f101 0310 	add.w	r3, r1, #16
  409896:	4615      	mov	r5, r2
  409898:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40989c:	f844 6c10 	str.w	r6, [r4, #-16]
  4098a0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4098a4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4098a8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4098ac:	f844 6c08 	str.w	r6, [r4, #-8]
  4098b0:	3d10      	subs	r5, #16
  4098b2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4098b6:	f844 6c04 	str.w	r6, [r4, #-4]
  4098ba:	2d0f      	cmp	r5, #15
  4098bc:	f103 0310 	add.w	r3, r3, #16
  4098c0:	f104 0410 	add.w	r4, r4, #16
  4098c4:	d8e8      	bhi.n	409898 <memmove+0x38>
  4098c6:	f1a2 0310 	sub.w	r3, r2, #16
  4098ca:	f023 030f 	bic.w	r3, r3, #15
  4098ce:	f002 0e0f 	and.w	lr, r2, #15
  4098d2:	3310      	adds	r3, #16
  4098d4:	f1be 0f03 	cmp.w	lr, #3
  4098d8:	4419      	add	r1, r3
  4098da:	4403      	add	r3, r0
  4098dc:	d921      	bls.n	409922 <memmove+0xc2>
  4098de:	1f1e      	subs	r6, r3, #4
  4098e0:	460d      	mov	r5, r1
  4098e2:	4674      	mov	r4, lr
  4098e4:	3c04      	subs	r4, #4
  4098e6:	f855 7b04 	ldr.w	r7, [r5], #4
  4098ea:	f846 7f04 	str.w	r7, [r6, #4]!
  4098ee:	2c03      	cmp	r4, #3
  4098f0:	d8f8      	bhi.n	4098e4 <memmove+0x84>
  4098f2:	f1ae 0404 	sub.w	r4, lr, #4
  4098f6:	f024 0403 	bic.w	r4, r4, #3
  4098fa:	3404      	adds	r4, #4
  4098fc:	4421      	add	r1, r4
  4098fe:	4423      	add	r3, r4
  409900:	f002 0203 	and.w	r2, r2, #3
  409904:	b162      	cbz	r2, 409920 <memmove+0xc0>
  409906:	3b01      	subs	r3, #1
  409908:	440a      	add	r2, r1
  40990a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40990e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409912:	428a      	cmp	r2, r1
  409914:	d1f9      	bne.n	40990a <memmove+0xaa>
  409916:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409918:	4603      	mov	r3, r0
  40991a:	e7f3      	b.n	409904 <memmove+0xa4>
  40991c:	4603      	mov	r3, r0
  40991e:	e7f2      	b.n	409906 <memmove+0xa6>
  409920:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409922:	4672      	mov	r2, lr
  409924:	e7ee      	b.n	409904 <memmove+0xa4>
  409926:	bf00      	nop

00409928 <_Balloc>:
  409928:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40992a:	b570      	push	{r4, r5, r6, lr}
  40992c:	4605      	mov	r5, r0
  40992e:	460c      	mov	r4, r1
  409930:	b14b      	cbz	r3, 409946 <_Balloc+0x1e>
  409932:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409936:	b180      	cbz	r0, 40995a <_Balloc+0x32>
  409938:	6802      	ldr	r2, [r0, #0]
  40993a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40993e:	2300      	movs	r3, #0
  409940:	6103      	str	r3, [r0, #16]
  409942:	60c3      	str	r3, [r0, #12]
  409944:	bd70      	pop	{r4, r5, r6, pc}
  409946:	2221      	movs	r2, #33	; 0x21
  409948:	2104      	movs	r1, #4
  40994a:	f000 fd93 	bl	40a474 <_calloc_r>
  40994e:	64e8      	str	r0, [r5, #76]	; 0x4c
  409950:	4603      	mov	r3, r0
  409952:	2800      	cmp	r0, #0
  409954:	d1ed      	bne.n	409932 <_Balloc+0xa>
  409956:	2000      	movs	r0, #0
  409958:	bd70      	pop	{r4, r5, r6, pc}
  40995a:	2101      	movs	r1, #1
  40995c:	fa01 f604 	lsl.w	r6, r1, r4
  409960:	1d72      	adds	r2, r6, #5
  409962:	4628      	mov	r0, r5
  409964:	0092      	lsls	r2, r2, #2
  409966:	f000 fd85 	bl	40a474 <_calloc_r>
  40996a:	2800      	cmp	r0, #0
  40996c:	d0f3      	beq.n	409956 <_Balloc+0x2e>
  40996e:	6044      	str	r4, [r0, #4]
  409970:	6086      	str	r6, [r0, #8]
  409972:	e7e4      	b.n	40993e <_Balloc+0x16>

00409974 <_Bfree>:
  409974:	b131      	cbz	r1, 409984 <_Bfree+0x10>
  409976:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409978:	684a      	ldr	r2, [r1, #4]
  40997a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40997e:	6008      	str	r0, [r1, #0]
  409980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409984:	4770      	bx	lr
  409986:	bf00      	nop

00409988 <__multadd>:
  409988:	b5f0      	push	{r4, r5, r6, r7, lr}
  40998a:	690c      	ldr	r4, [r1, #16]
  40998c:	b083      	sub	sp, #12
  40998e:	460d      	mov	r5, r1
  409990:	4606      	mov	r6, r0
  409992:	f101 0e14 	add.w	lr, r1, #20
  409996:	2700      	movs	r7, #0
  409998:	f8de 0000 	ldr.w	r0, [lr]
  40999c:	b281      	uxth	r1, r0
  40999e:	fb02 3301 	mla	r3, r2, r1, r3
  4099a2:	0c01      	lsrs	r1, r0, #16
  4099a4:	0c18      	lsrs	r0, r3, #16
  4099a6:	fb02 0101 	mla	r1, r2, r1, r0
  4099aa:	b29b      	uxth	r3, r3
  4099ac:	3701      	adds	r7, #1
  4099ae:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4099b2:	42bc      	cmp	r4, r7
  4099b4:	f84e 3b04 	str.w	r3, [lr], #4
  4099b8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4099bc:	dcec      	bgt.n	409998 <__multadd+0x10>
  4099be:	b13b      	cbz	r3, 4099d0 <__multadd+0x48>
  4099c0:	68aa      	ldr	r2, [r5, #8]
  4099c2:	4294      	cmp	r4, r2
  4099c4:	da07      	bge.n	4099d6 <__multadd+0x4e>
  4099c6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4099ca:	3401      	adds	r4, #1
  4099cc:	6153      	str	r3, [r2, #20]
  4099ce:	612c      	str	r4, [r5, #16]
  4099d0:	4628      	mov	r0, r5
  4099d2:	b003      	add	sp, #12
  4099d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4099d6:	6869      	ldr	r1, [r5, #4]
  4099d8:	9301      	str	r3, [sp, #4]
  4099da:	3101      	adds	r1, #1
  4099dc:	4630      	mov	r0, r6
  4099de:	f7ff ffa3 	bl	409928 <_Balloc>
  4099e2:	692a      	ldr	r2, [r5, #16]
  4099e4:	3202      	adds	r2, #2
  4099e6:	f105 010c 	add.w	r1, r5, #12
  4099ea:	4607      	mov	r7, r0
  4099ec:	0092      	lsls	r2, r2, #2
  4099ee:	300c      	adds	r0, #12
  4099f0:	f7fc fc56 	bl	4062a0 <memcpy>
  4099f4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4099f6:	6869      	ldr	r1, [r5, #4]
  4099f8:	9b01      	ldr	r3, [sp, #4]
  4099fa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4099fe:	6028      	str	r0, [r5, #0]
  409a00:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409a04:	463d      	mov	r5, r7
  409a06:	e7de      	b.n	4099c6 <__multadd+0x3e>

00409a08 <__hi0bits>:
  409a08:	0c02      	lsrs	r2, r0, #16
  409a0a:	0412      	lsls	r2, r2, #16
  409a0c:	4603      	mov	r3, r0
  409a0e:	b9b2      	cbnz	r2, 409a3e <__hi0bits+0x36>
  409a10:	0403      	lsls	r3, r0, #16
  409a12:	2010      	movs	r0, #16
  409a14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409a18:	bf04      	itt	eq
  409a1a:	021b      	lsleq	r3, r3, #8
  409a1c:	3008      	addeq	r0, #8
  409a1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409a22:	bf04      	itt	eq
  409a24:	011b      	lsleq	r3, r3, #4
  409a26:	3004      	addeq	r0, #4
  409a28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  409a2c:	bf04      	itt	eq
  409a2e:	009b      	lsleq	r3, r3, #2
  409a30:	3002      	addeq	r0, #2
  409a32:	2b00      	cmp	r3, #0
  409a34:	db02      	blt.n	409a3c <__hi0bits+0x34>
  409a36:	005b      	lsls	r3, r3, #1
  409a38:	d403      	bmi.n	409a42 <__hi0bits+0x3a>
  409a3a:	2020      	movs	r0, #32
  409a3c:	4770      	bx	lr
  409a3e:	2000      	movs	r0, #0
  409a40:	e7e8      	b.n	409a14 <__hi0bits+0xc>
  409a42:	3001      	adds	r0, #1
  409a44:	4770      	bx	lr
  409a46:	bf00      	nop

00409a48 <__lo0bits>:
  409a48:	6803      	ldr	r3, [r0, #0]
  409a4a:	f013 0207 	ands.w	r2, r3, #7
  409a4e:	4601      	mov	r1, r0
  409a50:	d007      	beq.n	409a62 <__lo0bits+0x1a>
  409a52:	07da      	lsls	r2, r3, #31
  409a54:	d421      	bmi.n	409a9a <__lo0bits+0x52>
  409a56:	0798      	lsls	r0, r3, #30
  409a58:	d421      	bmi.n	409a9e <__lo0bits+0x56>
  409a5a:	089b      	lsrs	r3, r3, #2
  409a5c:	600b      	str	r3, [r1, #0]
  409a5e:	2002      	movs	r0, #2
  409a60:	4770      	bx	lr
  409a62:	b298      	uxth	r0, r3
  409a64:	b198      	cbz	r0, 409a8e <__lo0bits+0x46>
  409a66:	4610      	mov	r0, r2
  409a68:	f013 0fff 	tst.w	r3, #255	; 0xff
  409a6c:	bf04      	itt	eq
  409a6e:	0a1b      	lsreq	r3, r3, #8
  409a70:	3008      	addeq	r0, #8
  409a72:	071a      	lsls	r2, r3, #28
  409a74:	bf04      	itt	eq
  409a76:	091b      	lsreq	r3, r3, #4
  409a78:	3004      	addeq	r0, #4
  409a7a:	079a      	lsls	r2, r3, #30
  409a7c:	bf04      	itt	eq
  409a7e:	089b      	lsreq	r3, r3, #2
  409a80:	3002      	addeq	r0, #2
  409a82:	07da      	lsls	r2, r3, #31
  409a84:	d407      	bmi.n	409a96 <__lo0bits+0x4e>
  409a86:	085b      	lsrs	r3, r3, #1
  409a88:	d104      	bne.n	409a94 <__lo0bits+0x4c>
  409a8a:	2020      	movs	r0, #32
  409a8c:	4770      	bx	lr
  409a8e:	0c1b      	lsrs	r3, r3, #16
  409a90:	2010      	movs	r0, #16
  409a92:	e7e9      	b.n	409a68 <__lo0bits+0x20>
  409a94:	3001      	adds	r0, #1
  409a96:	600b      	str	r3, [r1, #0]
  409a98:	4770      	bx	lr
  409a9a:	2000      	movs	r0, #0
  409a9c:	4770      	bx	lr
  409a9e:	085b      	lsrs	r3, r3, #1
  409aa0:	600b      	str	r3, [r1, #0]
  409aa2:	2001      	movs	r0, #1
  409aa4:	4770      	bx	lr
  409aa6:	bf00      	nop

00409aa8 <__i2b>:
  409aa8:	b510      	push	{r4, lr}
  409aaa:	460c      	mov	r4, r1
  409aac:	2101      	movs	r1, #1
  409aae:	f7ff ff3b 	bl	409928 <_Balloc>
  409ab2:	2201      	movs	r2, #1
  409ab4:	6144      	str	r4, [r0, #20]
  409ab6:	6102      	str	r2, [r0, #16]
  409ab8:	bd10      	pop	{r4, pc}
  409aba:	bf00      	nop

00409abc <__multiply>:
  409abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409ac0:	690c      	ldr	r4, [r1, #16]
  409ac2:	6915      	ldr	r5, [r2, #16]
  409ac4:	42ac      	cmp	r4, r5
  409ac6:	b083      	sub	sp, #12
  409ac8:	468b      	mov	fp, r1
  409aca:	4616      	mov	r6, r2
  409acc:	da04      	bge.n	409ad8 <__multiply+0x1c>
  409ace:	4622      	mov	r2, r4
  409ad0:	46b3      	mov	fp, r6
  409ad2:	462c      	mov	r4, r5
  409ad4:	460e      	mov	r6, r1
  409ad6:	4615      	mov	r5, r2
  409ad8:	f8db 3008 	ldr.w	r3, [fp, #8]
  409adc:	f8db 1004 	ldr.w	r1, [fp, #4]
  409ae0:	eb04 0805 	add.w	r8, r4, r5
  409ae4:	4598      	cmp	r8, r3
  409ae6:	bfc8      	it	gt
  409ae8:	3101      	addgt	r1, #1
  409aea:	f7ff ff1d 	bl	409928 <_Balloc>
  409aee:	f100 0914 	add.w	r9, r0, #20
  409af2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409af6:	45d1      	cmp	r9, sl
  409af8:	9000      	str	r0, [sp, #0]
  409afa:	d205      	bcs.n	409b08 <__multiply+0x4c>
  409afc:	464b      	mov	r3, r9
  409afe:	2100      	movs	r1, #0
  409b00:	f843 1b04 	str.w	r1, [r3], #4
  409b04:	459a      	cmp	sl, r3
  409b06:	d8fb      	bhi.n	409b00 <__multiply+0x44>
  409b08:	f106 0c14 	add.w	ip, r6, #20
  409b0c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409b10:	f10b 0b14 	add.w	fp, fp, #20
  409b14:	459c      	cmp	ip, r3
  409b16:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  409b1a:	d24c      	bcs.n	409bb6 <__multiply+0xfa>
  409b1c:	f8cd a004 	str.w	sl, [sp, #4]
  409b20:	469a      	mov	sl, r3
  409b22:	f8dc 5000 	ldr.w	r5, [ip]
  409b26:	b2af      	uxth	r7, r5
  409b28:	b1ef      	cbz	r7, 409b66 <__multiply+0xaa>
  409b2a:	2100      	movs	r1, #0
  409b2c:	464d      	mov	r5, r9
  409b2e:	465e      	mov	r6, fp
  409b30:	460c      	mov	r4, r1
  409b32:	f856 2b04 	ldr.w	r2, [r6], #4
  409b36:	6828      	ldr	r0, [r5, #0]
  409b38:	b293      	uxth	r3, r2
  409b3a:	b281      	uxth	r1, r0
  409b3c:	fb07 1303 	mla	r3, r7, r3, r1
  409b40:	0c12      	lsrs	r2, r2, #16
  409b42:	0c01      	lsrs	r1, r0, #16
  409b44:	4423      	add	r3, r4
  409b46:	fb07 1102 	mla	r1, r7, r2, r1
  409b4a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  409b4e:	b29b      	uxth	r3, r3
  409b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  409b54:	45b6      	cmp	lr, r6
  409b56:	f845 3b04 	str.w	r3, [r5], #4
  409b5a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  409b5e:	d8e8      	bhi.n	409b32 <__multiply+0x76>
  409b60:	602c      	str	r4, [r5, #0]
  409b62:	f8dc 5000 	ldr.w	r5, [ip]
  409b66:	0c2d      	lsrs	r5, r5, #16
  409b68:	d01d      	beq.n	409ba6 <__multiply+0xea>
  409b6a:	f8d9 3000 	ldr.w	r3, [r9]
  409b6e:	4648      	mov	r0, r9
  409b70:	461c      	mov	r4, r3
  409b72:	4659      	mov	r1, fp
  409b74:	2200      	movs	r2, #0
  409b76:	880e      	ldrh	r6, [r1, #0]
  409b78:	0c24      	lsrs	r4, r4, #16
  409b7a:	fb05 4406 	mla	r4, r5, r6, r4
  409b7e:	4422      	add	r2, r4
  409b80:	b29b      	uxth	r3, r3
  409b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  409b86:	f840 3b04 	str.w	r3, [r0], #4
  409b8a:	f851 3b04 	ldr.w	r3, [r1], #4
  409b8e:	6804      	ldr	r4, [r0, #0]
  409b90:	0c1b      	lsrs	r3, r3, #16
  409b92:	b2a6      	uxth	r6, r4
  409b94:	fb05 6303 	mla	r3, r5, r3, r6
  409b98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  409b9c:	458e      	cmp	lr, r1
  409b9e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  409ba2:	d8e8      	bhi.n	409b76 <__multiply+0xba>
  409ba4:	6003      	str	r3, [r0, #0]
  409ba6:	f10c 0c04 	add.w	ip, ip, #4
  409baa:	45e2      	cmp	sl, ip
  409bac:	f109 0904 	add.w	r9, r9, #4
  409bb0:	d8b7      	bhi.n	409b22 <__multiply+0x66>
  409bb2:	f8dd a004 	ldr.w	sl, [sp, #4]
  409bb6:	f1b8 0f00 	cmp.w	r8, #0
  409bba:	dd0b      	ble.n	409bd4 <__multiply+0x118>
  409bbc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409bc0:	f1aa 0a04 	sub.w	sl, sl, #4
  409bc4:	b11b      	cbz	r3, 409bce <__multiply+0x112>
  409bc6:	e005      	b.n	409bd4 <__multiply+0x118>
  409bc8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  409bcc:	b913      	cbnz	r3, 409bd4 <__multiply+0x118>
  409bce:	f1b8 0801 	subs.w	r8, r8, #1
  409bd2:	d1f9      	bne.n	409bc8 <__multiply+0x10c>
  409bd4:	9800      	ldr	r0, [sp, #0]
  409bd6:	f8c0 8010 	str.w	r8, [r0, #16]
  409bda:	b003      	add	sp, #12
  409bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409be0 <__pow5mult>:
  409be0:	f012 0303 	ands.w	r3, r2, #3
  409be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409be8:	4614      	mov	r4, r2
  409bea:	4607      	mov	r7, r0
  409bec:	d12e      	bne.n	409c4c <__pow5mult+0x6c>
  409bee:	460d      	mov	r5, r1
  409bf0:	10a4      	asrs	r4, r4, #2
  409bf2:	d01c      	beq.n	409c2e <__pow5mult+0x4e>
  409bf4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409bf6:	b396      	cbz	r6, 409c5e <__pow5mult+0x7e>
  409bf8:	07e3      	lsls	r3, r4, #31
  409bfa:	f04f 0800 	mov.w	r8, #0
  409bfe:	d406      	bmi.n	409c0e <__pow5mult+0x2e>
  409c00:	1064      	asrs	r4, r4, #1
  409c02:	d014      	beq.n	409c2e <__pow5mult+0x4e>
  409c04:	6830      	ldr	r0, [r6, #0]
  409c06:	b1a8      	cbz	r0, 409c34 <__pow5mult+0x54>
  409c08:	4606      	mov	r6, r0
  409c0a:	07e3      	lsls	r3, r4, #31
  409c0c:	d5f8      	bpl.n	409c00 <__pow5mult+0x20>
  409c0e:	4632      	mov	r2, r6
  409c10:	4629      	mov	r1, r5
  409c12:	4638      	mov	r0, r7
  409c14:	f7ff ff52 	bl	409abc <__multiply>
  409c18:	b1b5      	cbz	r5, 409c48 <__pow5mult+0x68>
  409c1a:	686a      	ldr	r2, [r5, #4]
  409c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409c1e:	1064      	asrs	r4, r4, #1
  409c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409c24:	6029      	str	r1, [r5, #0]
  409c26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  409c2a:	4605      	mov	r5, r0
  409c2c:	d1ea      	bne.n	409c04 <__pow5mult+0x24>
  409c2e:	4628      	mov	r0, r5
  409c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409c34:	4632      	mov	r2, r6
  409c36:	4631      	mov	r1, r6
  409c38:	4638      	mov	r0, r7
  409c3a:	f7ff ff3f 	bl	409abc <__multiply>
  409c3e:	6030      	str	r0, [r6, #0]
  409c40:	f8c0 8000 	str.w	r8, [r0]
  409c44:	4606      	mov	r6, r0
  409c46:	e7e0      	b.n	409c0a <__pow5mult+0x2a>
  409c48:	4605      	mov	r5, r0
  409c4a:	e7d9      	b.n	409c00 <__pow5mult+0x20>
  409c4c:	1e5a      	subs	r2, r3, #1
  409c4e:	4d0b      	ldr	r5, [pc, #44]	; (409c7c <__pow5mult+0x9c>)
  409c50:	2300      	movs	r3, #0
  409c52:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409c56:	f7ff fe97 	bl	409988 <__multadd>
  409c5a:	4605      	mov	r5, r0
  409c5c:	e7c8      	b.n	409bf0 <__pow5mult+0x10>
  409c5e:	2101      	movs	r1, #1
  409c60:	4638      	mov	r0, r7
  409c62:	f7ff fe61 	bl	409928 <_Balloc>
  409c66:	f240 2171 	movw	r1, #625	; 0x271
  409c6a:	2201      	movs	r2, #1
  409c6c:	2300      	movs	r3, #0
  409c6e:	6141      	str	r1, [r0, #20]
  409c70:	6102      	str	r2, [r0, #16]
  409c72:	4606      	mov	r6, r0
  409c74:	64b8      	str	r0, [r7, #72]	; 0x48
  409c76:	6003      	str	r3, [r0, #0]
  409c78:	e7be      	b.n	409bf8 <__pow5mult+0x18>
  409c7a:	bf00      	nop
  409c7c:	0040b5d0 	.word	0x0040b5d0

00409c80 <__lshift>:
  409c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409c84:	4691      	mov	r9, r2
  409c86:	690a      	ldr	r2, [r1, #16]
  409c88:	688b      	ldr	r3, [r1, #8]
  409c8a:	ea4f 1469 	mov.w	r4, r9, asr #5
  409c8e:	eb04 0802 	add.w	r8, r4, r2
  409c92:	f108 0501 	add.w	r5, r8, #1
  409c96:	429d      	cmp	r5, r3
  409c98:	460e      	mov	r6, r1
  409c9a:	4607      	mov	r7, r0
  409c9c:	6849      	ldr	r1, [r1, #4]
  409c9e:	dd04      	ble.n	409caa <__lshift+0x2a>
  409ca0:	005b      	lsls	r3, r3, #1
  409ca2:	429d      	cmp	r5, r3
  409ca4:	f101 0101 	add.w	r1, r1, #1
  409ca8:	dcfa      	bgt.n	409ca0 <__lshift+0x20>
  409caa:	4638      	mov	r0, r7
  409cac:	f7ff fe3c 	bl	409928 <_Balloc>
  409cb0:	2c00      	cmp	r4, #0
  409cb2:	f100 0314 	add.w	r3, r0, #20
  409cb6:	dd06      	ble.n	409cc6 <__lshift+0x46>
  409cb8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  409cbc:	2100      	movs	r1, #0
  409cbe:	f843 1b04 	str.w	r1, [r3], #4
  409cc2:	429a      	cmp	r2, r3
  409cc4:	d1fb      	bne.n	409cbe <__lshift+0x3e>
  409cc6:	6934      	ldr	r4, [r6, #16]
  409cc8:	f106 0114 	add.w	r1, r6, #20
  409ccc:	f019 091f 	ands.w	r9, r9, #31
  409cd0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  409cd4:	d01d      	beq.n	409d12 <__lshift+0x92>
  409cd6:	f1c9 0c20 	rsb	ip, r9, #32
  409cda:	2200      	movs	r2, #0
  409cdc:	680c      	ldr	r4, [r1, #0]
  409cde:	fa04 f409 	lsl.w	r4, r4, r9
  409ce2:	4314      	orrs	r4, r2
  409ce4:	f843 4b04 	str.w	r4, [r3], #4
  409ce8:	f851 2b04 	ldr.w	r2, [r1], #4
  409cec:	458e      	cmp	lr, r1
  409cee:	fa22 f20c 	lsr.w	r2, r2, ip
  409cf2:	d8f3      	bhi.n	409cdc <__lshift+0x5c>
  409cf4:	601a      	str	r2, [r3, #0]
  409cf6:	b10a      	cbz	r2, 409cfc <__lshift+0x7c>
  409cf8:	f108 0502 	add.w	r5, r8, #2
  409cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409cfe:	6872      	ldr	r2, [r6, #4]
  409d00:	3d01      	subs	r5, #1
  409d02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409d06:	6105      	str	r5, [r0, #16]
  409d08:	6031      	str	r1, [r6, #0]
  409d0a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  409d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409d12:	3b04      	subs	r3, #4
  409d14:	f851 2b04 	ldr.w	r2, [r1], #4
  409d18:	f843 2f04 	str.w	r2, [r3, #4]!
  409d1c:	458e      	cmp	lr, r1
  409d1e:	d8f9      	bhi.n	409d14 <__lshift+0x94>
  409d20:	e7ec      	b.n	409cfc <__lshift+0x7c>
  409d22:	bf00      	nop

00409d24 <__mcmp>:
  409d24:	b430      	push	{r4, r5}
  409d26:	690b      	ldr	r3, [r1, #16]
  409d28:	4605      	mov	r5, r0
  409d2a:	6900      	ldr	r0, [r0, #16]
  409d2c:	1ac0      	subs	r0, r0, r3
  409d2e:	d10f      	bne.n	409d50 <__mcmp+0x2c>
  409d30:	009b      	lsls	r3, r3, #2
  409d32:	3514      	adds	r5, #20
  409d34:	3114      	adds	r1, #20
  409d36:	4419      	add	r1, r3
  409d38:	442b      	add	r3, r5
  409d3a:	e001      	b.n	409d40 <__mcmp+0x1c>
  409d3c:	429d      	cmp	r5, r3
  409d3e:	d207      	bcs.n	409d50 <__mcmp+0x2c>
  409d40:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409d44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409d48:	4294      	cmp	r4, r2
  409d4a:	d0f7      	beq.n	409d3c <__mcmp+0x18>
  409d4c:	d302      	bcc.n	409d54 <__mcmp+0x30>
  409d4e:	2001      	movs	r0, #1
  409d50:	bc30      	pop	{r4, r5}
  409d52:	4770      	bx	lr
  409d54:	f04f 30ff 	mov.w	r0, #4294967295
  409d58:	e7fa      	b.n	409d50 <__mcmp+0x2c>
  409d5a:	bf00      	nop

00409d5c <__mdiff>:
  409d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409d60:	690f      	ldr	r7, [r1, #16]
  409d62:	460e      	mov	r6, r1
  409d64:	6911      	ldr	r1, [r2, #16]
  409d66:	1a7f      	subs	r7, r7, r1
  409d68:	2f00      	cmp	r7, #0
  409d6a:	4690      	mov	r8, r2
  409d6c:	d117      	bne.n	409d9e <__mdiff+0x42>
  409d6e:	0089      	lsls	r1, r1, #2
  409d70:	f106 0514 	add.w	r5, r6, #20
  409d74:	f102 0e14 	add.w	lr, r2, #20
  409d78:	186b      	adds	r3, r5, r1
  409d7a:	4471      	add	r1, lr
  409d7c:	e001      	b.n	409d82 <__mdiff+0x26>
  409d7e:	429d      	cmp	r5, r3
  409d80:	d25c      	bcs.n	409e3c <__mdiff+0xe0>
  409d82:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409d86:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409d8a:	42a2      	cmp	r2, r4
  409d8c:	d0f7      	beq.n	409d7e <__mdiff+0x22>
  409d8e:	d25e      	bcs.n	409e4e <__mdiff+0xf2>
  409d90:	4633      	mov	r3, r6
  409d92:	462c      	mov	r4, r5
  409d94:	4646      	mov	r6, r8
  409d96:	4675      	mov	r5, lr
  409d98:	4698      	mov	r8, r3
  409d9a:	2701      	movs	r7, #1
  409d9c:	e005      	b.n	409daa <__mdiff+0x4e>
  409d9e:	db58      	blt.n	409e52 <__mdiff+0xf6>
  409da0:	f106 0514 	add.w	r5, r6, #20
  409da4:	f108 0414 	add.w	r4, r8, #20
  409da8:	2700      	movs	r7, #0
  409daa:	6871      	ldr	r1, [r6, #4]
  409dac:	f7ff fdbc 	bl	409928 <_Balloc>
  409db0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409db4:	6936      	ldr	r6, [r6, #16]
  409db6:	60c7      	str	r7, [r0, #12]
  409db8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  409dbc:	46a6      	mov	lr, r4
  409dbe:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409dc2:	f100 0414 	add.w	r4, r0, #20
  409dc6:	2300      	movs	r3, #0
  409dc8:	f85e 1b04 	ldr.w	r1, [lr], #4
  409dcc:	f855 8b04 	ldr.w	r8, [r5], #4
  409dd0:	b28a      	uxth	r2, r1
  409dd2:	fa13 f388 	uxtah	r3, r3, r8
  409dd6:	0c09      	lsrs	r1, r1, #16
  409dd8:	1a9a      	subs	r2, r3, r2
  409dda:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  409dde:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409de2:	b292      	uxth	r2, r2
  409de4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409de8:	45f4      	cmp	ip, lr
  409dea:	f844 2b04 	str.w	r2, [r4], #4
  409dee:	ea4f 4323 	mov.w	r3, r3, asr #16
  409df2:	d8e9      	bhi.n	409dc8 <__mdiff+0x6c>
  409df4:	42af      	cmp	r7, r5
  409df6:	d917      	bls.n	409e28 <__mdiff+0xcc>
  409df8:	46a4      	mov	ip, r4
  409dfa:	46ae      	mov	lr, r5
  409dfc:	f85e 2b04 	ldr.w	r2, [lr], #4
  409e00:	fa13 f382 	uxtah	r3, r3, r2
  409e04:	1419      	asrs	r1, r3, #16
  409e06:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409e0a:	b29b      	uxth	r3, r3
  409e0c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409e10:	4577      	cmp	r7, lr
  409e12:	f84c 2b04 	str.w	r2, [ip], #4
  409e16:	ea4f 4321 	mov.w	r3, r1, asr #16
  409e1a:	d8ef      	bhi.n	409dfc <__mdiff+0xa0>
  409e1c:	43ed      	mvns	r5, r5
  409e1e:	442f      	add	r7, r5
  409e20:	f027 0703 	bic.w	r7, r7, #3
  409e24:	3704      	adds	r7, #4
  409e26:	443c      	add	r4, r7
  409e28:	3c04      	subs	r4, #4
  409e2a:	b922      	cbnz	r2, 409e36 <__mdiff+0xda>
  409e2c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409e30:	3e01      	subs	r6, #1
  409e32:	2b00      	cmp	r3, #0
  409e34:	d0fa      	beq.n	409e2c <__mdiff+0xd0>
  409e36:	6106      	str	r6, [r0, #16]
  409e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e3c:	2100      	movs	r1, #0
  409e3e:	f7ff fd73 	bl	409928 <_Balloc>
  409e42:	2201      	movs	r2, #1
  409e44:	2300      	movs	r3, #0
  409e46:	6102      	str	r2, [r0, #16]
  409e48:	6143      	str	r3, [r0, #20]
  409e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e4e:	4674      	mov	r4, lr
  409e50:	e7ab      	b.n	409daa <__mdiff+0x4e>
  409e52:	4633      	mov	r3, r6
  409e54:	f106 0414 	add.w	r4, r6, #20
  409e58:	f102 0514 	add.w	r5, r2, #20
  409e5c:	4616      	mov	r6, r2
  409e5e:	2701      	movs	r7, #1
  409e60:	4698      	mov	r8, r3
  409e62:	e7a2      	b.n	409daa <__mdiff+0x4e>

00409e64 <__d2b>:
  409e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409e68:	b082      	sub	sp, #8
  409e6a:	2101      	movs	r1, #1
  409e6c:	461c      	mov	r4, r3
  409e6e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409e72:	4615      	mov	r5, r2
  409e74:	9e08      	ldr	r6, [sp, #32]
  409e76:	f7ff fd57 	bl	409928 <_Balloc>
  409e7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409e7e:	4680      	mov	r8, r0
  409e80:	b10f      	cbz	r7, 409e86 <__d2b+0x22>
  409e82:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409e86:	9401      	str	r4, [sp, #4]
  409e88:	b31d      	cbz	r5, 409ed2 <__d2b+0x6e>
  409e8a:	a802      	add	r0, sp, #8
  409e8c:	f840 5d08 	str.w	r5, [r0, #-8]!
  409e90:	f7ff fdda 	bl	409a48 <__lo0bits>
  409e94:	2800      	cmp	r0, #0
  409e96:	d134      	bne.n	409f02 <__d2b+0x9e>
  409e98:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409e9c:	f8c8 2014 	str.w	r2, [r8, #20]
  409ea0:	2b00      	cmp	r3, #0
  409ea2:	bf0c      	ite	eq
  409ea4:	2101      	moveq	r1, #1
  409ea6:	2102      	movne	r1, #2
  409ea8:	f8c8 3018 	str.w	r3, [r8, #24]
  409eac:	f8c8 1010 	str.w	r1, [r8, #16]
  409eb0:	b9df      	cbnz	r7, 409eea <__d2b+0x86>
  409eb2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409eb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409eba:	6030      	str	r0, [r6, #0]
  409ebc:	6918      	ldr	r0, [r3, #16]
  409ebe:	f7ff fda3 	bl	409a08 <__hi0bits>
  409ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409ec4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409ec8:	6018      	str	r0, [r3, #0]
  409eca:	4640      	mov	r0, r8
  409ecc:	b002      	add	sp, #8
  409ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ed2:	a801      	add	r0, sp, #4
  409ed4:	f7ff fdb8 	bl	409a48 <__lo0bits>
  409ed8:	9b01      	ldr	r3, [sp, #4]
  409eda:	f8c8 3014 	str.w	r3, [r8, #20]
  409ede:	2101      	movs	r1, #1
  409ee0:	3020      	adds	r0, #32
  409ee2:	f8c8 1010 	str.w	r1, [r8, #16]
  409ee6:	2f00      	cmp	r7, #0
  409ee8:	d0e3      	beq.n	409eb2 <__d2b+0x4e>
  409eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409eec:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409ef0:	4407      	add	r7, r0
  409ef2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409ef6:	6037      	str	r7, [r6, #0]
  409ef8:	6018      	str	r0, [r3, #0]
  409efa:	4640      	mov	r0, r8
  409efc:	b002      	add	sp, #8
  409efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f02:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409f06:	f1c0 0220 	rsb	r2, r0, #32
  409f0a:	fa03 f202 	lsl.w	r2, r3, r2
  409f0e:	430a      	orrs	r2, r1
  409f10:	40c3      	lsrs	r3, r0
  409f12:	9301      	str	r3, [sp, #4]
  409f14:	f8c8 2014 	str.w	r2, [r8, #20]
  409f18:	e7c2      	b.n	409ea0 <__d2b+0x3c>
  409f1a:	bf00      	nop

00409f1c <_realloc_r>:
  409f1c:	2900      	cmp	r1, #0
  409f1e:	f000 8095 	beq.w	40a04c <_realloc_r+0x130>
  409f22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f26:	460d      	mov	r5, r1
  409f28:	4616      	mov	r6, r2
  409f2a:	b083      	sub	sp, #12
  409f2c:	4680      	mov	r8, r0
  409f2e:	f106 070b 	add.w	r7, r6, #11
  409f32:	f7fc fa9d 	bl	406470 <__malloc_lock>
  409f36:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409f3a:	2f16      	cmp	r7, #22
  409f3c:	f02e 0403 	bic.w	r4, lr, #3
  409f40:	f1a5 0908 	sub.w	r9, r5, #8
  409f44:	d83c      	bhi.n	409fc0 <_realloc_r+0xa4>
  409f46:	2210      	movs	r2, #16
  409f48:	4617      	mov	r7, r2
  409f4a:	42be      	cmp	r6, r7
  409f4c:	d83d      	bhi.n	409fca <_realloc_r+0xae>
  409f4e:	4294      	cmp	r4, r2
  409f50:	da43      	bge.n	409fda <_realloc_r+0xbe>
  409f52:	4bc4      	ldr	r3, [pc, #784]	; (40a264 <_realloc_r+0x348>)
  409f54:	6899      	ldr	r1, [r3, #8]
  409f56:	eb09 0004 	add.w	r0, r9, r4
  409f5a:	4288      	cmp	r0, r1
  409f5c:	f000 80b4 	beq.w	40a0c8 <_realloc_r+0x1ac>
  409f60:	6843      	ldr	r3, [r0, #4]
  409f62:	f023 0101 	bic.w	r1, r3, #1
  409f66:	4401      	add	r1, r0
  409f68:	6849      	ldr	r1, [r1, #4]
  409f6a:	07c9      	lsls	r1, r1, #31
  409f6c:	d54c      	bpl.n	40a008 <_realloc_r+0xec>
  409f6e:	f01e 0f01 	tst.w	lr, #1
  409f72:	f000 809b 	beq.w	40a0ac <_realloc_r+0x190>
  409f76:	4631      	mov	r1, r6
  409f78:	4640      	mov	r0, r8
  409f7a:	f7fb fee1 	bl	405d40 <_malloc_r>
  409f7e:	4606      	mov	r6, r0
  409f80:	2800      	cmp	r0, #0
  409f82:	d03a      	beq.n	409ffa <_realloc_r+0xde>
  409f84:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409f88:	f023 0301 	bic.w	r3, r3, #1
  409f8c:	444b      	add	r3, r9
  409f8e:	f1a0 0208 	sub.w	r2, r0, #8
  409f92:	429a      	cmp	r2, r3
  409f94:	f000 8121 	beq.w	40a1da <_realloc_r+0x2be>
  409f98:	1f22      	subs	r2, r4, #4
  409f9a:	2a24      	cmp	r2, #36	; 0x24
  409f9c:	f200 8107 	bhi.w	40a1ae <_realloc_r+0x292>
  409fa0:	2a13      	cmp	r2, #19
  409fa2:	f200 80db 	bhi.w	40a15c <_realloc_r+0x240>
  409fa6:	4603      	mov	r3, r0
  409fa8:	462a      	mov	r2, r5
  409faa:	6811      	ldr	r1, [r2, #0]
  409fac:	6019      	str	r1, [r3, #0]
  409fae:	6851      	ldr	r1, [r2, #4]
  409fb0:	6059      	str	r1, [r3, #4]
  409fb2:	6892      	ldr	r2, [r2, #8]
  409fb4:	609a      	str	r2, [r3, #8]
  409fb6:	4629      	mov	r1, r5
  409fb8:	4640      	mov	r0, r8
  409fba:	f7ff f8e9 	bl	409190 <_free_r>
  409fbe:	e01c      	b.n	409ffa <_realloc_r+0xde>
  409fc0:	f027 0707 	bic.w	r7, r7, #7
  409fc4:	2f00      	cmp	r7, #0
  409fc6:	463a      	mov	r2, r7
  409fc8:	dabf      	bge.n	409f4a <_realloc_r+0x2e>
  409fca:	2600      	movs	r6, #0
  409fcc:	230c      	movs	r3, #12
  409fce:	4630      	mov	r0, r6
  409fd0:	f8c8 3000 	str.w	r3, [r8]
  409fd4:	b003      	add	sp, #12
  409fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fda:	462e      	mov	r6, r5
  409fdc:	1be3      	subs	r3, r4, r7
  409fde:	2b0f      	cmp	r3, #15
  409fe0:	d81e      	bhi.n	40a020 <_realloc_r+0x104>
  409fe2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409fe6:	f003 0301 	and.w	r3, r3, #1
  409fea:	4323      	orrs	r3, r4
  409fec:	444c      	add	r4, r9
  409fee:	f8c9 3004 	str.w	r3, [r9, #4]
  409ff2:	6863      	ldr	r3, [r4, #4]
  409ff4:	f043 0301 	orr.w	r3, r3, #1
  409ff8:	6063      	str	r3, [r4, #4]
  409ffa:	4640      	mov	r0, r8
  409ffc:	f7fc fa3e 	bl	40647c <__malloc_unlock>
  40a000:	4630      	mov	r0, r6
  40a002:	b003      	add	sp, #12
  40a004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a008:	f023 0303 	bic.w	r3, r3, #3
  40a00c:	18e1      	adds	r1, r4, r3
  40a00e:	4291      	cmp	r1, r2
  40a010:	db1f      	blt.n	40a052 <_realloc_r+0x136>
  40a012:	68c3      	ldr	r3, [r0, #12]
  40a014:	6882      	ldr	r2, [r0, #8]
  40a016:	462e      	mov	r6, r5
  40a018:	60d3      	str	r3, [r2, #12]
  40a01a:	460c      	mov	r4, r1
  40a01c:	609a      	str	r2, [r3, #8]
  40a01e:	e7dd      	b.n	409fdc <_realloc_r+0xc0>
  40a020:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40a024:	eb09 0107 	add.w	r1, r9, r7
  40a028:	f002 0201 	and.w	r2, r2, #1
  40a02c:	444c      	add	r4, r9
  40a02e:	f043 0301 	orr.w	r3, r3, #1
  40a032:	4317      	orrs	r7, r2
  40a034:	f8c9 7004 	str.w	r7, [r9, #4]
  40a038:	604b      	str	r3, [r1, #4]
  40a03a:	6863      	ldr	r3, [r4, #4]
  40a03c:	f043 0301 	orr.w	r3, r3, #1
  40a040:	3108      	adds	r1, #8
  40a042:	6063      	str	r3, [r4, #4]
  40a044:	4640      	mov	r0, r8
  40a046:	f7ff f8a3 	bl	409190 <_free_r>
  40a04a:	e7d6      	b.n	409ffa <_realloc_r+0xde>
  40a04c:	4611      	mov	r1, r2
  40a04e:	f7fb be77 	b.w	405d40 <_malloc_r>
  40a052:	f01e 0f01 	tst.w	lr, #1
  40a056:	d18e      	bne.n	409f76 <_realloc_r+0x5a>
  40a058:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a05c:	eba9 0a01 	sub.w	sl, r9, r1
  40a060:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a064:	f021 0103 	bic.w	r1, r1, #3
  40a068:	440b      	add	r3, r1
  40a06a:	4423      	add	r3, r4
  40a06c:	4293      	cmp	r3, r2
  40a06e:	db25      	blt.n	40a0bc <_realloc_r+0x1a0>
  40a070:	68c2      	ldr	r2, [r0, #12]
  40a072:	6881      	ldr	r1, [r0, #8]
  40a074:	4656      	mov	r6, sl
  40a076:	60ca      	str	r2, [r1, #12]
  40a078:	6091      	str	r1, [r2, #8]
  40a07a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a07e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a082:	1f22      	subs	r2, r4, #4
  40a084:	2a24      	cmp	r2, #36	; 0x24
  40a086:	60c1      	str	r1, [r0, #12]
  40a088:	6088      	str	r0, [r1, #8]
  40a08a:	f200 8094 	bhi.w	40a1b6 <_realloc_r+0x29a>
  40a08e:	2a13      	cmp	r2, #19
  40a090:	d96f      	bls.n	40a172 <_realloc_r+0x256>
  40a092:	6829      	ldr	r1, [r5, #0]
  40a094:	f8ca 1008 	str.w	r1, [sl, #8]
  40a098:	6869      	ldr	r1, [r5, #4]
  40a09a:	f8ca 100c 	str.w	r1, [sl, #12]
  40a09e:	2a1b      	cmp	r2, #27
  40a0a0:	f200 80a2 	bhi.w	40a1e8 <_realloc_r+0x2cc>
  40a0a4:	3508      	adds	r5, #8
  40a0a6:	f10a 0210 	add.w	r2, sl, #16
  40a0aa:	e063      	b.n	40a174 <_realloc_r+0x258>
  40a0ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40a0b0:	eba9 0a03 	sub.w	sl, r9, r3
  40a0b4:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a0b8:	f021 0103 	bic.w	r1, r1, #3
  40a0bc:	1863      	adds	r3, r4, r1
  40a0be:	4293      	cmp	r3, r2
  40a0c0:	f6ff af59 	blt.w	409f76 <_realloc_r+0x5a>
  40a0c4:	4656      	mov	r6, sl
  40a0c6:	e7d8      	b.n	40a07a <_realloc_r+0x15e>
  40a0c8:	6841      	ldr	r1, [r0, #4]
  40a0ca:	f021 0b03 	bic.w	fp, r1, #3
  40a0ce:	44a3      	add	fp, r4
  40a0d0:	f107 0010 	add.w	r0, r7, #16
  40a0d4:	4583      	cmp	fp, r0
  40a0d6:	da56      	bge.n	40a186 <_realloc_r+0x26a>
  40a0d8:	f01e 0f01 	tst.w	lr, #1
  40a0dc:	f47f af4b 	bne.w	409f76 <_realloc_r+0x5a>
  40a0e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a0e4:	eba9 0a01 	sub.w	sl, r9, r1
  40a0e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a0ec:	f021 0103 	bic.w	r1, r1, #3
  40a0f0:	448b      	add	fp, r1
  40a0f2:	4558      	cmp	r0, fp
  40a0f4:	dce2      	bgt.n	40a0bc <_realloc_r+0x1a0>
  40a0f6:	4656      	mov	r6, sl
  40a0f8:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a0fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a100:	1f22      	subs	r2, r4, #4
  40a102:	2a24      	cmp	r2, #36	; 0x24
  40a104:	60c1      	str	r1, [r0, #12]
  40a106:	6088      	str	r0, [r1, #8]
  40a108:	f200 808f 	bhi.w	40a22a <_realloc_r+0x30e>
  40a10c:	2a13      	cmp	r2, #19
  40a10e:	f240 808a 	bls.w	40a226 <_realloc_r+0x30a>
  40a112:	6829      	ldr	r1, [r5, #0]
  40a114:	f8ca 1008 	str.w	r1, [sl, #8]
  40a118:	6869      	ldr	r1, [r5, #4]
  40a11a:	f8ca 100c 	str.w	r1, [sl, #12]
  40a11e:	2a1b      	cmp	r2, #27
  40a120:	f200 808a 	bhi.w	40a238 <_realloc_r+0x31c>
  40a124:	3508      	adds	r5, #8
  40a126:	f10a 0210 	add.w	r2, sl, #16
  40a12a:	6829      	ldr	r1, [r5, #0]
  40a12c:	6011      	str	r1, [r2, #0]
  40a12e:	6869      	ldr	r1, [r5, #4]
  40a130:	6051      	str	r1, [r2, #4]
  40a132:	68a9      	ldr	r1, [r5, #8]
  40a134:	6091      	str	r1, [r2, #8]
  40a136:	eb0a 0107 	add.w	r1, sl, r7
  40a13a:	ebab 0207 	sub.w	r2, fp, r7
  40a13e:	f042 0201 	orr.w	r2, r2, #1
  40a142:	6099      	str	r1, [r3, #8]
  40a144:	604a      	str	r2, [r1, #4]
  40a146:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a14a:	f003 0301 	and.w	r3, r3, #1
  40a14e:	431f      	orrs	r7, r3
  40a150:	4640      	mov	r0, r8
  40a152:	f8ca 7004 	str.w	r7, [sl, #4]
  40a156:	f7fc f991 	bl	40647c <__malloc_unlock>
  40a15a:	e751      	b.n	40a000 <_realloc_r+0xe4>
  40a15c:	682b      	ldr	r3, [r5, #0]
  40a15e:	6003      	str	r3, [r0, #0]
  40a160:	686b      	ldr	r3, [r5, #4]
  40a162:	6043      	str	r3, [r0, #4]
  40a164:	2a1b      	cmp	r2, #27
  40a166:	d82d      	bhi.n	40a1c4 <_realloc_r+0x2a8>
  40a168:	f100 0308 	add.w	r3, r0, #8
  40a16c:	f105 0208 	add.w	r2, r5, #8
  40a170:	e71b      	b.n	409faa <_realloc_r+0x8e>
  40a172:	4632      	mov	r2, r6
  40a174:	6829      	ldr	r1, [r5, #0]
  40a176:	6011      	str	r1, [r2, #0]
  40a178:	6869      	ldr	r1, [r5, #4]
  40a17a:	6051      	str	r1, [r2, #4]
  40a17c:	68a9      	ldr	r1, [r5, #8]
  40a17e:	6091      	str	r1, [r2, #8]
  40a180:	461c      	mov	r4, r3
  40a182:	46d1      	mov	r9, sl
  40a184:	e72a      	b.n	409fdc <_realloc_r+0xc0>
  40a186:	eb09 0107 	add.w	r1, r9, r7
  40a18a:	ebab 0b07 	sub.w	fp, fp, r7
  40a18e:	f04b 0201 	orr.w	r2, fp, #1
  40a192:	6099      	str	r1, [r3, #8]
  40a194:	604a      	str	r2, [r1, #4]
  40a196:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a19a:	f003 0301 	and.w	r3, r3, #1
  40a19e:	431f      	orrs	r7, r3
  40a1a0:	4640      	mov	r0, r8
  40a1a2:	f845 7c04 	str.w	r7, [r5, #-4]
  40a1a6:	f7fc f969 	bl	40647c <__malloc_unlock>
  40a1aa:	462e      	mov	r6, r5
  40a1ac:	e728      	b.n	40a000 <_realloc_r+0xe4>
  40a1ae:	4629      	mov	r1, r5
  40a1b0:	f7ff fb56 	bl	409860 <memmove>
  40a1b4:	e6ff      	b.n	409fb6 <_realloc_r+0x9a>
  40a1b6:	4629      	mov	r1, r5
  40a1b8:	4630      	mov	r0, r6
  40a1ba:	461c      	mov	r4, r3
  40a1bc:	46d1      	mov	r9, sl
  40a1be:	f7ff fb4f 	bl	409860 <memmove>
  40a1c2:	e70b      	b.n	409fdc <_realloc_r+0xc0>
  40a1c4:	68ab      	ldr	r3, [r5, #8]
  40a1c6:	6083      	str	r3, [r0, #8]
  40a1c8:	68eb      	ldr	r3, [r5, #12]
  40a1ca:	60c3      	str	r3, [r0, #12]
  40a1cc:	2a24      	cmp	r2, #36	; 0x24
  40a1ce:	d017      	beq.n	40a200 <_realloc_r+0x2e4>
  40a1d0:	f100 0310 	add.w	r3, r0, #16
  40a1d4:	f105 0210 	add.w	r2, r5, #16
  40a1d8:	e6e7      	b.n	409faa <_realloc_r+0x8e>
  40a1da:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40a1de:	f023 0303 	bic.w	r3, r3, #3
  40a1e2:	441c      	add	r4, r3
  40a1e4:	462e      	mov	r6, r5
  40a1e6:	e6f9      	b.n	409fdc <_realloc_r+0xc0>
  40a1e8:	68a9      	ldr	r1, [r5, #8]
  40a1ea:	f8ca 1010 	str.w	r1, [sl, #16]
  40a1ee:	68e9      	ldr	r1, [r5, #12]
  40a1f0:	f8ca 1014 	str.w	r1, [sl, #20]
  40a1f4:	2a24      	cmp	r2, #36	; 0x24
  40a1f6:	d00c      	beq.n	40a212 <_realloc_r+0x2f6>
  40a1f8:	3510      	adds	r5, #16
  40a1fa:	f10a 0218 	add.w	r2, sl, #24
  40a1fe:	e7b9      	b.n	40a174 <_realloc_r+0x258>
  40a200:	692b      	ldr	r3, [r5, #16]
  40a202:	6103      	str	r3, [r0, #16]
  40a204:	696b      	ldr	r3, [r5, #20]
  40a206:	6143      	str	r3, [r0, #20]
  40a208:	f105 0218 	add.w	r2, r5, #24
  40a20c:	f100 0318 	add.w	r3, r0, #24
  40a210:	e6cb      	b.n	409faa <_realloc_r+0x8e>
  40a212:	692a      	ldr	r2, [r5, #16]
  40a214:	f8ca 2018 	str.w	r2, [sl, #24]
  40a218:	696a      	ldr	r2, [r5, #20]
  40a21a:	f8ca 201c 	str.w	r2, [sl, #28]
  40a21e:	3518      	adds	r5, #24
  40a220:	f10a 0220 	add.w	r2, sl, #32
  40a224:	e7a6      	b.n	40a174 <_realloc_r+0x258>
  40a226:	4632      	mov	r2, r6
  40a228:	e77f      	b.n	40a12a <_realloc_r+0x20e>
  40a22a:	4629      	mov	r1, r5
  40a22c:	4630      	mov	r0, r6
  40a22e:	9301      	str	r3, [sp, #4]
  40a230:	f7ff fb16 	bl	409860 <memmove>
  40a234:	9b01      	ldr	r3, [sp, #4]
  40a236:	e77e      	b.n	40a136 <_realloc_r+0x21a>
  40a238:	68a9      	ldr	r1, [r5, #8]
  40a23a:	f8ca 1010 	str.w	r1, [sl, #16]
  40a23e:	68e9      	ldr	r1, [r5, #12]
  40a240:	f8ca 1014 	str.w	r1, [sl, #20]
  40a244:	2a24      	cmp	r2, #36	; 0x24
  40a246:	d003      	beq.n	40a250 <_realloc_r+0x334>
  40a248:	3510      	adds	r5, #16
  40a24a:	f10a 0218 	add.w	r2, sl, #24
  40a24e:	e76c      	b.n	40a12a <_realloc_r+0x20e>
  40a250:	692a      	ldr	r2, [r5, #16]
  40a252:	f8ca 2018 	str.w	r2, [sl, #24]
  40a256:	696a      	ldr	r2, [r5, #20]
  40a258:	f8ca 201c 	str.w	r2, [sl, #28]
  40a25c:	3518      	adds	r5, #24
  40a25e:	f10a 0220 	add.w	r2, sl, #32
  40a262:	e762      	b.n	40a12a <_realloc_r+0x20e>
  40a264:	20400458 	.word	0x20400458

0040a268 <__sread>:
  40a268:	b510      	push	{r4, lr}
  40a26a:	460c      	mov	r4, r1
  40a26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a270:	f000 fa88 	bl	40a784 <_read_r>
  40a274:	2800      	cmp	r0, #0
  40a276:	db03      	blt.n	40a280 <__sread+0x18>
  40a278:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40a27a:	4403      	add	r3, r0
  40a27c:	6523      	str	r3, [r4, #80]	; 0x50
  40a27e:	bd10      	pop	{r4, pc}
  40a280:	89a3      	ldrh	r3, [r4, #12]
  40a282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40a286:	81a3      	strh	r3, [r4, #12]
  40a288:	bd10      	pop	{r4, pc}
  40a28a:	bf00      	nop

0040a28c <__swrite>:
  40a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a290:	4616      	mov	r6, r2
  40a292:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40a296:	461f      	mov	r7, r3
  40a298:	05d3      	lsls	r3, r2, #23
  40a29a:	460c      	mov	r4, r1
  40a29c:	4605      	mov	r5, r0
  40a29e:	d507      	bpl.n	40a2b0 <__swrite+0x24>
  40a2a0:	2200      	movs	r2, #0
  40a2a2:	2302      	movs	r3, #2
  40a2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a2a8:	f000 fa40 	bl	40a72c <_lseek_r>
  40a2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a2b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40a2b8:	81a2      	strh	r2, [r4, #12]
  40a2ba:	463b      	mov	r3, r7
  40a2bc:	4632      	mov	r2, r6
  40a2be:	4628      	mov	r0, r5
  40a2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a2c4:	f000 b85e 	b.w	40a384 <_write_r>

0040a2c8 <__sseek>:
  40a2c8:	b510      	push	{r4, lr}
  40a2ca:	460c      	mov	r4, r1
  40a2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a2d0:	f000 fa2c 	bl	40a72c <_lseek_r>
  40a2d4:	89a3      	ldrh	r3, [r4, #12]
  40a2d6:	1c42      	adds	r2, r0, #1
  40a2d8:	bf0e      	itee	eq
  40a2da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40a2de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40a2e2:	6520      	strne	r0, [r4, #80]	; 0x50
  40a2e4:	81a3      	strh	r3, [r4, #12]
  40a2e6:	bd10      	pop	{r4, pc}

0040a2e8 <__sclose>:
  40a2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a2ec:	f000 b8f2 	b.w	40a4d4 <_close_r>

0040a2f0 <__sprint_r.part.0>:
  40a2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a2f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40a2f6:	049c      	lsls	r4, r3, #18
  40a2f8:	4693      	mov	fp, r2
  40a2fa:	d52f      	bpl.n	40a35c <__sprint_r.part.0+0x6c>
  40a2fc:	6893      	ldr	r3, [r2, #8]
  40a2fe:	6812      	ldr	r2, [r2, #0]
  40a300:	b353      	cbz	r3, 40a358 <__sprint_r.part.0+0x68>
  40a302:	460e      	mov	r6, r1
  40a304:	4607      	mov	r7, r0
  40a306:	f102 0908 	add.w	r9, r2, #8
  40a30a:	e919 0420 	ldmdb	r9, {r5, sl}
  40a30e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40a312:	d017      	beq.n	40a344 <__sprint_r.part.0+0x54>
  40a314:	3d04      	subs	r5, #4
  40a316:	2400      	movs	r4, #0
  40a318:	e001      	b.n	40a31e <__sprint_r.part.0+0x2e>
  40a31a:	45a0      	cmp	r8, r4
  40a31c:	d010      	beq.n	40a340 <__sprint_r.part.0+0x50>
  40a31e:	4632      	mov	r2, r6
  40a320:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40a324:	4638      	mov	r0, r7
  40a326:	f000 f999 	bl	40a65c <_fputwc_r>
  40a32a:	1c43      	adds	r3, r0, #1
  40a32c:	f104 0401 	add.w	r4, r4, #1
  40a330:	d1f3      	bne.n	40a31a <__sprint_r.part.0+0x2a>
  40a332:	2300      	movs	r3, #0
  40a334:	f8cb 3008 	str.w	r3, [fp, #8]
  40a338:	f8cb 3004 	str.w	r3, [fp, #4]
  40a33c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a340:	f8db 3008 	ldr.w	r3, [fp, #8]
  40a344:	f02a 0a03 	bic.w	sl, sl, #3
  40a348:	eba3 030a 	sub.w	r3, r3, sl
  40a34c:	f8cb 3008 	str.w	r3, [fp, #8]
  40a350:	f109 0908 	add.w	r9, r9, #8
  40a354:	2b00      	cmp	r3, #0
  40a356:	d1d8      	bne.n	40a30a <__sprint_r.part.0+0x1a>
  40a358:	2000      	movs	r0, #0
  40a35a:	e7ea      	b.n	40a332 <__sprint_r.part.0+0x42>
  40a35c:	f7fe fffe 	bl	40935c <__sfvwrite_r>
  40a360:	2300      	movs	r3, #0
  40a362:	f8cb 3008 	str.w	r3, [fp, #8]
  40a366:	f8cb 3004 	str.w	r3, [fp, #4]
  40a36a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a36e:	bf00      	nop

0040a370 <__sprint_r>:
  40a370:	6893      	ldr	r3, [r2, #8]
  40a372:	b10b      	cbz	r3, 40a378 <__sprint_r+0x8>
  40a374:	f7ff bfbc 	b.w	40a2f0 <__sprint_r.part.0>
  40a378:	b410      	push	{r4}
  40a37a:	4618      	mov	r0, r3
  40a37c:	6053      	str	r3, [r2, #4]
  40a37e:	bc10      	pop	{r4}
  40a380:	4770      	bx	lr
  40a382:	bf00      	nop

0040a384 <_write_r>:
  40a384:	b570      	push	{r4, r5, r6, lr}
  40a386:	460d      	mov	r5, r1
  40a388:	4c08      	ldr	r4, [pc, #32]	; (40a3ac <_write_r+0x28>)
  40a38a:	4611      	mov	r1, r2
  40a38c:	4606      	mov	r6, r0
  40a38e:	461a      	mov	r2, r3
  40a390:	4628      	mov	r0, r5
  40a392:	2300      	movs	r3, #0
  40a394:	6023      	str	r3, [r4, #0]
  40a396:	f7f6 fc9d 	bl	400cd4 <_write>
  40a39a:	1c43      	adds	r3, r0, #1
  40a39c:	d000      	beq.n	40a3a0 <_write_r+0x1c>
  40a39e:	bd70      	pop	{r4, r5, r6, pc}
  40a3a0:	6823      	ldr	r3, [r4, #0]
  40a3a2:	2b00      	cmp	r3, #0
  40a3a4:	d0fb      	beq.n	40a39e <_write_r+0x1a>
  40a3a6:	6033      	str	r3, [r6, #0]
  40a3a8:	bd70      	pop	{r4, r5, r6, pc}
  40a3aa:	bf00      	nop
  40a3ac:	20400e60 	.word	0x20400e60

0040a3b0 <__register_exitproc>:
  40a3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a3b4:	4d2c      	ldr	r5, [pc, #176]	; (40a468 <__register_exitproc+0xb8>)
  40a3b6:	4606      	mov	r6, r0
  40a3b8:	6828      	ldr	r0, [r5, #0]
  40a3ba:	4698      	mov	r8, r3
  40a3bc:	460f      	mov	r7, r1
  40a3be:	4691      	mov	r9, r2
  40a3c0:	f7ff f980 	bl	4096c4 <__retarget_lock_acquire_recursive>
  40a3c4:	4b29      	ldr	r3, [pc, #164]	; (40a46c <__register_exitproc+0xbc>)
  40a3c6:	681c      	ldr	r4, [r3, #0]
  40a3c8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40a3cc:	2b00      	cmp	r3, #0
  40a3ce:	d03e      	beq.n	40a44e <__register_exitproc+0x9e>
  40a3d0:	685a      	ldr	r2, [r3, #4]
  40a3d2:	2a1f      	cmp	r2, #31
  40a3d4:	dc1c      	bgt.n	40a410 <__register_exitproc+0x60>
  40a3d6:	f102 0e01 	add.w	lr, r2, #1
  40a3da:	b176      	cbz	r6, 40a3fa <__register_exitproc+0x4a>
  40a3dc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40a3e0:	2401      	movs	r4, #1
  40a3e2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40a3e6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40a3ea:	4094      	lsls	r4, r2
  40a3ec:	4320      	orrs	r0, r4
  40a3ee:	2e02      	cmp	r6, #2
  40a3f0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40a3f4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40a3f8:	d023      	beq.n	40a442 <__register_exitproc+0x92>
  40a3fa:	3202      	adds	r2, #2
  40a3fc:	f8c3 e004 	str.w	lr, [r3, #4]
  40a400:	6828      	ldr	r0, [r5, #0]
  40a402:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40a406:	f7ff f95f 	bl	4096c8 <__retarget_lock_release_recursive>
  40a40a:	2000      	movs	r0, #0
  40a40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a410:	4b17      	ldr	r3, [pc, #92]	; (40a470 <__register_exitproc+0xc0>)
  40a412:	b30b      	cbz	r3, 40a458 <__register_exitproc+0xa8>
  40a414:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a418:	f7fb fc82 	bl	405d20 <malloc>
  40a41c:	4603      	mov	r3, r0
  40a41e:	b1d8      	cbz	r0, 40a458 <__register_exitproc+0xa8>
  40a420:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40a424:	6002      	str	r2, [r0, #0]
  40a426:	2100      	movs	r1, #0
  40a428:	6041      	str	r1, [r0, #4]
  40a42a:	460a      	mov	r2, r1
  40a42c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40a430:	f04f 0e01 	mov.w	lr, #1
  40a434:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40a438:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40a43c:	2e00      	cmp	r6, #0
  40a43e:	d0dc      	beq.n	40a3fa <__register_exitproc+0x4a>
  40a440:	e7cc      	b.n	40a3dc <__register_exitproc+0x2c>
  40a442:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40a446:	430c      	orrs	r4, r1
  40a448:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40a44c:	e7d5      	b.n	40a3fa <__register_exitproc+0x4a>
  40a44e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40a452:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40a456:	e7bb      	b.n	40a3d0 <__register_exitproc+0x20>
  40a458:	6828      	ldr	r0, [r5, #0]
  40a45a:	f7ff f935 	bl	4096c8 <__retarget_lock_release_recursive>
  40a45e:	f04f 30ff 	mov.w	r0, #4294967295
  40a462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a466:	bf00      	nop
  40a468:	20400868 	.word	0x20400868
  40a46c:	0040b464 	.word	0x0040b464
  40a470:	00405d21 	.word	0x00405d21

0040a474 <_calloc_r>:
  40a474:	b510      	push	{r4, lr}
  40a476:	fb02 f101 	mul.w	r1, r2, r1
  40a47a:	f7fb fc61 	bl	405d40 <_malloc_r>
  40a47e:	4604      	mov	r4, r0
  40a480:	b1d8      	cbz	r0, 40a4ba <_calloc_r+0x46>
  40a482:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a486:	f022 0203 	bic.w	r2, r2, #3
  40a48a:	3a04      	subs	r2, #4
  40a48c:	2a24      	cmp	r2, #36	; 0x24
  40a48e:	d818      	bhi.n	40a4c2 <_calloc_r+0x4e>
  40a490:	2a13      	cmp	r2, #19
  40a492:	d914      	bls.n	40a4be <_calloc_r+0x4a>
  40a494:	2300      	movs	r3, #0
  40a496:	2a1b      	cmp	r2, #27
  40a498:	6003      	str	r3, [r0, #0]
  40a49a:	6043      	str	r3, [r0, #4]
  40a49c:	d916      	bls.n	40a4cc <_calloc_r+0x58>
  40a49e:	2a24      	cmp	r2, #36	; 0x24
  40a4a0:	6083      	str	r3, [r0, #8]
  40a4a2:	60c3      	str	r3, [r0, #12]
  40a4a4:	bf11      	iteee	ne
  40a4a6:	f100 0210 	addne.w	r2, r0, #16
  40a4aa:	6103      	streq	r3, [r0, #16]
  40a4ac:	6143      	streq	r3, [r0, #20]
  40a4ae:	f100 0218 	addeq.w	r2, r0, #24
  40a4b2:	2300      	movs	r3, #0
  40a4b4:	6013      	str	r3, [r2, #0]
  40a4b6:	6053      	str	r3, [r2, #4]
  40a4b8:	6093      	str	r3, [r2, #8]
  40a4ba:	4620      	mov	r0, r4
  40a4bc:	bd10      	pop	{r4, pc}
  40a4be:	4602      	mov	r2, r0
  40a4c0:	e7f7      	b.n	40a4b2 <_calloc_r+0x3e>
  40a4c2:	2100      	movs	r1, #0
  40a4c4:	f7fb ff86 	bl	4063d4 <memset>
  40a4c8:	4620      	mov	r0, r4
  40a4ca:	bd10      	pop	{r4, pc}
  40a4cc:	f100 0208 	add.w	r2, r0, #8
  40a4d0:	e7ef      	b.n	40a4b2 <_calloc_r+0x3e>
  40a4d2:	bf00      	nop

0040a4d4 <_close_r>:
  40a4d4:	b538      	push	{r3, r4, r5, lr}
  40a4d6:	4c07      	ldr	r4, [pc, #28]	; (40a4f4 <_close_r+0x20>)
  40a4d8:	2300      	movs	r3, #0
  40a4da:	4605      	mov	r5, r0
  40a4dc:	4608      	mov	r0, r1
  40a4de:	6023      	str	r3, [r4, #0]
  40a4e0:	f7f7 f912 	bl	401708 <_close>
  40a4e4:	1c43      	adds	r3, r0, #1
  40a4e6:	d000      	beq.n	40a4ea <_close_r+0x16>
  40a4e8:	bd38      	pop	{r3, r4, r5, pc}
  40a4ea:	6823      	ldr	r3, [r4, #0]
  40a4ec:	2b00      	cmp	r3, #0
  40a4ee:	d0fb      	beq.n	40a4e8 <_close_r+0x14>
  40a4f0:	602b      	str	r3, [r5, #0]
  40a4f2:	bd38      	pop	{r3, r4, r5, pc}
  40a4f4:	20400e60 	.word	0x20400e60

0040a4f8 <_fclose_r>:
  40a4f8:	b570      	push	{r4, r5, r6, lr}
  40a4fa:	b159      	cbz	r1, 40a514 <_fclose_r+0x1c>
  40a4fc:	4605      	mov	r5, r0
  40a4fe:	460c      	mov	r4, r1
  40a500:	b110      	cbz	r0, 40a508 <_fclose_r+0x10>
  40a502:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a504:	2b00      	cmp	r3, #0
  40a506:	d03c      	beq.n	40a582 <_fclose_r+0x8a>
  40a508:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a50a:	07d8      	lsls	r0, r3, #31
  40a50c:	d505      	bpl.n	40a51a <_fclose_r+0x22>
  40a50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a512:	b92b      	cbnz	r3, 40a520 <_fclose_r+0x28>
  40a514:	2600      	movs	r6, #0
  40a516:	4630      	mov	r0, r6
  40a518:	bd70      	pop	{r4, r5, r6, pc}
  40a51a:	89a3      	ldrh	r3, [r4, #12]
  40a51c:	0599      	lsls	r1, r3, #22
  40a51e:	d53c      	bpl.n	40a59a <_fclose_r+0xa2>
  40a520:	4621      	mov	r1, r4
  40a522:	4628      	mov	r0, r5
  40a524:	f7fe fc9a 	bl	408e5c <__sflush_r>
  40a528:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40a52a:	4606      	mov	r6, r0
  40a52c:	b133      	cbz	r3, 40a53c <_fclose_r+0x44>
  40a52e:	69e1      	ldr	r1, [r4, #28]
  40a530:	4628      	mov	r0, r5
  40a532:	4798      	blx	r3
  40a534:	2800      	cmp	r0, #0
  40a536:	bfb8      	it	lt
  40a538:	f04f 36ff 	movlt.w	r6, #4294967295
  40a53c:	89a3      	ldrh	r3, [r4, #12]
  40a53e:	061a      	lsls	r2, r3, #24
  40a540:	d422      	bmi.n	40a588 <_fclose_r+0x90>
  40a542:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a544:	b141      	cbz	r1, 40a558 <_fclose_r+0x60>
  40a546:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a54a:	4299      	cmp	r1, r3
  40a54c:	d002      	beq.n	40a554 <_fclose_r+0x5c>
  40a54e:	4628      	mov	r0, r5
  40a550:	f7fe fe1e 	bl	409190 <_free_r>
  40a554:	2300      	movs	r3, #0
  40a556:	6323      	str	r3, [r4, #48]	; 0x30
  40a558:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40a55a:	b121      	cbz	r1, 40a566 <_fclose_r+0x6e>
  40a55c:	4628      	mov	r0, r5
  40a55e:	f7fe fe17 	bl	409190 <_free_r>
  40a562:	2300      	movs	r3, #0
  40a564:	6463      	str	r3, [r4, #68]	; 0x44
  40a566:	f7fe fd9d 	bl	4090a4 <__sfp_lock_acquire>
  40a56a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a56c:	2200      	movs	r2, #0
  40a56e:	07db      	lsls	r3, r3, #31
  40a570:	81a2      	strh	r2, [r4, #12]
  40a572:	d50e      	bpl.n	40a592 <_fclose_r+0x9a>
  40a574:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a576:	f7ff f8a3 	bl	4096c0 <__retarget_lock_close_recursive>
  40a57a:	f7fe fd99 	bl	4090b0 <__sfp_lock_release>
  40a57e:	4630      	mov	r0, r6
  40a580:	bd70      	pop	{r4, r5, r6, pc}
  40a582:	f7fe fd63 	bl	40904c <__sinit>
  40a586:	e7bf      	b.n	40a508 <_fclose_r+0x10>
  40a588:	6921      	ldr	r1, [r4, #16]
  40a58a:	4628      	mov	r0, r5
  40a58c:	f7fe fe00 	bl	409190 <_free_r>
  40a590:	e7d7      	b.n	40a542 <_fclose_r+0x4a>
  40a592:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a594:	f7ff f898 	bl	4096c8 <__retarget_lock_release_recursive>
  40a598:	e7ec      	b.n	40a574 <_fclose_r+0x7c>
  40a59a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a59c:	f7ff f892 	bl	4096c4 <__retarget_lock_acquire_recursive>
  40a5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a5a4:	2b00      	cmp	r3, #0
  40a5a6:	d1bb      	bne.n	40a520 <_fclose_r+0x28>
  40a5a8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40a5aa:	f016 0601 	ands.w	r6, r6, #1
  40a5ae:	d1b1      	bne.n	40a514 <_fclose_r+0x1c>
  40a5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a5b2:	f7ff f889 	bl	4096c8 <__retarget_lock_release_recursive>
  40a5b6:	4630      	mov	r0, r6
  40a5b8:	bd70      	pop	{r4, r5, r6, pc}
  40a5ba:	bf00      	nop

0040a5bc <__fputwc>:
  40a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a5c0:	b082      	sub	sp, #8
  40a5c2:	4680      	mov	r8, r0
  40a5c4:	4689      	mov	r9, r1
  40a5c6:	4614      	mov	r4, r2
  40a5c8:	f000 f8a2 	bl	40a710 <__locale_mb_cur_max>
  40a5cc:	2801      	cmp	r0, #1
  40a5ce:	d036      	beq.n	40a63e <__fputwc+0x82>
  40a5d0:	464a      	mov	r2, r9
  40a5d2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40a5d6:	a901      	add	r1, sp, #4
  40a5d8:	4640      	mov	r0, r8
  40a5da:	f000 f941 	bl	40a860 <_wcrtomb_r>
  40a5de:	1c42      	adds	r2, r0, #1
  40a5e0:	4606      	mov	r6, r0
  40a5e2:	d025      	beq.n	40a630 <__fputwc+0x74>
  40a5e4:	b3a8      	cbz	r0, 40a652 <__fputwc+0x96>
  40a5e6:	f89d e004 	ldrb.w	lr, [sp, #4]
  40a5ea:	2500      	movs	r5, #0
  40a5ec:	f10d 0a04 	add.w	sl, sp, #4
  40a5f0:	e009      	b.n	40a606 <__fputwc+0x4a>
  40a5f2:	6823      	ldr	r3, [r4, #0]
  40a5f4:	1c5a      	adds	r2, r3, #1
  40a5f6:	6022      	str	r2, [r4, #0]
  40a5f8:	f883 e000 	strb.w	lr, [r3]
  40a5fc:	3501      	adds	r5, #1
  40a5fe:	42b5      	cmp	r5, r6
  40a600:	d227      	bcs.n	40a652 <__fputwc+0x96>
  40a602:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40a606:	68a3      	ldr	r3, [r4, #8]
  40a608:	3b01      	subs	r3, #1
  40a60a:	2b00      	cmp	r3, #0
  40a60c:	60a3      	str	r3, [r4, #8]
  40a60e:	daf0      	bge.n	40a5f2 <__fputwc+0x36>
  40a610:	69a7      	ldr	r7, [r4, #24]
  40a612:	42bb      	cmp	r3, r7
  40a614:	4671      	mov	r1, lr
  40a616:	4622      	mov	r2, r4
  40a618:	4640      	mov	r0, r8
  40a61a:	db02      	blt.n	40a622 <__fputwc+0x66>
  40a61c:	f1be 0f0a 	cmp.w	lr, #10
  40a620:	d1e7      	bne.n	40a5f2 <__fputwc+0x36>
  40a622:	f000 f8c5 	bl	40a7b0 <__swbuf_r>
  40a626:	1c43      	adds	r3, r0, #1
  40a628:	d1e8      	bne.n	40a5fc <__fputwc+0x40>
  40a62a:	b002      	add	sp, #8
  40a62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a630:	89a3      	ldrh	r3, [r4, #12]
  40a632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a636:	81a3      	strh	r3, [r4, #12]
  40a638:	b002      	add	sp, #8
  40a63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a63e:	f109 33ff 	add.w	r3, r9, #4294967295
  40a642:	2bfe      	cmp	r3, #254	; 0xfe
  40a644:	d8c4      	bhi.n	40a5d0 <__fputwc+0x14>
  40a646:	fa5f fe89 	uxtb.w	lr, r9
  40a64a:	4606      	mov	r6, r0
  40a64c:	f88d e004 	strb.w	lr, [sp, #4]
  40a650:	e7cb      	b.n	40a5ea <__fputwc+0x2e>
  40a652:	4648      	mov	r0, r9
  40a654:	b002      	add	sp, #8
  40a656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a65a:	bf00      	nop

0040a65c <_fputwc_r>:
  40a65c:	b530      	push	{r4, r5, lr}
  40a65e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40a660:	f013 0f01 	tst.w	r3, #1
  40a664:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40a668:	4614      	mov	r4, r2
  40a66a:	b083      	sub	sp, #12
  40a66c:	4605      	mov	r5, r0
  40a66e:	b29a      	uxth	r2, r3
  40a670:	d101      	bne.n	40a676 <_fputwc_r+0x1a>
  40a672:	0590      	lsls	r0, r2, #22
  40a674:	d51c      	bpl.n	40a6b0 <_fputwc_r+0x54>
  40a676:	0490      	lsls	r0, r2, #18
  40a678:	d406      	bmi.n	40a688 <_fputwc_r+0x2c>
  40a67a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40a67c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40a680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a684:	81a3      	strh	r3, [r4, #12]
  40a686:	6662      	str	r2, [r4, #100]	; 0x64
  40a688:	4628      	mov	r0, r5
  40a68a:	4622      	mov	r2, r4
  40a68c:	f7ff ff96 	bl	40a5bc <__fputwc>
  40a690:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a692:	07da      	lsls	r2, r3, #31
  40a694:	4605      	mov	r5, r0
  40a696:	d402      	bmi.n	40a69e <_fputwc_r+0x42>
  40a698:	89a3      	ldrh	r3, [r4, #12]
  40a69a:	059b      	lsls	r3, r3, #22
  40a69c:	d502      	bpl.n	40a6a4 <_fputwc_r+0x48>
  40a69e:	4628      	mov	r0, r5
  40a6a0:	b003      	add	sp, #12
  40a6a2:	bd30      	pop	{r4, r5, pc}
  40a6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a6a6:	f7ff f80f 	bl	4096c8 <__retarget_lock_release_recursive>
  40a6aa:	4628      	mov	r0, r5
  40a6ac:	b003      	add	sp, #12
  40a6ae:	bd30      	pop	{r4, r5, pc}
  40a6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a6b2:	9101      	str	r1, [sp, #4]
  40a6b4:	f7ff f806 	bl	4096c4 <__retarget_lock_acquire_recursive>
  40a6b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a6bc:	9901      	ldr	r1, [sp, #4]
  40a6be:	b29a      	uxth	r2, r3
  40a6c0:	e7d9      	b.n	40a676 <_fputwc_r+0x1a>
  40a6c2:	bf00      	nop

0040a6c4 <_fstat_r>:
  40a6c4:	b538      	push	{r3, r4, r5, lr}
  40a6c6:	460b      	mov	r3, r1
  40a6c8:	4c07      	ldr	r4, [pc, #28]	; (40a6e8 <_fstat_r+0x24>)
  40a6ca:	4605      	mov	r5, r0
  40a6cc:	4611      	mov	r1, r2
  40a6ce:	4618      	mov	r0, r3
  40a6d0:	2300      	movs	r3, #0
  40a6d2:	6023      	str	r3, [r4, #0]
  40a6d4:	f7f7 f81b 	bl	40170e <_fstat>
  40a6d8:	1c43      	adds	r3, r0, #1
  40a6da:	d000      	beq.n	40a6de <_fstat_r+0x1a>
  40a6dc:	bd38      	pop	{r3, r4, r5, pc}
  40a6de:	6823      	ldr	r3, [r4, #0]
  40a6e0:	2b00      	cmp	r3, #0
  40a6e2:	d0fb      	beq.n	40a6dc <_fstat_r+0x18>
  40a6e4:	602b      	str	r3, [r5, #0]
  40a6e6:	bd38      	pop	{r3, r4, r5, pc}
  40a6e8:	20400e60 	.word	0x20400e60

0040a6ec <_isatty_r>:
  40a6ec:	b538      	push	{r3, r4, r5, lr}
  40a6ee:	4c07      	ldr	r4, [pc, #28]	; (40a70c <_isatty_r+0x20>)
  40a6f0:	2300      	movs	r3, #0
  40a6f2:	4605      	mov	r5, r0
  40a6f4:	4608      	mov	r0, r1
  40a6f6:	6023      	str	r3, [r4, #0]
  40a6f8:	f7f7 f80e 	bl	401718 <_isatty>
  40a6fc:	1c43      	adds	r3, r0, #1
  40a6fe:	d000      	beq.n	40a702 <_isatty_r+0x16>
  40a700:	bd38      	pop	{r3, r4, r5, pc}
  40a702:	6823      	ldr	r3, [r4, #0]
  40a704:	2b00      	cmp	r3, #0
  40a706:	d0fb      	beq.n	40a700 <_isatty_r+0x14>
  40a708:	602b      	str	r3, [r5, #0]
  40a70a:	bd38      	pop	{r3, r4, r5, pc}
  40a70c:	20400e60 	.word	0x20400e60

0040a710 <__locale_mb_cur_max>:
  40a710:	4b04      	ldr	r3, [pc, #16]	; (40a724 <__locale_mb_cur_max+0x14>)
  40a712:	4a05      	ldr	r2, [pc, #20]	; (40a728 <__locale_mb_cur_max+0x18>)
  40a714:	681b      	ldr	r3, [r3, #0]
  40a716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40a718:	2b00      	cmp	r3, #0
  40a71a:	bf08      	it	eq
  40a71c:	4613      	moveq	r3, r2
  40a71e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40a722:	4770      	bx	lr
  40a724:	20400028 	.word	0x20400028
  40a728:	2040086c 	.word	0x2040086c

0040a72c <_lseek_r>:
  40a72c:	b570      	push	{r4, r5, r6, lr}
  40a72e:	460d      	mov	r5, r1
  40a730:	4c08      	ldr	r4, [pc, #32]	; (40a754 <_lseek_r+0x28>)
  40a732:	4611      	mov	r1, r2
  40a734:	4606      	mov	r6, r0
  40a736:	461a      	mov	r2, r3
  40a738:	4628      	mov	r0, r5
  40a73a:	2300      	movs	r3, #0
  40a73c:	6023      	str	r3, [r4, #0]
  40a73e:	f7f6 ffed 	bl	40171c <_lseek>
  40a742:	1c43      	adds	r3, r0, #1
  40a744:	d000      	beq.n	40a748 <_lseek_r+0x1c>
  40a746:	bd70      	pop	{r4, r5, r6, pc}
  40a748:	6823      	ldr	r3, [r4, #0]
  40a74a:	2b00      	cmp	r3, #0
  40a74c:	d0fb      	beq.n	40a746 <_lseek_r+0x1a>
  40a74e:	6033      	str	r3, [r6, #0]
  40a750:	bd70      	pop	{r4, r5, r6, pc}
  40a752:	bf00      	nop
  40a754:	20400e60 	.word	0x20400e60

0040a758 <__ascii_mbtowc>:
  40a758:	b082      	sub	sp, #8
  40a75a:	b149      	cbz	r1, 40a770 <__ascii_mbtowc+0x18>
  40a75c:	b15a      	cbz	r2, 40a776 <__ascii_mbtowc+0x1e>
  40a75e:	b16b      	cbz	r3, 40a77c <__ascii_mbtowc+0x24>
  40a760:	7813      	ldrb	r3, [r2, #0]
  40a762:	600b      	str	r3, [r1, #0]
  40a764:	7812      	ldrb	r2, [r2, #0]
  40a766:	1c10      	adds	r0, r2, #0
  40a768:	bf18      	it	ne
  40a76a:	2001      	movne	r0, #1
  40a76c:	b002      	add	sp, #8
  40a76e:	4770      	bx	lr
  40a770:	a901      	add	r1, sp, #4
  40a772:	2a00      	cmp	r2, #0
  40a774:	d1f3      	bne.n	40a75e <__ascii_mbtowc+0x6>
  40a776:	4610      	mov	r0, r2
  40a778:	b002      	add	sp, #8
  40a77a:	4770      	bx	lr
  40a77c:	f06f 0001 	mvn.w	r0, #1
  40a780:	e7f4      	b.n	40a76c <__ascii_mbtowc+0x14>
  40a782:	bf00      	nop

0040a784 <_read_r>:
  40a784:	b570      	push	{r4, r5, r6, lr}
  40a786:	460d      	mov	r5, r1
  40a788:	4c08      	ldr	r4, [pc, #32]	; (40a7ac <_read_r+0x28>)
  40a78a:	4611      	mov	r1, r2
  40a78c:	4606      	mov	r6, r0
  40a78e:	461a      	mov	r2, r3
  40a790:	4628      	mov	r0, r5
  40a792:	2300      	movs	r3, #0
  40a794:	6023      	str	r3, [r4, #0]
  40a796:	f7f6 fa7f 	bl	400c98 <_read>
  40a79a:	1c43      	adds	r3, r0, #1
  40a79c:	d000      	beq.n	40a7a0 <_read_r+0x1c>
  40a79e:	bd70      	pop	{r4, r5, r6, pc}
  40a7a0:	6823      	ldr	r3, [r4, #0]
  40a7a2:	2b00      	cmp	r3, #0
  40a7a4:	d0fb      	beq.n	40a79e <_read_r+0x1a>
  40a7a6:	6033      	str	r3, [r6, #0]
  40a7a8:	bd70      	pop	{r4, r5, r6, pc}
  40a7aa:	bf00      	nop
  40a7ac:	20400e60 	.word	0x20400e60

0040a7b0 <__swbuf_r>:
  40a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a7b2:	460d      	mov	r5, r1
  40a7b4:	4614      	mov	r4, r2
  40a7b6:	4606      	mov	r6, r0
  40a7b8:	b110      	cbz	r0, 40a7c0 <__swbuf_r+0x10>
  40a7ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a7bc:	2b00      	cmp	r3, #0
  40a7be:	d04b      	beq.n	40a858 <__swbuf_r+0xa8>
  40a7c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a7c4:	69a3      	ldr	r3, [r4, #24]
  40a7c6:	60a3      	str	r3, [r4, #8]
  40a7c8:	b291      	uxth	r1, r2
  40a7ca:	0708      	lsls	r0, r1, #28
  40a7cc:	d539      	bpl.n	40a842 <__swbuf_r+0x92>
  40a7ce:	6923      	ldr	r3, [r4, #16]
  40a7d0:	2b00      	cmp	r3, #0
  40a7d2:	d036      	beq.n	40a842 <__swbuf_r+0x92>
  40a7d4:	b2ed      	uxtb	r5, r5
  40a7d6:	0489      	lsls	r1, r1, #18
  40a7d8:	462f      	mov	r7, r5
  40a7da:	d515      	bpl.n	40a808 <__swbuf_r+0x58>
  40a7dc:	6822      	ldr	r2, [r4, #0]
  40a7de:	6961      	ldr	r1, [r4, #20]
  40a7e0:	1ad3      	subs	r3, r2, r3
  40a7e2:	428b      	cmp	r3, r1
  40a7e4:	da1c      	bge.n	40a820 <__swbuf_r+0x70>
  40a7e6:	3301      	adds	r3, #1
  40a7e8:	68a1      	ldr	r1, [r4, #8]
  40a7ea:	1c50      	adds	r0, r2, #1
  40a7ec:	3901      	subs	r1, #1
  40a7ee:	60a1      	str	r1, [r4, #8]
  40a7f0:	6020      	str	r0, [r4, #0]
  40a7f2:	7015      	strb	r5, [r2, #0]
  40a7f4:	6962      	ldr	r2, [r4, #20]
  40a7f6:	429a      	cmp	r2, r3
  40a7f8:	d01a      	beq.n	40a830 <__swbuf_r+0x80>
  40a7fa:	89a3      	ldrh	r3, [r4, #12]
  40a7fc:	07db      	lsls	r3, r3, #31
  40a7fe:	d501      	bpl.n	40a804 <__swbuf_r+0x54>
  40a800:	2d0a      	cmp	r5, #10
  40a802:	d015      	beq.n	40a830 <__swbuf_r+0x80>
  40a804:	4638      	mov	r0, r7
  40a806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a808:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40a80a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a80e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40a812:	81a2      	strh	r2, [r4, #12]
  40a814:	6822      	ldr	r2, [r4, #0]
  40a816:	6661      	str	r1, [r4, #100]	; 0x64
  40a818:	6961      	ldr	r1, [r4, #20]
  40a81a:	1ad3      	subs	r3, r2, r3
  40a81c:	428b      	cmp	r3, r1
  40a81e:	dbe2      	blt.n	40a7e6 <__swbuf_r+0x36>
  40a820:	4621      	mov	r1, r4
  40a822:	4630      	mov	r0, r6
  40a824:	f7fe fbba 	bl	408f9c <_fflush_r>
  40a828:	b940      	cbnz	r0, 40a83c <__swbuf_r+0x8c>
  40a82a:	6822      	ldr	r2, [r4, #0]
  40a82c:	2301      	movs	r3, #1
  40a82e:	e7db      	b.n	40a7e8 <__swbuf_r+0x38>
  40a830:	4621      	mov	r1, r4
  40a832:	4630      	mov	r0, r6
  40a834:	f7fe fbb2 	bl	408f9c <_fflush_r>
  40a838:	2800      	cmp	r0, #0
  40a83a:	d0e3      	beq.n	40a804 <__swbuf_r+0x54>
  40a83c:	f04f 37ff 	mov.w	r7, #4294967295
  40a840:	e7e0      	b.n	40a804 <__swbuf_r+0x54>
  40a842:	4621      	mov	r1, r4
  40a844:	4630      	mov	r0, r6
  40a846:	f7fd fad7 	bl	407df8 <__swsetup_r>
  40a84a:	2800      	cmp	r0, #0
  40a84c:	d1f6      	bne.n	40a83c <__swbuf_r+0x8c>
  40a84e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40a852:	6923      	ldr	r3, [r4, #16]
  40a854:	b291      	uxth	r1, r2
  40a856:	e7bd      	b.n	40a7d4 <__swbuf_r+0x24>
  40a858:	f7fe fbf8 	bl	40904c <__sinit>
  40a85c:	e7b0      	b.n	40a7c0 <__swbuf_r+0x10>
  40a85e:	bf00      	nop

0040a860 <_wcrtomb_r>:
  40a860:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a862:	4606      	mov	r6, r0
  40a864:	b085      	sub	sp, #20
  40a866:	461f      	mov	r7, r3
  40a868:	b189      	cbz	r1, 40a88e <_wcrtomb_r+0x2e>
  40a86a:	4c10      	ldr	r4, [pc, #64]	; (40a8ac <_wcrtomb_r+0x4c>)
  40a86c:	4d10      	ldr	r5, [pc, #64]	; (40a8b0 <_wcrtomb_r+0x50>)
  40a86e:	6824      	ldr	r4, [r4, #0]
  40a870:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40a872:	2c00      	cmp	r4, #0
  40a874:	bf08      	it	eq
  40a876:	462c      	moveq	r4, r5
  40a878:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40a87c:	47a0      	blx	r4
  40a87e:	1c43      	adds	r3, r0, #1
  40a880:	d103      	bne.n	40a88a <_wcrtomb_r+0x2a>
  40a882:	2200      	movs	r2, #0
  40a884:	238a      	movs	r3, #138	; 0x8a
  40a886:	603a      	str	r2, [r7, #0]
  40a888:	6033      	str	r3, [r6, #0]
  40a88a:	b005      	add	sp, #20
  40a88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a88e:	460c      	mov	r4, r1
  40a890:	4906      	ldr	r1, [pc, #24]	; (40a8ac <_wcrtomb_r+0x4c>)
  40a892:	4a07      	ldr	r2, [pc, #28]	; (40a8b0 <_wcrtomb_r+0x50>)
  40a894:	6809      	ldr	r1, [r1, #0]
  40a896:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40a898:	2900      	cmp	r1, #0
  40a89a:	bf08      	it	eq
  40a89c:	4611      	moveq	r1, r2
  40a89e:	4622      	mov	r2, r4
  40a8a0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40a8a4:	a901      	add	r1, sp, #4
  40a8a6:	47a0      	blx	r4
  40a8a8:	e7e9      	b.n	40a87e <_wcrtomb_r+0x1e>
  40a8aa:	bf00      	nop
  40a8ac:	20400028 	.word	0x20400028
  40a8b0:	2040086c 	.word	0x2040086c

0040a8b4 <__ascii_wctomb>:
  40a8b4:	b121      	cbz	r1, 40a8c0 <__ascii_wctomb+0xc>
  40a8b6:	2aff      	cmp	r2, #255	; 0xff
  40a8b8:	d804      	bhi.n	40a8c4 <__ascii_wctomb+0x10>
  40a8ba:	700a      	strb	r2, [r1, #0]
  40a8bc:	2001      	movs	r0, #1
  40a8be:	4770      	bx	lr
  40a8c0:	4608      	mov	r0, r1
  40a8c2:	4770      	bx	lr
  40a8c4:	238a      	movs	r3, #138	; 0x8a
  40a8c6:	6003      	str	r3, [r0, #0]
  40a8c8:	f04f 30ff 	mov.w	r0, #4294967295
  40a8cc:	4770      	bx	lr
  40a8ce:	bf00      	nop

0040a8d0 <__aeabi_d2iz>:
  40a8d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a8d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a8d8:	d215      	bcs.n	40a906 <__aeabi_d2iz+0x36>
  40a8da:	d511      	bpl.n	40a900 <__aeabi_d2iz+0x30>
  40a8dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a8e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a8e4:	d912      	bls.n	40a90c <__aeabi_d2iz+0x3c>
  40a8e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a8ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a8ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a8f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a8f6:	fa23 f002 	lsr.w	r0, r3, r2
  40a8fa:	bf18      	it	ne
  40a8fc:	4240      	negne	r0, r0
  40a8fe:	4770      	bx	lr
  40a900:	f04f 0000 	mov.w	r0, #0
  40a904:	4770      	bx	lr
  40a906:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a90a:	d105      	bne.n	40a918 <__aeabi_d2iz+0x48>
  40a90c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a910:	bf08      	it	eq
  40a912:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a916:	4770      	bx	lr
  40a918:	f04f 0000 	mov.w	r0, #0
  40a91c:	4770      	bx	lr
  40a91e:	bf00      	nop

0040a920 <__aeabi_uldivmod>:
  40a920:	b953      	cbnz	r3, 40a938 <__aeabi_uldivmod+0x18>
  40a922:	b94a      	cbnz	r2, 40a938 <__aeabi_uldivmod+0x18>
  40a924:	2900      	cmp	r1, #0
  40a926:	bf08      	it	eq
  40a928:	2800      	cmpeq	r0, #0
  40a92a:	bf1c      	itt	ne
  40a92c:	f04f 31ff 	movne.w	r1, #4294967295
  40a930:	f04f 30ff 	movne.w	r0, #4294967295
  40a934:	f000 b97a 	b.w	40ac2c <__aeabi_idiv0>
  40a938:	f1ad 0c08 	sub.w	ip, sp, #8
  40a93c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a940:	f000 f806 	bl	40a950 <__udivmoddi4>
  40a944:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a94c:	b004      	add	sp, #16
  40a94e:	4770      	bx	lr

0040a950 <__udivmoddi4>:
  40a950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a954:	468c      	mov	ip, r1
  40a956:	460d      	mov	r5, r1
  40a958:	4604      	mov	r4, r0
  40a95a:	9e08      	ldr	r6, [sp, #32]
  40a95c:	2b00      	cmp	r3, #0
  40a95e:	d151      	bne.n	40aa04 <__udivmoddi4+0xb4>
  40a960:	428a      	cmp	r2, r1
  40a962:	4617      	mov	r7, r2
  40a964:	d96d      	bls.n	40aa42 <__udivmoddi4+0xf2>
  40a966:	fab2 fe82 	clz	lr, r2
  40a96a:	f1be 0f00 	cmp.w	lr, #0
  40a96e:	d00b      	beq.n	40a988 <__udivmoddi4+0x38>
  40a970:	f1ce 0c20 	rsb	ip, lr, #32
  40a974:	fa01 f50e 	lsl.w	r5, r1, lr
  40a978:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a97c:	fa02 f70e 	lsl.w	r7, r2, lr
  40a980:	ea4c 0c05 	orr.w	ip, ip, r5
  40a984:	fa00 f40e 	lsl.w	r4, r0, lr
  40a988:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40a98c:	0c25      	lsrs	r5, r4, #16
  40a98e:	fbbc f8fa 	udiv	r8, ip, sl
  40a992:	fa1f f987 	uxth.w	r9, r7
  40a996:	fb0a cc18 	mls	ip, sl, r8, ip
  40a99a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40a99e:	fb08 f309 	mul.w	r3, r8, r9
  40a9a2:	42ab      	cmp	r3, r5
  40a9a4:	d90a      	bls.n	40a9bc <__udivmoddi4+0x6c>
  40a9a6:	19ed      	adds	r5, r5, r7
  40a9a8:	f108 32ff 	add.w	r2, r8, #4294967295
  40a9ac:	f080 8123 	bcs.w	40abf6 <__udivmoddi4+0x2a6>
  40a9b0:	42ab      	cmp	r3, r5
  40a9b2:	f240 8120 	bls.w	40abf6 <__udivmoddi4+0x2a6>
  40a9b6:	f1a8 0802 	sub.w	r8, r8, #2
  40a9ba:	443d      	add	r5, r7
  40a9bc:	1aed      	subs	r5, r5, r3
  40a9be:	b2a4      	uxth	r4, r4
  40a9c0:	fbb5 f0fa 	udiv	r0, r5, sl
  40a9c4:	fb0a 5510 	mls	r5, sl, r0, r5
  40a9c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a9cc:	fb00 f909 	mul.w	r9, r0, r9
  40a9d0:	45a1      	cmp	r9, r4
  40a9d2:	d909      	bls.n	40a9e8 <__udivmoddi4+0x98>
  40a9d4:	19e4      	adds	r4, r4, r7
  40a9d6:	f100 33ff 	add.w	r3, r0, #4294967295
  40a9da:	f080 810a 	bcs.w	40abf2 <__udivmoddi4+0x2a2>
  40a9de:	45a1      	cmp	r9, r4
  40a9e0:	f240 8107 	bls.w	40abf2 <__udivmoddi4+0x2a2>
  40a9e4:	3802      	subs	r0, #2
  40a9e6:	443c      	add	r4, r7
  40a9e8:	eba4 0409 	sub.w	r4, r4, r9
  40a9ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a9f0:	2100      	movs	r1, #0
  40a9f2:	2e00      	cmp	r6, #0
  40a9f4:	d061      	beq.n	40aaba <__udivmoddi4+0x16a>
  40a9f6:	fa24 f40e 	lsr.w	r4, r4, lr
  40a9fa:	2300      	movs	r3, #0
  40a9fc:	6034      	str	r4, [r6, #0]
  40a9fe:	6073      	str	r3, [r6, #4]
  40aa00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aa04:	428b      	cmp	r3, r1
  40aa06:	d907      	bls.n	40aa18 <__udivmoddi4+0xc8>
  40aa08:	2e00      	cmp	r6, #0
  40aa0a:	d054      	beq.n	40aab6 <__udivmoddi4+0x166>
  40aa0c:	2100      	movs	r1, #0
  40aa0e:	e886 0021 	stmia.w	r6, {r0, r5}
  40aa12:	4608      	mov	r0, r1
  40aa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aa18:	fab3 f183 	clz	r1, r3
  40aa1c:	2900      	cmp	r1, #0
  40aa1e:	f040 808e 	bne.w	40ab3e <__udivmoddi4+0x1ee>
  40aa22:	42ab      	cmp	r3, r5
  40aa24:	d302      	bcc.n	40aa2c <__udivmoddi4+0xdc>
  40aa26:	4282      	cmp	r2, r0
  40aa28:	f200 80fa 	bhi.w	40ac20 <__udivmoddi4+0x2d0>
  40aa2c:	1a84      	subs	r4, r0, r2
  40aa2e:	eb65 0503 	sbc.w	r5, r5, r3
  40aa32:	2001      	movs	r0, #1
  40aa34:	46ac      	mov	ip, r5
  40aa36:	2e00      	cmp	r6, #0
  40aa38:	d03f      	beq.n	40aaba <__udivmoddi4+0x16a>
  40aa3a:	e886 1010 	stmia.w	r6, {r4, ip}
  40aa3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aa42:	b912      	cbnz	r2, 40aa4a <__udivmoddi4+0xfa>
  40aa44:	2701      	movs	r7, #1
  40aa46:	fbb7 f7f2 	udiv	r7, r7, r2
  40aa4a:	fab7 fe87 	clz	lr, r7
  40aa4e:	f1be 0f00 	cmp.w	lr, #0
  40aa52:	d134      	bne.n	40aabe <__udivmoddi4+0x16e>
  40aa54:	1beb      	subs	r3, r5, r7
  40aa56:	0c3a      	lsrs	r2, r7, #16
  40aa58:	fa1f fc87 	uxth.w	ip, r7
  40aa5c:	2101      	movs	r1, #1
  40aa5e:	fbb3 f8f2 	udiv	r8, r3, r2
  40aa62:	0c25      	lsrs	r5, r4, #16
  40aa64:	fb02 3318 	mls	r3, r2, r8, r3
  40aa68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40aa6c:	fb0c f308 	mul.w	r3, ip, r8
  40aa70:	42ab      	cmp	r3, r5
  40aa72:	d907      	bls.n	40aa84 <__udivmoddi4+0x134>
  40aa74:	19ed      	adds	r5, r5, r7
  40aa76:	f108 30ff 	add.w	r0, r8, #4294967295
  40aa7a:	d202      	bcs.n	40aa82 <__udivmoddi4+0x132>
  40aa7c:	42ab      	cmp	r3, r5
  40aa7e:	f200 80d1 	bhi.w	40ac24 <__udivmoddi4+0x2d4>
  40aa82:	4680      	mov	r8, r0
  40aa84:	1aed      	subs	r5, r5, r3
  40aa86:	b2a3      	uxth	r3, r4
  40aa88:	fbb5 f0f2 	udiv	r0, r5, r2
  40aa8c:	fb02 5510 	mls	r5, r2, r0, r5
  40aa90:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40aa94:	fb0c fc00 	mul.w	ip, ip, r0
  40aa98:	45a4      	cmp	ip, r4
  40aa9a:	d907      	bls.n	40aaac <__udivmoddi4+0x15c>
  40aa9c:	19e4      	adds	r4, r4, r7
  40aa9e:	f100 33ff 	add.w	r3, r0, #4294967295
  40aaa2:	d202      	bcs.n	40aaaa <__udivmoddi4+0x15a>
  40aaa4:	45a4      	cmp	ip, r4
  40aaa6:	f200 80b8 	bhi.w	40ac1a <__udivmoddi4+0x2ca>
  40aaaa:	4618      	mov	r0, r3
  40aaac:	eba4 040c 	sub.w	r4, r4, ip
  40aab0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40aab4:	e79d      	b.n	40a9f2 <__udivmoddi4+0xa2>
  40aab6:	4631      	mov	r1, r6
  40aab8:	4630      	mov	r0, r6
  40aaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aabe:	f1ce 0420 	rsb	r4, lr, #32
  40aac2:	fa05 f30e 	lsl.w	r3, r5, lr
  40aac6:	fa07 f70e 	lsl.w	r7, r7, lr
  40aaca:	fa20 f804 	lsr.w	r8, r0, r4
  40aace:	0c3a      	lsrs	r2, r7, #16
  40aad0:	fa25 f404 	lsr.w	r4, r5, r4
  40aad4:	ea48 0803 	orr.w	r8, r8, r3
  40aad8:	fbb4 f1f2 	udiv	r1, r4, r2
  40aadc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40aae0:	fb02 4411 	mls	r4, r2, r1, r4
  40aae4:	fa1f fc87 	uxth.w	ip, r7
  40aae8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40aaec:	fb01 f30c 	mul.w	r3, r1, ip
  40aaf0:	42ab      	cmp	r3, r5
  40aaf2:	fa00 f40e 	lsl.w	r4, r0, lr
  40aaf6:	d909      	bls.n	40ab0c <__udivmoddi4+0x1bc>
  40aaf8:	19ed      	adds	r5, r5, r7
  40aafa:	f101 30ff 	add.w	r0, r1, #4294967295
  40aafe:	f080 808a 	bcs.w	40ac16 <__udivmoddi4+0x2c6>
  40ab02:	42ab      	cmp	r3, r5
  40ab04:	f240 8087 	bls.w	40ac16 <__udivmoddi4+0x2c6>
  40ab08:	3902      	subs	r1, #2
  40ab0a:	443d      	add	r5, r7
  40ab0c:	1aeb      	subs	r3, r5, r3
  40ab0e:	fa1f f588 	uxth.w	r5, r8
  40ab12:	fbb3 f0f2 	udiv	r0, r3, r2
  40ab16:	fb02 3310 	mls	r3, r2, r0, r3
  40ab1a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40ab1e:	fb00 f30c 	mul.w	r3, r0, ip
  40ab22:	42ab      	cmp	r3, r5
  40ab24:	d907      	bls.n	40ab36 <__udivmoddi4+0x1e6>
  40ab26:	19ed      	adds	r5, r5, r7
  40ab28:	f100 38ff 	add.w	r8, r0, #4294967295
  40ab2c:	d26f      	bcs.n	40ac0e <__udivmoddi4+0x2be>
  40ab2e:	42ab      	cmp	r3, r5
  40ab30:	d96d      	bls.n	40ac0e <__udivmoddi4+0x2be>
  40ab32:	3802      	subs	r0, #2
  40ab34:	443d      	add	r5, r7
  40ab36:	1aeb      	subs	r3, r5, r3
  40ab38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40ab3c:	e78f      	b.n	40aa5e <__udivmoddi4+0x10e>
  40ab3e:	f1c1 0720 	rsb	r7, r1, #32
  40ab42:	fa22 f807 	lsr.w	r8, r2, r7
  40ab46:	408b      	lsls	r3, r1
  40ab48:	fa05 f401 	lsl.w	r4, r5, r1
  40ab4c:	ea48 0303 	orr.w	r3, r8, r3
  40ab50:	fa20 fe07 	lsr.w	lr, r0, r7
  40ab54:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40ab58:	40fd      	lsrs	r5, r7
  40ab5a:	ea4e 0e04 	orr.w	lr, lr, r4
  40ab5e:	fbb5 f9fc 	udiv	r9, r5, ip
  40ab62:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40ab66:	fb0c 5519 	mls	r5, ip, r9, r5
  40ab6a:	fa1f f883 	uxth.w	r8, r3
  40ab6e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40ab72:	fb09 f408 	mul.w	r4, r9, r8
  40ab76:	42ac      	cmp	r4, r5
  40ab78:	fa02 f201 	lsl.w	r2, r2, r1
  40ab7c:	fa00 fa01 	lsl.w	sl, r0, r1
  40ab80:	d908      	bls.n	40ab94 <__udivmoddi4+0x244>
  40ab82:	18ed      	adds	r5, r5, r3
  40ab84:	f109 30ff 	add.w	r0, r9, #4294967295
  40ab88:	d243      	bcs.n	40ac12 <__udivmoddi4+0x2c2>
  40ab8a:	42ac      	cmp	r4, r5
  40ab8c:	d941      	bls.n	40ac12 <__udivmoddi4+0x2c2>
  40ab8e:	f1a9 0902 	sub.w	r9, r9, #2
  40ab92:	441d      	add	r5, r3
  40ab94:	1b2d      	subs	r5, r5, r4
  40ab96:	fa1f fe8e 	uxth.w	lr, lr
  40ab9a:	fbb5 f0fc 	udiv	r0, r5, ip
  40ab9e:	fb0c 5510 	mls	r5, ip, r0, r5
  40aba2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40aba6:	fb00 f808 	mul.w	r8, r0, r8
  40abaa:	45a0      	cmp	r8, r4
  40abac:	d907      	bls.n	40abbe <__udivmoddi4+0x26e>
  40abae:	18e4      	adds	r4, r4, r3
  40abb0:	f100 35ff 	add.w	r5, r0, #4294967295
  40abb4:	d229      	bcs.n	40ac0a <__udivmoddi4+0x2ba>
  40abb6:	45a0      	cmp	r8, r4
  40abb8:	d927      	bls.n	40ac0a <__udivmoddi4+0x2ba>
  40abba:	3802      	subs	r0, #2
  40abbc:	441c      	add	r4, r3
  40abbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40abc2:	eba4 0408 	sub.w	r4, r4, r8
  40abc6:	fba0 8902 	umull	r8, r9, r0, r2
  40abca:	454c      	cmp	r4, r9
  40abcc:	46c6      	mov	lr, r8
  40abce:	464d      	mov	r5, r9
  40abd0:	d315      	bcc.n	40abfe <__udivmoddi4+0x2ae>
  40abd2:	d012      	beq.n	40abfa <__udivmoddi4+0x2aa>
  40abd4:	b156      	cbz	r6, 40abec <__udivmoddi4+0x29c>
  40abd6:	ebba 030e 	subs.w	r3, sl, lr
  40abda:	eb64 0405 	sbc.w	r4, r4, r5
  40abde:	fa04 f707 	lsl.w	r7, r4, r7
  40abe2:	40cb      	lsrs	r3, r1
  40abe4:	431f      	orrs	r7, r3
  40abe6:	40cc      	lsrs	r4, r1
  40abe8:	6037      	str	r7, [r6, #0]
  40abea:	6074      	str	r4, [r6, #4]
  40abec:	2100      	movs	r1, #0
  40abee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40abf2:	4618      	mov	r0, r3
  40abf4:	e6f8      	b.n	40a9e8 <__udivmoddi4+0x98>
  40abf6:	4690      	mov	r8, r2
  40abf8:	e6e0      	b.n	40a9bc <__udivmoddi4+0x6c>
  40abfa:	45c2      	cmp	sl, r8
  40abfc:	d2ea      	bcs.n	40abd4 <__udivmoddi4+0x284>
  40abfe:	ebb8 0e02 	subs.w	lr, r8, r2
  40ac02:	eb69 0503 	sbc.w	r5, r9, r3
  40ac06:	3801      	subs	r0, #1
  40ac08:	e7e4      	b.n	40abd4 <__udivmoddi4+0x284>
  40ac0a:	4628      	mov	r0, r5
  40ac0c:	e7d7      	b.n	40abbe <__udivmoddi4+0x26e>
  40ac0e:	4640      	mov	r0, r8
  40ac10:	e791      	b.n	40ab36 <__udivmoddi4+0x1e6>
  40ac12:	4681      	mov	r9, r0
  40ac14:	e7be      	b.n	40ab94 <__udivmoddi4+0x244>
  40ac16:	4601      	mov	r1, r0
  40ac18:	e778      	b.n	40ab0c <__udivmoddi4+0x1bc>
  40ac1a:	3802      	subs	r0, #2
  40ac1c:	443c      	add	r4, r7
  40ac1e:	e745      	b.n	40aaac <__udivmoddi4+0x15c>
  40ac20:	4608      	mov	r0, r1
  40ac22:	e708      	b.n	40aa36 <__udivmoddi4+0xe6>
  40ac24:	f1a8 0802 	sub.w	r8, r8, #2
  40ac28:	443d      	add	r5, r7
  40ac2a:	e72b      	b.n	40aa84 <__udivmoddi4+0x134>

0040ac2c <__aeabi_idiv0>:
  40ac2c:	4770      	bx	lr
  40ac2e:	bf00      	nop
  40ac30:	00000000 	.word	0x00000000
  40ac34:	3f000000 	.word	0x3f000000
  40ac38:	42b40000 	.word	0x42b40000
  40ac3c:	42b40000 	.word	0x42b40000
  40ac40:	00000000 	.word	0x00000000

0040ac44 <sysfont_glyphs>:
  40ac44:	00000000 20000000 20202020 50502000     .......     . PP
  40ac54:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
  40ac64:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
  40ac74:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
  40ac84:	10101020 50004020 5020f820 20200000      ... @.P . P..  
  40ac94:	002020f8 00000000 00402060 00f80000     .  .....` @.....
  40aca4:	00000000 60000000 10080060 00804020     .......``... @..
  40acb4:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
  40acc4:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
  40acd4:	f81010f8 0808f080 40307088 8888f080     .........p0@....
  40ace4:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
  40acf4:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
  40ad04:	40206000 40201008 00081020 f800f800     .` @.. @ .......
  40ad14:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
  40ad24:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
  40ad34:	8888f088 808870f0 70888080 888890e0     .....p.....p....
  40ad44:	f8e09088 80f08080 80f8f880 8080e080     ................
  40ad54:	80887080 70889880 f8888888 70888888     .p.....p.......p
  40ad64:	20202020 10387020 90101010 a0908860          p8.....`...
  40ad74:	8890a0c0 80808080 88f88080 8888a8d8     ................
  40ad84:	88888888 8898a8c8 88887088 70888888     .........p.....p
  40ad94:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
  40ada4:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
  40adb4:	88202020 88888888 88887088 50888888        ......p.....P
  40adc4:	88888820 88d8a8a8 20508888 88888850      .........P P...
  40add4:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
  40ade4:	38202020 20408000 e0000810 20202020        8..@ ....    
  40adf4:	5020e020 00000088 00000000 f8000000      . P............
  40ae04:	00102040 00000000 78087000 80807888     @ .......p.x.x..
  40ae14:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
  40ae24:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
  40ae34:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
  40ae44:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
  40ae54:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
  40ae64:	00008888 8888c8b0 70000088 70888888     ...........p...p
  40ae74:	88f00000 008080f0 78986800 00000808     .........h.x....
  40ae84:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
  40ae94:	00304840 88888800 00006898 50888888     @H0......h.....P
  40aea4:	88000020 50a8a888 50880000 00885020      ......P...P P..
  40aeb4:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
  40aec4:	10202040 20202020 40202020 20102020     @  .       @  . 
  40aed4:	00004020 454c4449 00000000 51726d54      @..IDLE....TmrQ
  40aee4:	00000000 20726d54 00637653 64656c6f     ....Tmr Svc.oled
  40aef4:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  40af04:	65746165 656c6f20 61742064 000d6b73     eate oled task..
  40af14:	00756d69 6c696146 74206465 7263206f     imu.Failed to cr
  40af24:	65746165 756d6920 73617420 00000d6b     eate imu task...
  40af34:	73756f68 6f645f65 00006e77 6c696146     house_down..Fail
  40af44:	74206465 7263206f 65746165 756f6820     ed to create hou
  40af54:	645f6573 206e776f 6b736174 0000000d     se_down task....
  40af64:	6569726f 6361746e 00006f61 6c696146     orientacao..Fail
  40af74:	74206465 7263206f 65746165 69726f20     ed to create ori
  40af84:	61746e65 206f6163 6b736174 0000000d     entacao task....
  40af94:	686c6166 6d652061 69726320 6f207261     falha em criar o
  40afa4:	6d657320 726f6661 0000206f 686c6166      semaforo ..falh
  40afb4:	6d652061 69726320 61207261 65757120     a em criar a que
  40afc4:	78206575 75657551 69724f65 61746e65     ue xQueueOrienta
  40afd4:	206f6163 00000000 42424242 42424242     cao ....BBBBBBBB
  40afe4:	00424242 5252455b 5b205d4f 5d633269     BBB.[ERRO] [i2c]
  40aff4:	72705b20 5d65626f 00000020 4441445b      [probe] ...[DAD
  40b004:	5b205d4f 5d633269 6f727020 4f206562     O] [i2c] probe O
  40b014:	0000004b 5252455b 5b205d4f 5d633269     K...[ERRO] [i2c]
  40b024:	65725b20 205d6461 00000000 4441445b      [read] ....[DAD
  40b034:	5b205d4f 5d633269 3a782520 00007825     O] [i2c] %x:%x..
  40b044:	5252455b 5b205d4f 5d633269 72775b20     [ERRO] [i2c] [wr
  40b054:	5d657469 00000020 00006425 6d657845     ite] ...%d..Exem
  40b064:	206f6c70 534f5452 00000000 0069696f     plo RTOS....oii.
  40b074:	63617473 766f206b 6c667265 2520776f     stack overflow %
  40b084:	73252078 00000a0d 74727173 00000000     x %s....sqrt....

0040b094 <npio2_hw>:
  40b094:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
  40b0a4:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
  40b0b4:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
  40b0c4:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
  40b0d4:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
  40b0e4:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
  40b0f4:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
  40b104:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0040b114 <two_over_pi>:
  40b114:	000000a2 000000f9 00000083 0000006e     ............n...
  40b124:	0000004e 00000044 00000015 00000029     N...D.......)...
  40b134:	000000fc 00000027 00000057 000000d1     ....'...W.......
  40b144:	000000f5 00000034 000000dd 000000c0     ....4...........
  40b154:	000000db 00000062 00000095 00000099     ....b...........
  40b164:	0000003c 00000043 00000090 00000041     <...C.......A...
  40b174:	000000fe 00000051 00000063 000000ab     ....Q...c.......
  40b184:	000000de 000000bb 000000c5 00000061     ............a...
  40b194:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
  40b1a4:	00000042 0000004d 000000d2 000000e0     B...M...........
  40b1b4:	00000006 00000049 0000002e 000000ea     ....I...........
  40b1c4:	00000009 000000d1 00000092 0000001c     ................
  40b1d4:	000000fe 0000001d 000000eb 0000001c     ................
  40b1e4:	000000b1 00000029 000000a7 0000003e     ....).......>...
  40b1f4:	000000e8 00000082 00000035 000000f5     ........5.......
  40b204:	0000002e 000000bb 00000044 00000084     ........D.......
  40b214:	000000e9 0000009c 00000070 00000026     ........p...&...
  40b224:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
  40b234:	00000039 00000091 000000d6 00000039     9...........9...
  40b244:	00000083 00000053 00000039 000000f4     ....S...9.......
  40b254:	0000009c 00000084 0000005f 0000008b     ........_.......
  40b264:	000000bd 000000f9 00000028 0000003b     ........(...;...
  40b274:	0000001f 000000f8 00000097 000000ff     ................
  40b284:	000000de 00000005 00000098 0000000f     ................
  40b294:	000000ef 0000002f 00000011 0000008b     ..../...........
  40b2a4:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
  40b2b4:	0000006d 00000036 0000007e 000000cf     m...6...~.......
  40b2c4:	00000027 000000cb 00000009 000000b7     '...............
  40b2d4:	0000004f 00000046 0000003f 00000066     O...F...?...f...
  40b2e4:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
  40b2f4:	00000075 00000027 000000ba 000000c7     u...'...........
  40b304:	000000eb 000000e5 000000f1 0000007b     ............{...
  40b314:	0000003d 00000007 00000039 000000f7     =.......9.......
  40b324:	0000008a 00000052 00000092 000000ea     ....R...........
  40b334:	0000006b 000000fb 0000005f 000000b1     k......._.......
  40b344:	0000001f 0000008d 0000005d 00000008     ........].......
  40b354:	00000056 00000003 00000030 00000046     V.......0...F...
  40b364:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
  40b374:	000000f0 000000cf 000000bc 00000020     ............ ...
  40b384:	0000009a 000000f4 00000036 0000001d     ........6.......
  40b394:	000000a9 000000e3 00000091 00000061     ............a...
  40b3a4:	0000005e 000000e6 0000001b 00000008     ^...............
  40b3b4:	00000065 00000099 00000085 0000005f     e..........._...
  40b3c4:	00000014 000000a0 00000068 00000040     ........h...@...
  40b3d4:	0000008d 000000ff 000000d8 00000080     ................
  40b3e4:	0000004d 00000073 00000027 00000031     M...s...'...1...
  40b3f4:	00000006 00000006 00000015 00000056     ............V...
  40b404:	000000ca 00000073 000000a8 000000c9     ....s...........
  40b414:	00000060 000000e2 0000007b 000000c0     `.......{.......
  40b424:	0000008c 0000006b                       ....k...

0040b42c <PIo2>:
  40b42c:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
  40b43c:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
  40b44c:	1fc40000 1bc60000 17440000              ..........D.

0040b458 <init_jk>:
  40b458:	00000004 00000007 00000009              ............

0040b464 <_global_impure_ptr>:
  40b464:	20400030 0000000a 00464e49 00666e69     0.@ ....INF.inf.
  40b474:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  40b484:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  40b494:	37363534 62613938 66656463 00000000     456789abcdef....
  40b4a4:	6c756e28 0000296c 00000030              (null)..0...

0040b4b0 <blanks.7238>:
  40b4b0:	20202020 20202020 20202020 20202020                     

0040b4c0 <zeroes.7239>:
  40b4c0:	30303030 30303030 30303030 30303030     0000000000000000
  40b4d0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0040b4e0 <__mprec_bigtens>:
  40b4e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40b4f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40b500:	7f73bf3c 75154fdd                       <.s..O.u

0040b508 <__mprec_tens>:
  40b508:	00000000 3ff00000 00000000 40240000     .......?......$@
  40b518:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40b528:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40b538:	00000000 412e8480 00000000 416312d0     .......A......cA
  40b548:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40b558:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40b568:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40b578:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40b588:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40b598:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40b5a8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40b5b8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40b5c8:	79d99db4 44ea7843                       ...yCx.D

0040b5d0 <p05.6055>:
  40b5d0:	00000005 00000019 0000007d 00000043     ........}...C...
  40b5e0:	49534f50 00000058 0000002e              POSIX.......

0040b5ec <_ctype_>:
  40b5ec:	20202000 20202020 28282020 20282828     .         ((((( 
  40b5fc:	20202020 20202020 20202020 20202020                     
  40b60c:	10108820 10101010 10101010 10101010      ...............
  40b61c:	04040410 04040404 10040404 10101010     ................
  40b62c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40b63c:	01010101 01010101 01010101 10101010     ................
  40b64c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40b65c:	02020202 02020202 02020202 10101010     ................
  40b66c:	00000020 00000000 00000000 00000000      ...............
	...

0040b6f0 <_init>:
  40b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b6f2:	bf00      	nop
  40b6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b6f6:	bc08      	pop	{r3}
  40b6f8:	469e      	mov	lr, r3
  40b6fa:	4770      	bx	lr

0040b6fc <__init_array_start>:
  40b6fc:	00407ec1 	.word	0x00407ec1

0040b700 <__frame_dummy_init_array_entry>:
  40b700:	00400165                                e.@.

0040b704 <_fini>:
  40b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b706:	bf00      	nop
  40b708:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b70a:	bc08      	pop	{r3}
  40b70c:	469e      	mov	lr, r3
  40b70e:	4770      	bx	lr

0040b710 <__fini_array_start>:
  40b710:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 ac44 0040 0706 7d20               ....D.@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <__fdlib_version>:
20400024:	0001 0000                                   ....

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__malloc_av_>:
	...
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 

20400860 <__malloc_sbrk_base>:
20400860:	ffff ffff                                   ....

20400864 <__malloc_trim_threshold>:
20400864:	0000 0002                                   ....

20400868 <__atexit_recursive_mutex>:
20400868:	0e3c 2040                                   <.@ 

2040086c <__global_locale>:
2040086c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040088c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008ec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040090c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040092c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040094c:	a8b5 0040 a759 0040 0000 0000 b5ec 0040     ..@.Y.@.......@.
2040095c:	b5e8 0040 b02c 0040 b02c 0040 b02c 0040     ..@.,.@.,.@.,.@.
2040096c:	b02c 0040 b02c 0040 b02c 0040 b02c 0040     ,.@.,.@.,.@.,.@.
2040097c:	b02c 0040 b02c 0040 ffff ffff ffff ffff     ,.@.,.@.........
2040098c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009b4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
